# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepToGeom.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepToGeom', [dirname(__file__)])
        except ImportError:
            import _StepToGeom
            return _StepToGeom
        if fp is not None:
            try:
                _mod = imp.load_module('_StepToGeom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StepToGeom = swig_import_helper()
    del swig_import_helper
else:
    import _StepToGeom
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToGeom.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepToGeom.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepToGeom.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepToGeom.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepToGeom.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepToGeom.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepToGeom.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepToGeom.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepToGeom.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepToGeom.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepToGeom.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepToGeom.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepToGeom.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepToGeom.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepToGeom.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepToGeom.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepToGeom.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepToGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.StepGeom
import OCC.Standard
import OCC.MMgt
import OCC.StepRepr
import OCC.TCollection
import OCC.StepBasic
import OCC.TColStd
import OCC.Interface
import OCC.Message
import OCC.Geom
import OCC.gp
import OCC.GeomAbs
import OCC.TColgp
import OCC.Geom2d

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class StepToGeom_MakeAxis1Placement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SA:
        :type SA: Handle_StepGeom_Axis1Placement &
        :param CA:
        :type CA: Handle_Geom_Axis1Placement &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeAxis1Placement_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeAxis1Placement_swiginit(self, _StepToGeom.new_StepToGeom_MakeAxis1Placement())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeAxis1Placement
StepToGeom_MakeAxis1Placement_swigregister = _StepToGeom.StepToGeom_MakeAxis1Placement_swigregister
StepToGeom_MakeAxis1Placement_swigregister(StepToGeom_MakeAxis1Placement)

def StepToGeom_MakeAxis1Placement_Convert(*args):
    """
    :param SA:
    :type SA: Handle_StepGeom_Axis1Placement &
    :param CA:
    :type CA: Handle_Geom_Axis1Placement &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeAxis1Placement_Convert(*args)

class StepToGeom_MakeAxis2Placement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SA:
        :type SA: Handle_StepGeom_Axis2Placement3d &
        :param CA:
        :type CA: Handle_Geom_Axis2Placement &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeAxis2Placement_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeAxis2Placement_swiginit(self, _StepToGeom.new_StepToGeom_MakeAxis2Placement())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeAxis2Placement
StepToGeom_MakeAxis2Placement_swigregister = _StepToGeom.StepToGeom_MakeAxis2Placement_swigregister
StepToGeom_MakeAxis2Placement_swigregister(StepToGeom_MakeAxis2Placement)

def StepToGeom_MakeAxis2Placement_Convert(*args):
    """
    :param SA:
    :type SA: Handle_StepGeom_Axis2Placement3d &
    :param CA:
    :type CA: Handle_Geom_Axis2Placement &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeAxis2Placement_Convert(*args)

class StepToGeom_MakeAxisPlacement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SA:
        :type SA: Handle_StepGeom_Axis2Placement2d &
        :param CA:
        :type CA: Handle_Geom2d_AxisPlacement &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeAxisPlacement_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeAxisPlacement_swiginit(self, _StepToGeom.new_StepToGeom_MakeAxisPlacement())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeAxisPlacement
StepToGeom_MakeAxisPlacement_swigregister = _StepToGeom.StepToGeom_MakeAxisPlacement_swigregister
StepToGeom_MakeAxisPlacement_swigregister(StepToGeom_MakeAxisPlacement)

def StepToGeom_MakeAxisPlacement_Convert(*args):
    """
    :param SA:
    :type SA: Handle_StepGeom_Axis2Placement2d &
    :param CA:
    :type CA: Handle_Geom2d_AxisPlacement &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeAxisPlacement_Convert(*args)

class StepToGeom_MakeBSplineCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_BSplineCurve &
        :param CC:
        :type CC: Handle_Geom_BSplineCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeBSplineCurve_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeBSplineCurve_swiginit(self, _StepToGeom.new_StepToGeom_MakeBSplineCurve())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeBSplineCurve
StepToGeom_MakeBSplineCurve_swigregister = _StepToGeom.StepToGeom_MakeBSplineCurve_swigregister
StepToGeom_MakeBSplineCurve_swigregister(StepToGeom_MakeBSplineCurve)

def StepToGeom_MakeBSplineCurve_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_BSplineCurve &
    :param CC:
    :type CC: Handle_Geom_BSplineCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeBSplineCurve_Convert(*args)

class StepToGeom_MakeBSplineCurve2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_BSplineCurve &
        :param CC:
        :type CC: Handle_Geom2d_BSplineCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeBSplineCurve2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeBSplineCurve2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeBSplineCurve2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeBSplineCurve2d
StepToGeom_MakeBSplineCurve2d_swigregister = _StepToGeom.StepToGeom_MakeBSplineCurve2d_swigregister
StepToGeom_MakeBSplineCurve2d_swigregister(StepToGeom_MakeBSplineCurve2d)

def StepToGeom_MakeBSplineCurve2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_BSplineCurve &
    :param CC:
    :type CC: Handle_Geom2d_BSplineCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeBSplineCurve2d_Convert(*args)

class StepToGeom_MakeBSplineSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_BSplineSurface &
        :param CS:
        :type CS: Handle_Geom_BSplineSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeBSplineSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeBSplineSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeBSplineSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeBSplineSurface
StepToGeom_MakeBSplineSurface_swigregister = _StepToGeom.StepToGeom_MakeBSplineSurface_swigregister
StepToGeom_MakeBSplineSurface_swigregister(StepToGeom_MakeBSplineSurface)

def StepToGeom_MakeBSplineSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_BSplineSurface &
    :param CS:
    :type CS: Handle_Geom_BSplineSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeBSplineSurface_Convert(*args)

class StepToGeom_MakeBoundedCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_BoundedCurve &
        :param CC:
        :type CC: Handle_Geom_BoundedCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeBoundedCurve_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeBoundedCurve_swiginit(self, _StepToGeom.new_StepToGeom_MakeBoundedCurve())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeBoundedCurve
StepToGeom_MakeBoundedCurve_swigregister = _StepToGeom.StepToGeom_MakeBoundedCurve_swigregister
StepToGeom_MakeBoundedCurve_swigregister(StepToGeom_MakeBoundedCurve)

def StepToGeom_MakeBoundedCurve_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_BoundedCurve &
    :param CC:
    :type CC: Handle_Geom_BoundedCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeBoundedCurve_Convert(*args)

class StepToGeom_MakeBoundedCurve2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_BoundedCurve &
        :param CC:
        :type CC: Handle_Geom2d_BoundedCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeBoundedCurve2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeBoundedCurve2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeBoundedCurve2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeBoundedCurve2d
StepToGeom_MakeBoundedCurve2d_swigregister = _StepToGeom.StepToGeom_MakeBoundedCurve2d_swigregister
StepToGeom_MakeBoundedCurve2d_swigregister(StepToGeom_MakeBoundedCurve2d)

def StepToGeom_MakeBoundedCurve2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_BoundedCurve &
    :param CC:
    :type CC: Handle_Geom2d_BoundedCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeBoundedCurve2d_Convert(*args)

class StepToGeom_MakeBoundedSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_BoundedSurface &
        :param CS:
        :type CS: Handle_Geom_BoundedSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeBoundedSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeBoundedSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeBoundedSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeBoundedSurface
StepToGeom_MakeBoundedSurface_swigregister = _StepToGeom.StepToGeom_MakeBoundedSurface_swigregister
StepToGeom_MakeBoundedSurface_swigregister(StepToGeom_MakeBoundedSurface)

def StepToGeom_MakeBoundedSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_BoundedSurface &
    :param CS:
    :type CS: Handle_Geom_BoundedSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeBoundedSurface_Convert(*args)

class StepToGeom_MakeCartesianPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SP:
        :type SP: Handle_StepGeom_CartesianPoint &
        :param CP:
        :type CP: Handle_Geom_CartesianPoint &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCartesianPoint_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCartesianPoint_swiginit(self, _StepToGeom.new_StepToGeom_MakeCartesianPoint())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCartesianPoint
StepToGeom_MakeCartesianPoint_swigregister = _StepToGeom.StepToGeom_MakeCartesianPoint_swigregister
StepToGeom_MakeCartesianPoint_swigregister(StepToGeom_MakeCartesianPoint)

def StepToGeom_MakeCartesianPoint_Convert(*args):
    """
    :param SP:
    :type SP: Handle_StepGeom_CartesianPoint &
    :param CP:
    :type CP: Handle_Geom_CartesianPoint &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCartesianPoint_Convert(*args)

class StepToGeom_MakeCartesianPoint2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SP:
        :type SP: Handle_StepGeom_CartesianPoint &
        :param CP:
        :type CP: Handle_Geom2d_CartesianPoint &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCartesianPoint2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCartesianPoint2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeCartesianPoint2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCartesianPoint2d
StepToGeom_MakeCartesianPoint2d_swigregister = _StepToGeom.StepToGeom_MakeCartesianPoint2d_swigregister
StepToGeom_MakeCartesianPoint2d_swigregister(StepToGeom_MakeCartesianPoint2d)

def StepToGeom_MakeCartesianPoint2d_Convert(*args):
    """
    :param SP:
    :type SP: Handle_StepGeom_CartesianPoint &
    :param CP:
    :type CP: Handle_Geom2d_CartesianPoint &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCartesianPoint2d_Convert(*args)

class StepToGeom_MakeCircle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Circle &
        :param CC:
        :type CC: Handle_Geom_Circle &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCircle_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCircle_swiginit(self, _StepToGeom.new_StepToGeom_MakeCircle())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCircle
StepToGeom_MakeCircle_swigregister = _StepToGeom.StepToGeom_MakeCircle_swigregister
StepToGeom_MakeCircle_swigregister(StepToGeom_MakeCircle)

def StepToGeom_MakeCircle_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Circle &
    :param CC:
    :type CC: Handle_Geom_Circle &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCircle_Convert(*args)

class StepToGeom_MakeCircle2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Circle &
        :param CC:
        :type CC: Handle_Geom2d_Circle &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCircle2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCircle2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeCircle2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCircle2d
StepToGeom_MakeCircle2d_swigregister = _StepToGeom.StepToGeom_MakeCircle2d_swigregister
StepToGeom_MakeCircle2d_swigregister(StepToGeom_MakeCircle2d)

def StepToGeom_MakeCircle2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Circle &
    :param CC:
    :type CC: Handle_Geom2d_Circle &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCircle2d_Convert(*args)

class StepToGeom_MakeConic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Conic &
        :param CC:
        :type CC: Handle_Geom_Conic &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeConic_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeConic_swiginit(self, _StepToGeom.new_StepToGeom_MakeConic())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeConic
StepToGeom_MakeConic_swigregister = _StepToGeom.StepToGeom_MakeConic_swigregister
StepToGeom_MakeConic_swigregister(StepToGeom_MakeConic)

def StepToGeom_MakeConic_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Conic &
    :param CC:
    :type CC: Handle_Geom_Conic &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeConic_Convert(*args)

class StepToGeom_MakeConic2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Conic &
        :param CC:
        :type CC: Handle_Geom2d_Conic &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeConic2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeConic2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeConic2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeConic2d
StepToGeom_MakeConic2d_swigregister = _StepToGeom.StepToGeom_MakeConic2d_swigregister
StepToGeom_MakeConic2d_swigregister(StepToGeom_MakeConic2d)

def StepToGeom_MakeConic2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Conic &
    :param CC:
    :type CC: Handle_Geom2d_Conic &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeConic2d_Convert(*args)

class StepToGeom_MakeConicalSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_ConicalSurface &
        :param CS:
        :type CS: Handle_Geom_ConicalSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeConicalSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeConicalSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeConicalSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeConicalSurface
StepToGeom_MakeConicalSurface_swigregister = _StepToGeom.StepToGeom_MakeConicalSurface_swigregister
StepToGeom_MakeConicalSurface_swigregister(StepToGeom_MakeConicalSurface)

def StepToGeom_MakeConicalSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_ConicalSurface &
    :param CS:
    :type CS: Handle_Geom_ConicalSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeConicalSurface_Convert(*args)

class StepToGeom_MakeCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Curve &
        :param CC:
        :type CC: Handle_Geom_Curve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCurve_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCurve_swiginit(self, _StepToGeom.new_StepToGeom_MakeCurve())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCurve
StepToGeom_MakeCurve_swigregister = _StepToGeom.StepToGeom_MakeCurve_swigregister
StepToGeom_MakeCurve_swigregister(StepToGeom_MakeCurve)

def StepToGeom_MakeCurve_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Curve &
    :param CC:
    :type CC: Handle_Geom_Curve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCurve_Convert(*args)

class StepToGeom_MakeCurve2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Curve &
        :param CC:
        :type CC: Handle_Geom2d_Curve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCurve2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCurve2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeCurve2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCurve2d
StepToGeom_MakeCurve2d_swigregister = _StepToGeom.StepToGeom_MakeCurve2d_swigregister
StepToGeom_MakeCurve2d_swigregister(StepToGeom_MakeCurve2d)

def StepToGeom_MakeCurve2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Curve &
    :param CC:
    :type CC: Handle_Geom2d_Curve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCurve2d_Convert(*args)

class StepToGeom_MakeCylindricalSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_CylindricalSurface &
        :param CS:
        :type CS: Handle_Geom_CylindricalSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeCylindricalSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeCylindricalSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeCylindricalSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeCylindricalSurface
StepToGeom_MakeCylindricalSurface_swigregister = _StepToGeom.StepToGeom_MakeCylindricalSurface_swigregister
StepToGeom_MakeCylindricalSurface_swigregister(StepToGeom_MakeCylindricalSurface)

def StepToGeom_MakeCylindricalSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_CylindricalSurface &
    :param CS:
    :type CS: Handle_Geom_CylindricalSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeCylindricalSurface_Convert(*args)

class StepToGeom_MakeDirection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SD:
        :type SD: Handle_StepGeom_Direction &
        :param CD:
        :type CD: Handle_Geom_Direction &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeDirection_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeDirection_swiginit(self, _StepToGeom.new_StepToGeom_MakeDirection())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeDirection
StepToGeom_MakeDirection_swigregister = _StepToGeom.StepToGeom_MakeDirection_swigregister
StepToGeom_MakeDirection_swigregister(StepToGeom_MakeDirection)

def StepToGeom_MakeDirection_Convert(*args):
    """
    :param SD:
    :type SD: Handle_StepGeom_Direction &
    :param CD:
    :type CD: Handle_Geom_Direction &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeDirection_Convert(*args)

class StepToGeom_MakeDirection2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SD:
        :type SD: Handle_StepGeom_Direction &
        :param CD:
        :type CD: Handle_Geom2d_Direction &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeDirection2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeDirection2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeDirection2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeDirection2d
StepToGeom_MakeDirection2d_swigregister = _StepToGeom.StepToGeom_MakeDirection2d_swigregister
StepToGeom_MakeDirection2d_swigregister(StepToGeom_MakeDirection2d)

def StepToGeom_MakeDirection2d_Convert(*args):
    """
    :param SD:
    :type SD: Handle_StepGeom_Direction &
    :param CD:
    :type CD: Handle_Geom2d_Direction &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeDirection2d_Convert(*args)

class StepToGeom_MakeElementarySurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_ElementarySurface &
        :param CS:
        :type CS: Handle_Geom_ElementarySurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeElementarySurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeElementarySurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeElementarySurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeElementarySurface
StepToGeom_MakeElementarySurface_swigregister = _StepToGeom.StepToGeom_MakeElementarySurface_swigregister
StepToGeom_MakeElementarySurface_swigregister(StepToGeom_MakeElementarySurface)

def StepToGeom_MakeElementarySurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_ElementarySurface &
    :param CS:
    :type CS: Handle_Geom_ElementarySurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeElementarySurface_Convert(*args)

class StepToGeom_MakeEllipse(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Ellipse &
        :param CC:
        :type CC: Handle_Geom_Ellipse &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeEllipse_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeEllipse_swiginit(self, _StepToGeom.new_StepToGeom_MakeEllipse())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeEllipse
StepToGeom_MakeEllipse_swigregister = _StepToGeom.StepToGeom_MakeEllipse_swigregister
StepToGeom_MakeEllipse_swigregister(StepToGeom_MakeEllipse)

def StepToGeom_MakeEllipse_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Ellipse &
    :param CC:
    :type CC: Handle_Geom_Ellipse &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeEllipse_Convert(*args)

class StepToGeom_MakeEllipse2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Ellipse &
        :param CC:
        :type CC: Handle_Geom2d_Ellipse &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeEllipse2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeEllipse2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeEllipse2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeEllipse2d
StepToGeom_MakeEllipse2d_swigregister = _StepToGeom.StepToGeom_MakeEllipse2d_swigregister
StepToGeom_MakeEllipse2d_swigregister(StepToGeom_MakeEllipse2d)

def StepToGeom_MakeEllipse2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Ellipse &
    :param CC:
    :type CC: Handle_Geom2d_Ellipse &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeEllipse2d_Convert(*args)

class StepToGeom_MakeHyperbola(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Hyperbola &
        :param CC:
        :type CC: Handle_Geom_Hyperbola &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeHyperbola_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeHyperbola_swiginit(self, _StepToGeom.new_StepToGeom_MakeHyperbola())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeHyperbola
StepToGeom_MakeHyperbola_swigregister = _StepToGeom.StepToGeom_MakeHyperbola_swigregister
StepToGeom_MakeHyperbola_swigregister(StepToGeom_MakeHyperbola)

def StepToGeom_MakeHyperbola_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Hyperbola &
    :param CC:
    :type CC: Handle_Geom_Hyperbola &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeHyperbola_Convert(*args)

class StepToGeom_MakeHyperbola2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Hyperbola &
        :param CC:
        :type CC: Handle_Geom2d_Hyperbola &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeHyperbola2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeHyperbola2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeHyperbola2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeHyperbola2d
StepToGeom_MakeHyperbola2d_swigregister = _StepToGeom.StepToGeom_MakeHyperbola2d_swigregister
StepToGeom_MakeHyperbola2d_swigregister(StepToGeom_MakeHyperbola2d)

def StepToGeom_MakeHyperbola2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Hyperbola &
    :param CC:
    :type CC: Handle_Geom2d_Hyperbola &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeHyperbola2d_Convert(*args)

class StepToGeom_MakeLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Line &
        :param CC:
        :type CC: Handle_Geom_Line &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeLine_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeLine_swiginit(self, _StepToGeom.new_StepToGeom_MakeLine())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeLine
StepToGeom_MakeLine_swigregister = _StepToGeom.StepToGeom_MakeLine_swigregister
StepToGeom_MakeLine_swigregister(StepToGeom_MakeLine)

def StepToGeom_MakeLine_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Line &
    :param CC:
    :type CC: Handle_Geom_Line &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeLine_Convert(*args)

class StepToGeom_MakeLine2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Line &
        :param CC:
        :type CC: Handle_Geom2d_Line &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeLine2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeLine2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeLine2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeLine2d
StepToGeom_MakeLine2d_swigregister = _StepToGeom.StepToGeom_MakeLine2d_swigregister
StepToGeom_MakeLine2d_swigregister(StepToGeom_MakeLine2d)

def StepToGeom_MakeLine2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Line &
    :param CC:
    :type CC: Handle_Geom2d_Line &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeLine2d_Convert(*args)

class StepToGeom_MakeParabola(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Parabola &
        :param CC:
        :type CC: Handle_Geom_Parabola &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeParabola_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeParabola_swiginit(self, _StepToGeom.new_StepToGeom_MakeParabola())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeParabola
StepToGeom_MakeParabola_swigregister = _StepToGeom.StepToGeom_MakeParabola_swigregister
StepToGeom_MakeParabola_swigregister(StepToGeom_MakeParabola)

def StepToGeom_MakeParabola_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Parabola &
    :param CC:
    :type CC: Handle_Geom_Parabola &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeParabola_Convert(*args)

class StepToGeom_MakeParabola2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_Parabola &
        :param CC:
        :type CC: Handle_Geom2d_Parabola &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeParabola2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeParabola2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeParabola2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeParabola2d
StepToGeom_MakeParabola2d_swigregister = _StepToGeom.StepToGeom_MakeParabola2d_swigregister
StepToGeom_MakeParabola2d_swigregister(StepToGeom_MakeParabola2d)

def StepToGeom_MakeParabola2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_Parabola &
    :param CC:
    :type CC: Handle_Geom2d_Parabola &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeParabola2d_Convert(*args)

class StepToGeom_MakePlane(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SP:
        :type SP: Handle_StepGeom_Plane &
        :param CP:
        :type CP: Handle_Geom_Plane &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakePlane_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakePlane_swiginit(self, _StepToGeom.new_StepToGeom_MakePlane())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakePlane
StepToGeom_MakePlane_swigregister = _StepToGeom.StepToGeom_MakePlane_swigregister
StepToGeom_MakePlane_swigregister(StepToGeom_MakePlane)

def StepToGeom_MakePlane_Convert(*args):
    """
    :param SP:
    :type SP: Handle_StepGeom_Plane &
    :param CP:
    :type CP: Handle_Geom_Plane &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakePlane_Convert(*args)

class StepToGeom_MakePolyline2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SPL:
        :type SPL: Handle_StepGeom_Polyline &
        :param CC:
        :type CC: Handle_Geom2d_BSplineCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakePolyline2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakePolyline2d_swiginit(self, _StepToGeom.new_StepToGeom_MakePolyline2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakePolyline2d
StepToGeom_MakePolyline2d_swigregister = _StepToGeom.StepToGeom_MakePolyline2d_swigregister
StepToGeom_MakePolyline2d_swigregister(StepToGeom_MakePolyline2d)

def StepToGeom_MakePolyline2d_Convert(*args):
    """
    :param SPL:
    :type SPL: Handle_StepGeom_Polyline &
    :param CC:
    :type CC: Handle_Geom2d_BSplineCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakePolyline2d_Convert(*args)

class StepToGeom_MakeRectangularTrimmedSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_RectangularTrimmedSurface &
        :param CS:
        :type CS: Handle_Geom_RectangularTrimmedSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeRectangularTrimmedSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeRectangularTrimmedSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeRectangularTrimmedSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeRectangularTrimmedSurface
StepToGeom_MakeRectangularTrimmedSurface_swigregister = _StepToGeom.StepToGeom_MakeRectangularTrimmedSurface_swigregister
StepToGeom_MakeRectangularTrimmedSurface_swigregister(StepToGeom_MakeRectangularTrimmedSurface)

def StepToGeom_MakeRectangularTrimmedSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_RectangularTrimmedSurface &
    :param CS:
    :type CS: Handle_Geom_RectangularTrimmedSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeRectangularTrimmedSurface_Convert(*args)

class StepToGeom_MakeSphericalSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param Surf:
        :type Surf: Handle_StepGeom_SphericalSurface &
        :param CS:
        :type CS: Handle_Geom_SphericalSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeSphericalSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeSphericalSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeSphericalSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeSphericalSurface
StepToGeom_MakeSphericalSurface_swigregister = _StepToGeom.StepToGeom_MakeSphericalSurface_swigregister
StepToGeom_MakeSphericalSurface_swigregister(StepToGeom_MakeSphericalSurface)

def StepToGeom_MakeSphericalSurface_Convert(*args):
    """
    :param Surf:
    :type Surf: Handle_StepGeom_SphericalSurface &
    :param CS:
    :type CS: Handle_Geom_SphericalSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeSphericalSurface_Convert(*args)

class StepToGeom_MakeSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_Surface &
        :param CS:
        :type CS: Handle_Geom_Surface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeSurface
StepToGeom_MakeSurface_swigregister = _StepToGeom.StepToGeom_MakeSurface_swigregister
StepToGeom_MakeSurface_swigregister(StepToGeom_MakeSurface)

def StepToGeom_MakeSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_Surface &
    :param CS:
    :type CS: Handle_Geom_Surface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeSurface_Convert(*args)

class StepToGeom_MakeSurfaceOfLinearExtrusion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_SurfaceOfLinearExtrusion &
        :param CS:
        :type CS: Handle_Geom_SurfaceOfLinearExtrusion &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeSurfaceOfLinearExtrusion_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeSurfaceOfLinearExtrusion_swiginit(self, _StepToGeom.new_StepToGeom_MakeSurfaceOfLinearExtrusion())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeSurfaceOfLinearExtrusion
StepToGeom_MakeSurfaceOfLinearExtrusion_swigregister = _StepToGeom.StepToGeom_MakeSurfaceOfLinearExtrusion_swigregister
StepToGeom_MakeSurfaceOfLinearExtrusion_swigregister(StepToGeom_MakeSurfaceOfLinearExtrusion)

def StepToGeom_MakeSurfaceOfLinearExtrusion_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_SurfaceOfLinearExtrusion &
    :param CS:
    :type CS: Handle_Geom_SurfaceOfLinearExtrusion &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeSurfaceOfLinearExtrusion_Convert(*args)

class StepToGeom_MakeSurfaceOfRevolution(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_SurfaceOfRevolution &
        :param CS:
        :type CS: Handle_Geom_SurfaceOfRevolution &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeSurfaceOfRevolution_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeSurfaceOfRevolution_swiginit(self, _StepToGeom.new_StepToGeom_MakeSurfaceOfRevolution())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeSurfaceOfRevolution
StepToGeom_MakeSurfaceOfRevolution_swigregister = _StepToGeom.StepToGeom_MakeSurfaceOfRevolution_swigregister
StepToGeom_MakeSurfaceOfRevolution_swigregister(StepToGeom_MakeSurfaceOfRevolution)

def StepToGeom_MakeSurfaceOfRevolution_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_SurfaceOfRevolution &
    :param CS:
    :type CS: Handle_Geom_SurfaceOfRevolution &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeSurfaceOfRevolution_Convert(*args)

class StepToGeom_MakeSweptSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_SweptSurface &
        :param CS:
        :type CS: Handle_Geom_SweptSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeSweptSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeSweptSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeSweptSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeSweptSurface
StepToGeom_MakeSweptSurface_swigregister = _StepToGeom.StepToGeom_MakeSweptSurface_swigregister
StepToGeom_MakeSweptSurface_swigregister(StepToGeom_MakeSweptSurface)

def StepToGeom_MakeSweptSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_SweptSurface &
    :param CS:
    :type CS: Handle_Geom_SweptSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeSweptSurface_Convert(*args)

class StepToGeom_MakeToroidalSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SS:
        :type SS: Handle_StepGeom_ToroidalSurface &
        :param CS:
        :type CS: Handle_Geom_ToroidalSurface &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeToroidalSurface_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeToroidalSurface_swiginit(self, _StepToGeom.new_StepToGeom_MakeToroidalSurface())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeToroidalSurface
StepToGeom_MakeToroidalSurface_swigregister = _StepToGeom.StepToGeom_MakeToroidalSurface_swigregister
StepToGeom_MakeToroidalSurface_swigregister(StepToGeom_MakeToroidalSurface)

def StepToGeom_MakeToroidalSurface_Convert(*args):
    """
    :param SS:
    :type SS: Handle_StepGeom_ToroidalSurface &
    :param CS:
    :type CS: Handle_Geom_ToroidalSurface &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeToroidalSurface_Convert(*args)

class StepToGeom_MakeTransformation2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SCTO:
        :type SCTO: Handle_StepGeom_CartesianTransformationOperator2d &
        :param CT:
        :type CT: gp_Trsf2d
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeTransformation2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeTransformation2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeTransformation2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeTransformation2d
StepToGeom_MakeTransformation2d_swigregister = _StepToGeom.StepToGeom_MakeTransformation2d_swigregister
StepToGeom_MakeTransformation2d_swigregister(StepToGeom_MakeTransformation2d)

def StepToGeom_MakeTransformation2d_Convert(*args):
    """
    :param SCTO:
    :type SCTO: Handle_StepGeom_CartesianTransformationOperator2d &
    :param CT:
    :type CT: gp_Trsf2d
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeTransformation2d_Convert(*args)

class StepToGeom_MakeTransformation3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SCTO:
        :type SCTO: Handle_StepGeom_CartesianTransformationOperator3d &
        :param CT:
        :type CT: gp_Trsf
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeTransformation3d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeTransformation3d_swiginit(self, _StepToGeom.new_StepToGeom_MakeTransformation3d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeTransformation3d
StepToGeom_MakeTransformation3d_swigregister = _StepToGeom.StepToGeom_MakeTransformation3d_swigregister
StepToGeom_MakeTransformation3d_swigregister(StepToGeom_MakeTransformation3d)

def StepToGeom_MakeTransformation3d_Convert(*args):
    """
    :param SCTO:
    :type SCTO: Handle_StepGeom_CartesianTransformationOperator3d &
    :param CT:
    :type CT: gp_Trsf
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeTransformation3d_Convert(*args)

class StepToGeom_MakeTrimmedCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_TrimmedCurve &
        :param CC:
        :type CC: Handle_Geom_TrimmedCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeTrimmedCurve_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeTrimmedCurve_swiginit(self, _StepToGeom.new_StepToGeom_MakeTrimmedCurve())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeTrimmedCurve
StepToGeom_MakeTrimmedCurve_swigregister = _StepToGeom.StepToGeom_MakeTrimmedCurve_swigregister
StepToGeom_MakeTrimmedCurve_swigregister(StepToGeom_MakeTrimmedCurve)

def StepToGeom_MakeTrimmedCurve_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_TrimmedCurve &
    :param CC:
    :type CC: Handle_Geom_TrimmedCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeTrimmedCurve_Convert(*args)

class StepToGeom_MakeTrimmedCurve2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_TrimmedCurve &
        :param CC:
        :type CC: Handle_Geom2d_BSplineCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeTrimmedCurve2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeTrimmedCurve2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeTrimmedCurve2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeTrimmedCurve2d
StepToGeom_MakeTrimmedCurve2d_swigregister = _StepToGeom.StepToGeom_MakeTrimmedCurve2d_swigregister
StepToGeom_MakeTrimmedCurve2d_swigregister(StepToGeom_MakeTrimmedCurve2d)

def StepToGeom_MakeTrimmedCurve2d_Convert(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_TrimmedCurve &
    :param CC:
    :type CC: Handle_Geom2d_BSplineCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeTrimmedCurve2d_Convert(*args)

class StepToGeom_MakeVectorWithMagnitude(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SV:
        :type SV: Handle_StepGeom_Vector &
        :param CV:
        :type CV: Handle_Geom_VectorWithMagnitude &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeVectorWithMagnitude_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeVectorWithMagnitude_swiginit(self, _StepToGeom.new_StepToGeom_MakeVectorWithMagnitude())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeVectorWithMagnitude
StepToGeom_MakeVectorWithMagnitude_swigregister = _StepToGeom.StepToGeom_MakeVectorWithMagnitude_swigregister
StepToGeom_MakeVectorWithMagnitude_swigregister(StepToGeom_MakeVectorWithMagnitude)

def StepToGeom_MakeVectorWithMagnitude_Convert(*args):
    """
    :param SV:
    :type SV: Handle_StepGeom_Vector &
    :param CV:
    :type CV: Handle_Geom_VectorWithMagnitude &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeVectorWithMagnitude_Convert(*args)

class StepToGeom_MakeVectorWithMagnitude2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SV:
        :type SV: Handle_StepGeom_Vector &
        :param CV:
        :type CV: Handle_Geom2d_VectorWithMagnitude &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakeVectorWithMagnitude2d_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakeVectorWithMagnitude2d_swiginit(self, _StepToGeom.new_StepToGeom_MakeVectorWithMagnitude2d())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakeVectorWithMagnitude2d
StepToGeom_MakeVectorWithMagnitude2d_swigregister = _StepToGeom.StepToGeom_MakeVectorWithMagnitude2d_swigregister
StepToGeom_MakeVectorWithMagnitude2d_swigregister(StepToGeom_MakeVectorWithMagnitude2d)

def StepToGeom_MakeVectorWithMagnitude2d_Convert(*args):
    """
    :param SV:
    :type SV: Handle_StepGeom_Vector &
    :param CV:
    :type CV: Handle_Geom2d_VectorWithMagnitude &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakeVectorWithMagnitude2d_Convert(*args)

class StepToGeom_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_Root_IsDone(self, *args)


    def __init__(self):
        _StepToGeom.StepToGeom_Root_swiginit(self, _StepToGeom.new_StepToGeom_Root())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_Root
StepToGeom_Root.IsDone = new_instancemethod(_StepToGeom.StepToGeom_Root_IsDone, None, StepToGeom_Root)
StepToGeom_Root_swigregister = _StepToGeom.StepToGeom_Root_swigregister
StepToGeom_Root_swigregister(StepToGeom_Root)

class StepToGeom_MakePolyline(StepToGeom_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args):
        """
        :param SPL:
        :type SPL: Handle_StepGeom_Polyline &
        :param CC:
        :type CC: Handle_Geom_BSplineCurve &
        :rtype: bool

        """
        return _StepToGeom.StepToGeom_MakePolyline_Convert(*args)

    Convert = staticmethod(Convert)

    def __init__(self):
        _StepToGeom.StepToGeom_MakePolyline_swiginit(self, _StepToGeom.new_StepToGeom_MakePolyline())
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_MakePolyline
StepToGeom_MakePolyline_swigregister = _StepToGeom.StepToGeom_MakePolyline_swigregister
StepToGeom_MakePolyline_swigregister(StepToGeom_MakePolyline)

def StepToGeom_MakePolyline_Convert(*args):
    """
    :param SPL:
    :type SPL: Handle_StepGeom_Polyline &
    :param CC:
    :type CC: Handle_Geom_BSplineCurve &
    :rtype: bool

    """
    return _StepToGeom.StepToGeom_MakePolyline_Convert(*args)



