# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepToTopoDS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepToTopoDS', [dirname(__file__)])
        except ImportError:
            import _StepToTopoDS
            return _StepToTopoDS
        if fp is not None:
            try:
                _mod = imp.load_module('_StepToTopoDS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StepToTopoDS = swig_import_helper()
    del swig_import_helper
else:
    import _StepToTopoDS
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToTopoDS.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepToTopoDS.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepToTopoDS.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepToTopoDS.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepToTopoDS.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepToTopoDS.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepToTopoDS.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepToTopoDS.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepToTopoDS.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepToTopoDS.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepToTopoDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TCollection
import OCC.Standard
import OCC.MMgt
import OCC.StepGeom
import OCC.StepRepr
import OCC.StepBasic
import OCC.TColStd
import OCC.Interface
import OCC.Message
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.StepShape
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.Geom2d

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass


_StepToTopoDS.StepToTopoDS_BuilderDone_swigconstant(_StepToTopoDS)
StepToTopoDS_BuilderDone = _StepToTopoDS.StepToTopoDS_BuilderDone

_StepToTopoDS.StepToTopoDS_BuilderOther_swigconstant(_StepToTopoDS)
StepToTopoDS_BuilderOther = _StepToTopoDS.StepToTopoDS_BuilderOther

_StepToTopoDS.StepToTopoDS_GeometricToolDone_swigconstant(_StepToTopoDS)
StepToTopoDS_GeometricToolDone = _StepToTopoDS.StepToTopoDS_GeometricToolDone

_StepToTopoDS.StepToTopoDS_GeometricToolIsDegenerated_swigconstant(_StepToTopoDS)
StepToTopoDS_GeometricToolIsDegenerated = _StepToTopoDS.StepToTopoDS_GeometricToolIsDegenerated

_StepToTopoDS.StepToTopoDS_GeometricToolHasNoPCurve_swigconstant(_StepToTopoDS)
StepToTopoDS_GeometricToolHasNoPCurve = _StepToTopoDS.StepToTopoDS_GeometricToolHasNoPCurve

_StepToTopoDS.StepToTopoDS_GeometricToolWrong3dParameters_swigconstant(_StepToTopoDS)
StepToTopoDS_GeometricToolWrong3dParameters = _StepToTopoDS.StepToTopoDS_GeometricToolWrong3dParameters

_StepToTopoDS.StepToTopoDS_GeometricToolNoProjectiOnCurve_swigconstant(_StepToTopoDS)
StepToTopoDS_GeometricToolNoProjectiOnCurve = _StepToTopoDS.StepToTopoDS_GeometricToolNoProjectiOnCurve

_StepToTopoDS.StepToTopoDS_GeometricToolOther_swigconstant(_StepToTopoDS)
StepToTopoDS_GeometricToolOther = _StepToTopoDS.StepToTopoDS_GeometricToolOther

_StepToTopoDS.StepToTopoDS_TranslateEdgeDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateEdgeDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeDone

_StepToTopoDS.StepToTopoDS_TranslateEdgeOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateEdgeOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeOther

_StepToTopoDS.StepToTopoDS_TranslateEdgeLoopDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateEdgeLoopDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopDone

_StepToTopoDS.StepToTopoDS_TranslateEdgeLoopOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateEdgeLoopOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopOther

_StepToTopoDS.StepToTopoDS_TranslateFaceDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateFaceDone = _StepToTopoDS.StepToTopoDS_TranslateFaceDone

_StepToTopoDS.StepToTopoDS_TranslateFaceOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateFaceOther = _StepToTopoDS.StepToTopoDS_TranslateFaceOther

_StepToTopoDS.StepToTopoDS_TranslatePolyLoopDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslatePolyLoopDone = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopDone

_StepToTopoDS.StepToTopoDS_TranslatePolyLoopOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslatePolyLoopOther = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopOther

_StepToTopoDS.StepToTopoDS_TranslateShellDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateShellDone = _StepToTopoDS.StepToTopoDS_TranslateShellDone

_StepToTopoDS.StepToTopoDS_TranslateShellOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateShellOther = _StepToTopoDS.StepToTopoDS_TranslateShellOther

_StepToTopoDS.StepToTopoDS_TranslateVertexDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateVertexDone = _StepToTopoDS.StepToTopoDS_TranslateVertexDone

_StepToTopoDS.StepToTopoDS_TranslateVertexOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateVertexOther = _StepToTopoDS.StepToTopoDS_TranslateVertexOther

_StepToTopoDS.StepToTopoDS_TranslateVertexLoopDone_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateVertexLoopDone = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopDone

_StepToTopoDS.StepToTopoDS_TranslateVertexLoopOther_swigconstant(_StepToTopoDS)
StepToTopoDS_TranslateVertexLoopOther = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopOther
class steptotopods(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecodeBuilderError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_BuilderError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodeBuilderError(*args)

    DecodeBuilderError = staticmethod(DecodeBuilderError)

    def DecodeShellError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_TranslateShellError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodeShellError(*args)

    DecodeShellError = staticmethod(DecodeShellError)

    def DecodeFaceError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_TranslateFaceError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodeFaceError(*args)

    DecodeFaceError = staticmethod(DecodeFaceError)

    def DecodeEdgeError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_TranslateEdgeError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodeEdgeError(*args)

    DecodeEdgeError = staticmethod(DecodeEdgeError)

    def DecodeVertexError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_TranslateVertexError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodeVertexError(*args)

    DecodeVertexError = staticmethod(DecodeVertexError)

    def DecodeVertexLoopError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_TranslateVertexLoopError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodeVertexLoopError(*args)

    DecodeVertexLoopError = staticmethod(DecodeVertexLoopError)

    def DecodePolyLoopError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_TranslatePolyLoopError
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepToTopoDS.steptotopods_DecodePolyLoopError(*args)

    DecodePolyLoopError = staticmethod(DecodePolyLoopError)

    def DecodeGeometricToolError(*args):
        """
        :param Error:
        :type Error: StepToTopoDS_GeometricToolError
        :rtype: char *

        """
        return _StepToTopoDS.steptotopods_DecodeGeometricToolError(*args)

    DecodeGeometricToolError = staticmethod(DecodeGeometricToolError)

    def __init__(self):
        _StepToTopoDS.steptotopods_swiginit(self, _StepToTopoDS.new_steptotopods())
    __swig_destroy__ = _StepToTopoDS.delete_steptotopods
steptotopods_swigregister = _StepToTopoDS.steptotopods_swigregister
steptotopods_swigregister(steptotopods)

def steptotopods_DecodeBuilderError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_BuilderError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodeBuilderError(*args)

def steptotopods_DecodeShellError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_TranslateShellError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodeShellError(*args)

def steptotopods_DecodeFaceError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_TranslateFaceError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodeFaceError(*args)

def steptotopods_DecodeEdgeError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_TranslateEdgeError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodeEdgeError(*args)

def steptotopods_DecodeVertexError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_TranslateVertexError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodeVertexError(*args)

def steptotopods_DecodeVertexLoopError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_TranslateVertexLoopError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodeVertexLoopError(*args)

def steptotopods_DecodePolyLoopError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_TranslatePolyLoopError
    :rtype: Handle_TCollection_HAsciiString

    """
    return _StepToTopoDS.steptotopods_DecodePolyLoopError(*args)

def steptotopods_DecodeGeometricToolError(*args):
    """
    :param Error:
    :type Error: StepToTopoDS_GeometricToolError
    :rtype: char *

    """
    return _StepToTopoDS.steptotopods_DecodeGeometricToolError(*args)

class StepToTopoDS_CartesianPointHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        * Returns a HasCode value for the CartesianPoint

        :param K:
        :type K: Handle_StepGeom_CartesianPoint &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        * Returns True when the two CartesianPoint are the same

        :param K1:
        :type K1: Handle_StepGeom_CartesianPoint &
        :param K2:
        :type K2: Handle_StepGeom_CartesianPoint &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _StepToTopoDS.StepToTopoDS_CartesianPointHasher_swiginit(self, _StepToTopoDS.new_StepToTopoDS_CartesianPointHasher())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_CartesianPointHasher
StepToTopoDS_CartesianPointHasher_swigregister = _StepToTopoDS.StepToTopoDS_CartesianPointHasher_swigregister
StepToTopoDS_CartesianPointHasher_swigregister(StepToTopoDS_CartesianPointHasher)

def StepToTopoDS_CartesianPointHasher_HashCode(*args):
    """
    * Returns a HasCode value for the CartesianPoint

    :param K:
    :type K: Handle_StepGeom_CartesianPoint &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode(*args)

def StepToTopoDS_CartesianPointHasher_IsEqual(*args):
    """
    * Returns True when the two CartesianPoint are the same

    :param K1:
    :type K1: Handle_StepGeom_CartesianPoint &
    :param K2:
    :type K2: Handle_StepGeom_CartesianPoint &
    :rtype: bool

    """
    return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual(*args)

class StepToTopoDS_DataMapIteratorOfDataMapOfRI(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: StepToTopoDS_DataMapOfRI &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapIteratorOfDataMapOfRI(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: StepToTopoDS_DataMapOfRI &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_StepRepr_RepresentationItem

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_Value(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapIteratorOfDataMapOfRI
StepToTopoDS_DataMapIteratorOfDataMapOfRI.Initialize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_Initialize, None, StepToTopoDS_DataMapIteratorOfDataMapOfRI)
StepToTopoDS_DataMapIteratorOfDataMapOfRI.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_Key, None, StepToTopoDS_DataMapIteratorOfDataMapOfRI)
StepToTopoDS_DataMapIteratorOfDataMapOfRI.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_Value, None, StepToTopoDS_DataMapIteratorOfDataMapOfRI)
StepToTopoDS_DataMapIteratorOfDataMapOfRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRI_swigregister
StepToTopoDS_DataMapIteratorOfDataMapOfRI_swigregister(StepToTopoDS_DataMapIteratorOfDataMapOfRI)

class StepToTopoDS_DataMapIteratorOfDataMapOfRINames(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: StepToTopoDS_DataMapOfRINames &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapIteratorOfDataMapOfRINames(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: StepToTopoDS_DataMapOfRINames &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_Value(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapIteratorOfDataMapOfRINames
StepToTopoDS_DataMapIteratorOfDataMapOfRINames.Initialize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_Initialize, None, StepToTopoDS_DataMapIteratorOfDataMapOfRINames)
StepToTopoDS_DataMapIteratorOfDataMapOfRINames.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_Key, None, StepToTopoDS_DataMapIteratorOfDataMapOfRINames)
StepToTopoDS_DataMapIteratorOfDataMapOfRINames.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_Value, None, StepToTopoDS_DataMapIteratorOfDataMapOfRINames)
StepToTopoDS_DataMapIteratorOfDataMapOfRINames_swigregister = _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfRINames_swigregister
StepToTopoDS_DataMapIteratorOfDataMapOfRINames_swigregister(StepToTopoDS_DataMapIteratorOfDataMapOfRINames)

class StepToTopoDS_DataMapIteratorOfDataMapOfTRI(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: StepToTopoDS_DataMapOfTRI &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapIteratorOfDataMapOfTRI(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: StepToTopoDS_DataMapOfTRI &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_StepShape_TopologicalRepresentationItem

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_Value(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapIteratorOfDataMapOfTRI
StepToTopoDS_DataMapIteratorOfDataMapOfTRI.Initialize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_Initialize, None, StepToTopoDS_DataMapIteratorOfDataMapOfTRI)
StepToTopoDS_DataMapIteratorOfDataMapOfTRI.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_Key, None, StepToTopoDS_DataMapIteratorOfDataMapOfTRI)
StepToTopoDS_DataMapIteratorOfDataMapOfTRI.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_Value, None, StepToTopoDS_DataMapIteratorOfDataMapOfTRI)
StepToTopoDS_DataMapIteratorOfDataMapOfTRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapIteratorOfDataMapOfTRI_swigregister
StepToTopoDS_DataMapIteratorOfDataMapOfTRI_swigregister(StepToTopoDS_DataMapIteratorOfDataMapOfTRI)

class StepToTopoDS_DataMapIteratorOfPointEdgeMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: StepToTopoDS_PointEdgeMap &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapIteratorOfPointEdgeMap(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: StepToTopoDS_PointEdgeMap &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: StepToTopoDS_PointPair

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_Value(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapIteratorOfPointEdgeMap
StepToTopoDS_DataMapIteratorOfPointEdgeMap.Initialize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_Initialize, None, StepToTopoDS_DataMapIteratorOfPointEdgeMap)
StepToTopoDS_DataMapIteratorOfPointEdgeMap.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_Key, None, StepToTopoDS_DataMapIteratorOfPointEdgeMap)
StepToTopoDS_DataMapIteratorOfPointEdgeMap.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_Value, None, StepToTopoDS_DataMapIteratorOfPointEdgeMap)
StepToTopoDS_DataMapIteratorOfPointEdgeMap_swigregister = _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointEdgeMap_swigregister
StepToTopoDS_DataMapIteratorOfPointEdgeMap_swigregister(StepToTopoDS_DataMapIteratorOfPointEdgeMap)

class StepToTopoDS_DataMapIteratorOfPointVertexMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: StepToTopoDS_PointVertexMap &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapIteratorOfPointVertexMap(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: StepToTopoDS_PointVertexMap &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_Value(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapIteratorOfPointVertexMap
StepToTopoDS_DataMapIteratorOfPointVertexMap.Initialize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_Initialize, None, StepToTopoDS_DataMapIteratorOfPointVertexMap)
StepToTopoDS_DataMapIteratorOfPointVertexMap.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_Key, None, StepToTopoDS_DataMapIteratorOfPointVertexMap)
StepToTopoDS_DataMapIteratorOfPointVertexMap.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_Value, None, StepToTopoDS_DataMapIteratorOfPointVertexMap)
StepToTopoDS_DataMapIteratorOfPointVertexMap_swigregister = _StepToTopoDS.StepToTopoDS_DataMapIteratorOfPointVertexMap_swigregister
StepToTopoDS_DataMapIteratorOfPointVertexMap_swigregister(StepToTopoDS_DataMapIteratorOfPointVertexMap)

class StepToTopoDS_DataMapNodeOfDataMapOfRI(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_StepRepr_RepresentationItem &
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapNodeOfDataMapOfRI(*args))

    def Key(self, *args):
        """
        :rtype: Handle_StepRepr_RepresentationItem

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRI_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRI_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapNodeOfDataMapOfRI
StepToTopoDS_DataMapNodeOfDataMapOfRI.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRI_Key, None, StepToTopoDS_DataMapNodeOfDataMapOfRI)
StepToTopoDS_DataMapNodeOfDataMapOfRI.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRI_Value, None, StepToTopoDS_DataMapNodeOfDataMapOfRI)
StepToTopoDS_DataMapNodeOfDataMapOfRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRI_swigregister
StepToTopoDS_DataMapNodeOfDataMapOfRI_swigregister(StepToTopoDS_DataMapNodeOfDataMapOfRI)

class Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_swiginit(self, _StepToTopoDS.new_Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_DownCast)
    __swig_destroy__ = _StepToTopoDS.delete_Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI.Nullify = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_Nullify, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI.IsNull = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_IsNull, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI.GetObject = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_GetObject, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_swigregister = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_swigregister
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_swigregister(Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI)

def Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_DownCast(AnObject):
    return _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_DownCast(AnObject)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_DownCast = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRI_DownCast

class StepToTopoDS_DataMapNodeOfDataMapOfRINames(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRINames_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapNodeOfDataMapOfRINames(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRINames_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRINames_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapNodeOfDataMapOfRINames
StepToTopoDS_DataMapNodeOfDataMapOfRINames.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRINames_Key, None, StepToTopoDS_DataMapNodeOfDataMapOfRINames)
StepToTopoDS_DataMapNodeOfDataMapOfRINames.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRINames_Value, None, StepToTopoDS_DataMapNodeOfDataMapOfRINames)
StepToTopoDS_DataMapNodeOfDataMapOfRINames_swigregister = _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfRINames_swigregister
StepToTopoDS_DataMapNodeOfDataMapOfRINames_swigregister(StepToTopoDS_DataMapNodeOfDataMapOfRINames)

class Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_swiginit(self, _StepToTopoDS.new_Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_DownCast)
    __swig_destroy__ = _StepToTopoDS.delete_Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames.Nullify = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_Nullify, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames.IsNull = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_IsNull, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames.GetObject = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_GetObject, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_swigregister = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_swigregister
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_swigregister(Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames)

def Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_DownCast(AnObject):
    return _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_DownCast(AnObject)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_DownCast = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfRINames_DownCast

class StepToTopoDS_DataMapNodeOfDataMapOfTRI(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_StepShape_TopologicalRepresentationItem &
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfTRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapNodeOfDataMapOfTRI(*args))

    def Key(self, *args):
        """
        :rtype: Handle_StepShape_TopologicalRepresentationItem

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfTRI_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfTRI_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapNodeOfDataMapOfTRI
StepToTopoDS_DataMapNodeOfDataMapOfTRI.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfTRI_Key, None, StepToTopoDS_DataMapNodeOfDataMapOfTRI)
StepToTopoDS_DataMapNodeOfDataMapOfTRI.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfTRI_Value, None, StepToTopoDS_DataMapNodeOfDataMapOfTRI)
StepToTopoDS_DataMapNodeOfDataMapOfTRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapNodeOfDataMapOfTRI_swigregister
StepToTopoDS_DataMapNodeOfDataMapOfTRI_swigregister(StepToTopoDS_DataMapNodeOfDataMapOfTRI)

class Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_swiginit(self, _StepToTopoDS.new_Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_DownCast)
    __swig_destroy__ = _StepToTopoDS.delete_Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI
Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI.Nullify = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_Nullify, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI.IsNull = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_IsNull, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI.GetObject = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_GetObject, None, Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_swigregister = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_swigregister
Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_swigregister(Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI)

def Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_DownCast(AnObject):
    return _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_DownCast(AnObject)
Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_DownCast = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfDataMapOfTRI_DownCast

class StepToTopoDS_DataMapNodeOfPointEdgeMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: StepToTopoDS_PointPair &
        :param I:
        :type I: TopoDS_Edge &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointEdgeMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapNodeOfPointEdgeMap(*args))

    def Key(self, *args):
        """
        :rtype: StepToTopoDS_PointPair

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointEdgeMap_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointEdgeMap_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapNodeOfPointEdgeMap
StepToTopoDS_DataMapNodeOfPointEdgeMap.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfPointEdgeMap_Key, None, StepToTopoDS_DataMapNodeOfPointEdgeMap)
StepToTopoDS_DataMapNodeOfPointEdgeMap.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfPointEdgeMap_Value, None, StepToTopoDS_DataMapNodeOfPointEdgeMap)
StepToTopoDS_DataMapNodeOfPointEdgeMap_swigregister = _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointEdgeMap_swigregister
StepToTopoDS_DataMapNodeOfPointEdgeMap_swigregister(StepToTopoDS_DataMapNodeOfPointEdgeMap)

class Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_swiginit(self, _StepToTopoDS.new_Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_DownCast)
    __swig_destroy__ = _StepToTopoDS.delete_Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap
Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap.Nullify = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_Nullify, None, Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap)
Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap.IsNull = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_IsNull, None, Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap)
Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap.GetObject = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_GetObject, None, Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap)
Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_swigregister = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_swigregister
Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_swigregister(Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap)

def Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_DownCast(AnObject):
    return _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_DownCast(AnObject)
Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_DownCast = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointEdgeMap_DownCast

class StepToTopoDS_DataMapNodeOfPointVertexMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_StepGeom_CartesianPoint &
        :param I:
        :type I: TopoDS_Vertex &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointVertexMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapNodeOfPointVertexMap(*args))

    def Key(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointVertexMap_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointVertexMap_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepToTopoDS_DataMapNodeOfPointVertexMap(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapNodeOfPointVertexMap
StepToTopoDS_DataMapNodeOfPointVertexMap.Key = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfPointVertexMap_Key, None, StepToTopoDS_DataMapNodeOfPointVertexMap)
StepToTopoDS_DataMapNodeOfPointVertexMap.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapNodeOfPointVertexMap_Value, None, StepToTopoDS_DataMapNodeOfPointVertexMap)
StepToTopoDS_DataMapNodeOfPointVertexMap_swigregister = _StepToTopoDS.StepToTopoDS_DataMapNodeOfPointVertexMap_swigregister
StepToTopoDS_DataMapNodeOfPointVertexMap_swigregister(StepToTopoDS_DataMapNodeOfPointVertexMap)

class Handle_StepToTopoDS_DataMapNodeOfPointVertexMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_swiginit(self, _StepToTopoDS.new_Handle_StepToTopoDS_DataMapNodeOfPointVertexMap(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_DownCast)
    __swig_destroy__ = _StepToTopoDS.delete_Handle_StepToTopoDS_DataMapNodeOfPointVertexMap
Handle_StepToTopoDS_DataMapNodeOfPointVertexMap.Nullify = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_Nullify, None, Handle_StepToTopoDS_DataMapNodeOfPointVertexMap)
Handle_StepToTopoDS_DataMapNodeOfPointVertexMap.IsNull = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_IsNull, None, Handle_StepToTopoDS_DataMapNodeOfPointVertexMap)
Handle_StepToTopoDS_DataMapNodeOfPointVertexMap.GetObject = new_instancemethod(_StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_GetObject, None, Handle_StepToTopoDS_DataMapNodeOfPointVertexMap)
Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_swigregister = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_swigregister
Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_swigregister(Handle_StepToTopoDS_DataMapNodeOfPointVertexMap)

def Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_DownCast(AnObject):
    return _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_DownCast(AnObject)
Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_DownCast = _StepToTopoDS.Handle_StepToTopoDS_DataMapNodeOfPointVertexMap_DownCast

class StepToTopoDS_GeometricTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def PCurve(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_SurfaceCurve &
        :param S:
        :type S: Handle_StepGeom_Surface &
        :param PC:
        :type PC: Handle_StepGeom_Pcurve &
        :param last: default value is 0
        :type last: int
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve(*args)

    PCurve = staticmethod(PCurve)

    def IsSeamCurve(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_SurfaceCurve &
        :param S:
        :type S: Handle_StepGeom_Surface &
        :param E:
        :type E: Handle_StepShape_Edge &
        :param EL:
        :type EL: Handle_StepShape_EdgeLoop &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve(*args)

    IsSeamCurve = staticmethod(IsSeamCurve)

    def IsLikeSeam(*args):
        """
        :param SC:
        :type SC: Handle_StepGeom_SurfaceCurve &
        :param S:
        :type S: Handle_StepGeom_Surface &
        :param E:
        :type E: Handle_StepShape_Edge &
        :param EL:
        :type EL: Handle_StepShape_EdgeLoop &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam(*args)

    IsLikeSeam = staticmethod(IsLikeSeam)

    def UpdateParam3d(*args):
        """
        :param C:
        :type C: Handle_Geom_Curve &
        :param w1:
        :type w1: float &
        :param w2:
        :type w2: float &
        :param preci:
        :type preci: float
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d(*args)

    UpdateParam3d = staticmethod(UpdateParam3d)

    def __init__(self):
        _StepToTopoDS.StepToTopoDS_GeometricTool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_GeometricTool())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_GeometricTool
StepToTopoDS_GeometricTool_swigregister = _StepToTopoDS.StepToTopoDS_GeometricTool_swigregister
StepToTopoDS_GeometricTool_swigregister(StepToTopoDS_GeometricTool)

def StepToTopoDS_GeometricTool_PCurve(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_SurfaceCurve &
    :param S:
    :type S: Handle_StepGeom_Surface &
    :param PC:
    :type PC: Handle_StepGeom_Pcurve &
    :param last: default value is 0
    :type last: int
    :rtype: int

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve(*args)

def StepToTopoDS_GeometricTool_IsSeamCurve(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_SurfaceCurve &
    :param S:
    :type S: Handle_StepGeom_Surface &
    :param E:
    :type E: Handle_StepShape_Edge &
    :param EL:
    :type EL: Handle_StepShape_EdgeLoop &
    :rtype: bool

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve(*args)

def StepToTopoDS_GeometricTool_IsLikeSeam(*args):
    """
    :param SC:
    :type SC: Handle_StepGeom_SurfaceCurve &
    :param S:
    :type S: Handle_StepGeom_Surface &
    :param E:
    :type E: Handle_StepShape_Edge &
    :param EL:
    :type EL: Handle_StepShape_EdgeLoop &
    :rtype: bool

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam(*args)

def StepToTopoDS_GeometricTool_UpdateParam3d(*args):
    """
    :param C:
    :type C: Handle_Geom_Curve &
    :param w1:
    :type w1: float &
    :param w2:
    :type w2: float &
    :param preci:
    :type preci: float
    :rtype: bool

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d(*args)

class StepToTopoDS_NMTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param MapOfRI:
        :type MapOfRI: StepToTopoDS_DataMapOfRI &
        :param MapOfRINames:
        :type MapOfRINames: StepToTopoDS_DataMapOfRINames &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_NMTool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_NMTool(*args))

    def Init(self, *args):
        """
        :param MapOfRI:
        :type MapOfRI: StepToTopoDS_DataMapOfRI &
        :param MapOfRINames:
        :type MapOfRINames: StepToTopoDS_DataMapOfRINames &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Init(self, *args)


    def SetActive(self, *args):
        """
        :param isActive:
        :type isActive: bool
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_SetActive(self, *args)


    def IsActive(self, *args):
        """
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsActive(self, *args)


    def CleanUp(self, *args):
        """
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_CleanUp(self, *args)


    def IsBound(self, *args):
        """
        :param RI:
        :type RI: Handle_StepRepr_RepresentationItem &
        :rtype: bool

        :param RIName:
        :type RIName: TCollection_AsciiString &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsBound(self, *args)


    def Bind(self, *args):
        """
        :param RI:
        :type RI: Handle_StepRepr_RepresentationItem &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        :param RIName:
        :type RIName: TCollection_AsciiString &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Bind(self, *args)


    def Find(self, *args):
        """
        :param RI:
        :type RI: Handle_StepRepr_RepresentationItem &
        :rtype: TopoDS_Shape

        :param RIName:
        :type RIName: TCollection_AsciiString &
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Find(self, *args)


    def RegisterNMEdge(self, *args):
        """
        :param Edge:
        :type Edge: TopoDS_Shape &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_RegisterNMEdge(self, *args)


    def IsSuspectedAsClosing(self, *args):
        """
        :param BaseShell:
        :type BaseShell: TopoDS_Shape &
        :param SuspectedShell:
        :type SuspectedShell: TopoDS_Shape &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsSuspectedAsClosing(self, *args)


    def IsPureNMShell(self, *args):
        """
        :param Shell:
        :type Shell: TopoDS_Shape &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsPureNMShell(self, *args)


    def SetIDEASCase(self, *args):
        """
        :param IDEASCase:
        :type IDEASCase: bool
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_SetIDEASCase(self, *args)


    def IsIDEASCase(self, *args):
        """
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsIDEASCase(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_NMTool
StepToTopoDS_NMTool.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_Init, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.SetActive = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_SetActive, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsActive = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsActive, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.CleanUp = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_CleanUp, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsBound, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_Bind, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_Find, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.RegisterNMEdge = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_RegisterNMEdge, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsSuspectedAsClosing = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsSuspectedAsClosing, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsPureNMShell = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsPureNMShell, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.SetIDEASCase = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_SetIDEASCase, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsIDEASCase = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsIDEASCase, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool_swigregister = _StepToTopoDS.StepToTopoDS_NMTool_swigregister
StepToTopoDS_NMTool_swigregister(StepToTopoDS_NMTool)

class StepToTopoDS_PointPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P1:
        :type P1: Handle_StepGeom_CartesianPoint &
        :param P2:
        :type P2: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_PointPair_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointPair(*args))
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPair
StepToTopoDS_PointPair_swigregister = _StepToTopoDS.StepToTopoDS_PointPair_swigregister
StepToTopoDS_PointPair_swigregister(StepToTopoDS_PointPair)

class StepToTopoDS_PointPairHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        * Returns a HasCode value for the PointPair

        :param K:
        :type K: StepToTopoDS_PointPair &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        * Returns True when the two PointPair are the same

        :param K1:
        :type K1: StepToTopoDS_PointPair &
        :param K2:
        :type K2: StepToTopoDS_PointPair &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _StepToTopoDS.StepToTopoDS_PointPairHasher_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointPairHasher())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPairHasher
StepToTopoDS_PointPairHasher_swigregister = _StepToTopoDS.StepToTopoDS_PointPairHasher_swigregister
StepToTopoDS_PointPairHasher_swigregister(StepToTopoDS_PointPairHasher)

def StepToTopoDS_PointPairHasher_HashCode(*args):
    """
    * Returns a HasCode value for the PointPair

    :param K:
    :type K: StepToTopoDS_PointPair &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode(*args)

def StepToTopoDS_PointPairHasher_IsEqual(*args):
    """
    * Returns True when the two PointPair are the same

    :param K1:
    :type K1: StepToTopoDS_PointPair &
    :param K2:
    :type K2: StepToTopoDS_PointPair &
    :rtype: bool

    """
    return _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual(*args)

class StepToTopoDS_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_Root_IsDone(self, *args)


    def Precision(self, *args):
        """
        * Returns the value of 'MyPrecision'

        :rtype: float

        """
        return _StepToTopoDS.StepToTopoDS_Root_Precision(self, *args)


    def SetPrecision(self, *args):
        """
        * Sets the value of 'MyPrecision'

        :param preci:
        :type preci: float
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Root_SetPrecision(self, *args)


    def MaxTol(self, *args):
        """
        * Returns the value of 'MaxTol'

        :rtype: float

        """
        return _StepToTopoDS.StepToTopoDS_Root_MaxTol(self, *args)


    def SetMaxTol(self, *args):
        """
        * Sets the value of MaxTol

        :param maxpreci:
        :type maxpreci: float
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Root_SetMaxTol(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_Root
StepToTopoDS_Root.IsDone = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_IsDone, None, StepToTopoDS_Root)
StepToTopoDS_Root.Precision = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_Precision, None, StepToTopoDS_Root)
StepToTopoDS_Root.SetPrecision = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_SetPrecision, None, StepToTopoDS_Root)
StepToTopoDS_Root.MaxTol = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_MaxTol, None, StepToTopoDS_Root)
StepToTopoDS_Root.SetMaxTol = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_SetMaxTol, None, StepToTopoDS_Root)
StepToTopoDS_Root_swigregister = _StepToTopoDS.StepToTopoDS_Root_swigregister
StepToTopoDS_Root_swigregister(StepToTopoDS_Root)

class StepToTopoDS_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Map:
        :type Map: StepToTopoDS_DataMapOfTRI &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_Tool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_Tool(*args))

    def Init(self, *args):
        """
        :param Map:
        :type Map: StepToTopoDS_DataMapOfTRI &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_Init(self, *args)


    def IsBound(self, *args):
        """
        :param TRI:
        :type TRI: Handle_StepShape_TopologicalRepresentationItem &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_Tool_IsBound(self, *args)


    def Bind(self, *args):
        """
        :param TRI:
        :type TRI: Handle_StepShape_TopologicalRepresentationItem &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_Bind(self, *args)


    def Find(self, *args):
        """
        :param TRI:
        :type TRI: Handle_StepShape_TopologicalRepresentationItem &
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_Tool_Find(self, *args)


    def ClearEdgeMap(self, *args):
        """
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_ClearEdgeMap(self, *args)


    def IsEdgeBound(self, *args):
        """
        :param PP:
        :type PP: StepToTopoDS_PointPair &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_Tool_IsEdgeBound(self, *args)


    def BindEdge(self, *args):
        """
        :param PP:
        :type PP: StepToTopoDS_PointPair &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_BindEdge(self, *args)


    def FindEdge(self, *args):
        """
        :param PP:
        :type PP: StepToTopoDS_PointPair &
        :rtype: TopoDS_Edge

        """
        return _StepToTopoDS.StepToTopoDS_Tool_FindEdge(self, *args)


    def ClearVertexMap(self, *args):
        """
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_ClearVertexMap(self, *args)


    def IsVertexBound(self, *args):
        """
        :param PG:
        :type PG: Handle_StepGeom_CartesianPoint &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_Tool_IsVertexBound(self, *args)


    def BindVertex(self, *args):
        """
        :param P:
        :type P: Handle_StepGeom_CartesianPoint &
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_BindVertex(self, *args)


    def FindVertex(self, *args):
        """
        :param P:
        :type P: Handle_StepGeom_CartesianPoint &
        :rtype: TopoDS_Vertex

        """
        return _StepToTopoDS.StepToTopoDS_Tool_FindVertex(self, *args)


    def ComputePCurve(self, *args):
        """
        :param B:
        :type B: bool
        :rtype: None

        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_Tool_ComputePCurve(self, *args)


    def TransientProcess(self, *args):
        """
        :rtype: Handle_Transfer_TransientProcess

        """
        return _StepToTopoDS.StepToTopoDS_Tool_TransientProcess(self, *args)


    def AddContinuity(self, *args):
        """
        :param GeomSurf:
        :type GeomSurf: Handle_Geom_Surface &
        :rtype: None

        :param GeomCurve:
        :type GeomCurve: Handle_Geom_Curve &
        :rtype: None

        :param GeomCur2d:
        :type GeomCur2d: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_Tool_AddContinuity(self, *args)


    def C0Surf(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C0Surf(self, *args)


    def C1Surf(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C1Surf(self, *args)


    def C2Surf(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C2Surf(self, *args)


    def C0Cur2(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C0Cur2(self, *args)


    def C1Cur2(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C1Cur2(self, *args)


    def C2Cur2(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C2Cur2(self, *args)


    def C0Cur3(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C0Cur3(self, *args)


    def C1Cur3(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C1Cur3(self, *args)


    def C2Cur3(self, *args):
        """
        :rtype: int

        """
        return _StepToTopoDS.StepToTopoDS_Tool_C2Cur3(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_Tool
StepToTopoDS_Tool.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_Init, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_IsBound, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_Bind, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_Find, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.ClearEdgeMap = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_ClearEdgeMap, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.IsEdgeBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_IsEdgeBound, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.BindEdge = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_BindEdge, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.FindEdge = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_FindEdge, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.ClearVertexMap = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_ClearVertexMap, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.IsVertexBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_IsVertexBound, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.BindVertex = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_BindVertex, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.FindVertex = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_FindVertex, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.ComputePCurve = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_ComputePCurve, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.TransientProcess = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_TransientProcess, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.AddContinuity = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_AddContinuity, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C0Surf = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C0Surf, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C1Surf = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C1Surf, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C2Surf = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C2Surf, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C0Cur2 = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C0Cur2, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C1Cur2 = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C1Cur2, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C2Cur2 = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C2Cur2, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C0Cur3 = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C0Cur3, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C1Cur3 = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C1Cur3, None, StepToTopoDS_Tool)
StepToTopoDS_Tool.C2Cur3 = new_instancemethod(_StepToTopoDS.StepToTopoDS_Tool_C2Cur3, None, StepToTopoDS_Tool)
StepToTopoDS_Tool_swigregister = _StepToTopoDS.StepToTopoDS_Tool_swigregister
StepToTopoDS_Tool_swigregister(StepToTopoDS_Tool)

class StepToTopoDS_MakeTransformed(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_MakeTransformed_swiginit(self, _StepToTopoDS.new_StepToTopoDS_MakeTransformed(*args))

    def Compute(self, *args):
        """
        * Computes a transformation to pass from an Origin placement to a Target placement. Returns True when done If not done, the transformation will by Identity

        :param Origin:
        :type Origin: Handle_StepGeom_Axis2Placement3d &
        :param Target:
        :type Target: Handle_StepGeom_Axis2Placement3d &
        :rtype: bool

        * Computes a transformation defined by an operator 3D

        :param Operator:
        :type Operator: Handle_StepGeom_CartesianTransformationOperator3d &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Compute(self, *args)


    def Transformation(self, *args):
        """
        * Returns the computed transformation (Identity if not yet or if failed)

        :rtype: gp_Trsf

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Transformation(self, *args)


    def Transform(self, *args):
        """
        * Applies the computed transformation to a shape Returns False if the transformation is Identity

        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Transform(self, *args)


    def TranslateMappedItem(self, *args):
        """
        * Translates a MappedItem. More precisely A MappedItem has a MappingSource and a MappingTarget MappingSource has a MappedRepresentation and a MappingOrigin MappedRepresentation is the basic item to be instanced MappingOrigin is the starting placement MappingTarget is the final placement Hence, the transformation from MappingOrigin and MappingTarget is computed, the MappedRepr. is converted to a Shape, then transformed as an instance of this Shape

        :param mapit:
        :type mapit: Handle_StepRepr_MappedItem &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_TranslateMappedItem(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_MakeTransformed
StepToTopoDS_MakeTransformed.Compute = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_Compute, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed.Transformation = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_Transformation, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed.Transform = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_Transform, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed.TranslateMappedItem = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_TranslateMappedItem, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed_swigregister = _StepToTopoDS.StepToTopoDS_MakeTransformed_swigregister
StepToTopoDS_MakeTransformed_swigregister(StepToTopoDS_MakeTransformed)

class StepToTopoDS_TranslateCompositeCurve(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Translates standalone composite_curve

        :param CC:
        :type CC: Handle_StepGeom_CompositeCurve &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: None

        * Translates composite_curve lying on surface

        :param CC:
        :type CC: Handle_StepGeom_CompositeCurve &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :param S:
        :type S: Handle_StepGeom_Surface &
        :param Surf:
        :type Surf: Handle_Geom_Surface &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateCompositeCurve(*args))

    def Init(self, *args):
        """
        * Translates standalone composite_curve

        :param CC:
        :type CC: Handle_StepGeom_CompositeCurve &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: bool

        * Translates composite_curve lying on surface

        :param CC:
        :type CC: Handle_StepGeom_CompositeCurve &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :param S:
        :type S: Handle_StepGeom_Surface &
        :param Surf:
        :type Surf: Handle_Geom_Surface &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Init(self, *args)


    def Value(self, *args):
        """
        * Returns result of last translation or null wire if failed.

        :rtype: TopoDS_Wire

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Value(self, *args)


    def IsInfiniteSegment(self, *args):
        """
        * Returns True if composite_curve contains a segment with infinite parameters.

        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_IsInfiniteSegment(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCompositeCurve
StepToTopoDS_TranslateCompositeCurve.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Init, None, StepToTopoDS_TranslateCompositeCurve)
StepToTopoDS_TranslateCompositeCurve.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Value, None, StepToTopoDS_TranslateCompositeCurve)
StepToTopoDS_TranslateCompositeCurve.IsInfiniteSegment = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_IsInfiniteSegment, None, StepToTopoDS_TranslateCompositeCurve)
StepToTopoDS_TranslateCompositeCurve_swigregister = _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swigregister
StepToTopoDS_TranslateCompositeCurve_swigregister(StepToTopoDS_TranslateCompositeCurve)

class StepToTopoDS_TranslateCurveBoundedSurface(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create empty tool

        :rtype: None

        * Translate surface

        :param CBS:
        :type CBS: Handle_StepGeom_CurveBoundedSurface &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateCurveBoundedSurface(*args))

    def Init(self, *args):
        """
        * Translate surface

        :param CBS:
        :type CBS: Handle_StepGeom_CurveBoundedSurface &
        :param TP:
        :type TP: Handle_Transfer_TransientProcess &
        :rtype: bool

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Init(self, *args)


    def Value(self, *args):
        """
        * Returns result of last translation or null wire if failed.

        :rtype: TopoDS_Face

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Value(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCurveBoundedSurface
StepToTopoDS_TranslateCurveBoundedSurface.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Init, None, StepToTopoDS_TranslateCurveBoundedSurface)
StepToTopoDS_TranslateCurveBoundedSurface.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Value, None, StepToTopoDS_TranslateCurveBoundedSurface)
StepToTopoDS_TranslateCurveBoundedSurface_swigregister = _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swigregister
StepToTopoDS_TranslateCurveBoundedSurface_swigregister(StepToTopoDS_TranslateCurveBoundedSurface)

class StepToTopoDS_TranslateEdge(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param E:
        :type E: Handle_StepShape_Edge &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateEdge_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateEdge(*args))

    def Init(self, *args):
        """
        :param E:
        :type E: Handle_StepShape_Edge &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Init(self, *args)


    def MakeFromCurve3D(self, *args):
        """
        * Warning! C3D is assumed to be a Curve 3D ... other cases to checked before calling this

        :param C3D:
        :type C3D: Handle_StepGeom_Curve &
        :param EC:
        :type EC: Handle_StepShape_EdgeCurve &
        :param Vend:
        :type Vend: Handle_StepShape_Vertex &
        :param preci:
        :type preci: float
        :param E:
        :type E: TopoDS_Edge &
        :param V1:
        :type V1: TopoDS_Vertex &
        :param V2:
        :type V2: TopoDS_Vertex &
        :param T:
        :type T: StepToTopoDS_Tool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_MakeFromCurve3D(self, *args)


    def MakePCurve(self, *args):
        """
        :param PCU:
        :type PCU: Handle_StepGeom_Pcurve &
        :param ConvSurf:
        :type ConvSurf: Handle_Geom_Surface &
        :rtype: Handle_Geom2d_Curve

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_MakePCurve(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslateEdgeError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdge
StepToTopoDS_TranslateEdge.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_Init, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.MakeFromCurve3D = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_MakeFromCurve3D, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.MakePCurve = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_MakePCurve, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_Value, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_Error, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge_swigregister = _StepToTopoDS.StepToTopoDS_TranslateEdge_swigregister
StepToTopoDS_TranslateEdge_swigregister(StepToTopoDS_TranslateEdge)

class StepToTopoDS_TranslateEdgeLoop(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param FB:
        :type FB: Handle_StepShape_FaceBound &
        :param F:
        :type F: TopoDS_Face &
        :param S:
        :type S: Handle_Geom_Surface &
        :param SS:
        :type SS: Handle_StepGeom_Surface &
        :param ss:
        :type ss: bool
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateEdgeLoop(*args))

    def Init(self, *args):
        """
        :param FB:
        :type FB: Handle_StepShape_FaceBound &
        :param F:
        :type F: TopoDS_Face &
        :param S:
        :type S: Handle_Geom_Surface &
        :param SS:
        :type SS: Handle_StepGeom_Surface &
        :param ss:
        :type ss: bool
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslateEdgeLoopError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdgeLoop
StepToTopoDS_TranslateEdgeLoop.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Init, None, StepToTopoDS_TranslateEdgeLoop)
StepToTopoDS_TranslateEdgeLoop.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Value, None, StepToTopoDS_TranslateEdgeLoop)
StepToTopoDS_TranslateEdgeLoop.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Error, None, StepToTopoDS_TranslateEdgeLoop)
StepToTopoDS_TranslateEdgeLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swigregister
StepToTopoDS_TranslateEdgeLoop_swigregister(StepToTopoDS_TranslateEdgeLoop)

class StepToTopoDS_TranslateFace(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param FS:
        :type FS: Handle_StepShape_FaceSurface &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateFace_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateFace(*args))

    def Init(self, *args):
        """
        :param FS:
        :type FS: Handle_StepShape_FaceSurface &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslateFaceError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateFace
StepToTopoDS_TranslateFace.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateFace_Init, None, StepToTopoDS_TranslateFace)
StepToTopoDS_TranslateFace.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateFace_Value, None, StepToTopoDS_TranslateFace)
StepToTopoDS_TranslateFace.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateFace_Error, None, StepToTopoDS_TranslateFace)
StepToTopoDS_TranslateFace_swigregister = _StepToTopoDS.StepToTopoDS_TranslateFace_swigregister
StepToTopoDS_TranslateFace_swigregister(StepToTopoDS_TranslateFace)

class StepToTopoDS_TranslatePolyLoop(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param PL:
        :type PL: Handle_StepShape_PolyLoop &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param S:
        :type S: Handle_Geom_Surface &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslatePolyLoop(*args))

    def Init(self, *args):
        """
        :param PL:
        :type PL: Handle_StepShape_PolyLoop &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param S:
        :type S: Handle_Geom_Surface &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslatePolyLoopError

        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslatePolyLoop
StepToTopoDS_TranslatePolyLoop.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Init, None, StepToTopoDS_TranslatePolyLoop)
StepToTopoDS_TranslatePolyLoop.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Value, None, StepToTopoDS_TranslatePolyLoop)
StepToTopoDS_TranslatePolyLoop.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Error, None, StepToTopoDS_TranslatePolyLoop)
StepToTopoDS_TranslatePolyLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swigregister
StepToTopoDS_TranslatePolyLoop_swigregister(StepToTopoDS_TranslatePolyLoop)

class StepToTopoDS_TranslateShell(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param CFS:
        :type CFS: Handle_StepShape_ConnectedFaceSet &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateShell_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateShell(*args))

    def Init(self, *args):
        """
        :param CFS:
        :type CFS: Handle_StepShape_ConnectedFaceSet &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslateShellError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateShell
StepToTopoDS_TranslateShell.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateShell_Init, None, StepToTopoDS_TranslateShell)
StepToTopoDS_TranslateShell.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateShell_Value, None, StepToTopoDS_TranslateShell)
StepToTopoDS_TranslateShell.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateShell_Error, None, StepToTopoDS_TranslateShell)
StepToTopoDS_TranslateShell_swigregister = _StepToTopoDS.StepToTopoDS_TranslateShell_swigregister
StepToTopoDS_TranslateShell_swigregister(StepToTopoDS_TranslateShell)

class StepToTopoDS_TranslateVertex(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param V:
        :type V: Handle_StepShape_Vertex &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateVertex_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateVertex(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepShape_Vertex &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslateVertexError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertex
StepToTopoDS_TranslateVertex.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertex_Init, None, StepToTopoDS_TranslateVertex)
StepToTopoDS_TranslateVertex.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertex_Value, None, StepToTopoDS_TranslateVertex)
StepToTopoDS_TranslateVertex.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertex_Error, None, StepToTopoDS_TranslateVertex)
StepToTopoDS_TranslateVertex_swigregister = _StepToTopoDS.StepToTopoDS_TranslateVertex_swigregister
StepToTopoDS_TranslateVertex_swigregister(StepToTopoDS_TranslateVertex)

class StepToTopoDS_TranslateVertexLoop(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param VL:
        :type VL: Handle_StepShape_VertexLoop &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateVertexLoop(*args))

    def Init(self, *args):
        """
        :param VL:
        :type VL: Handle_StepShape_VertexLoop &
        :param T:
        :type T: StepToTopoDS_Tool &
        :param NMTool:
        :type NMTool: StepToTopoDS_NMTool &
        :rtype: None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Value(self, *args)


    def Error(self, *args):
        """
        :rtype: StepToTopoDS_TranslateVertexLoopError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Error(self, *args)

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertexLoop
StepToTopoDS_TranslateVertexLoop.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Init, None, StepToTopoDS_TranslateVertexLoop)
StepToTopoDS_TranslateVertexLoop.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Value, None, StepToTopoDS_TranslateVertexLoop)
StepToTopoDS_TranslateVertexLoop.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Error, None, StepToTopoDS_TranslateVertexLoop)
StepToTopoDS_TranslateVertexLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swigregister
StepToTopoDS_TranslateVertexLoop_swigregister(StepToTopoDS_TranslateVertexLoop)



