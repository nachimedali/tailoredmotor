# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TPrsStd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TPrsStd', [dirname(__file__)])
        except ImportError:
            import _TPrsStd
            return _TPrsStd
        if fp is not None:
            try:
                _mod = imp.load_module('_TPrsStd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TPrsStd = swig_import_helper()
    del swig_import_helper
else:
    import _TPrsStd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TPrsStd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TPrsStd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TPrsStd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TPrsStd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TPrsStd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TPrsStd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TPrsStd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TPrsStd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TPrsStd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TPrsStd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TPrsStd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TPrsStd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TPrsStd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TPrsStd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TPrsStd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TPrsStd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TPrsStd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TPrsStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TDF
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.AIS
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.Bnd
import OCC.Prs3d
import OCC.Quantity
import OCC.Aspect
import OCC.TShort
import OCC.TColQuantity
import OCC.Graphic3d
import OCC.Image
import OCC.OSD
import OCC.HLRAlgo
import OCC.TopTools
import OCC.Message
import OCC.Poly
import OCC.NCollection
import OCC.SelectMgr
import OCC.PrsMgr
import OCC.V3d
import OCC.Visual3d
import OCC.StdSelect
import OCC.Select3D
import OCC.SelectBasics
import OCC.DsgPrs
import OCC.TDataXtd
import OCC.TNaming
import OCC.TDataStd

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class TPrsStd_AISPresentation(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Returns the GUID for TPrsStd_AISPresentation attributes.

        :rtype: Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetID(*args)

    GetID = staticmethod(GetID)

    def Unset(*args):
        """
        * Delete (if exist) the presentation attribute associated to the label <L>.

        :param L:
        :type L: TDF_Label &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_AISPresentation_Unset(*args)

    Unset = staticmethod(Unset)

    def Set(*args):
        """
        * Creates or retrieves the presentation attribute on the label L, and sets the GUID driver.

        :param L:
        :type L: TDF_Label &
        :param driver:
        :type driver: Standard_GUID &
        :rtype: Handle_TPrsStd_AISPresentation

        * Creates or retrieves the AISPresentation attribute attached to master. The GUID of the driver will be the GUID of master. master is the attribute you want to display.

        :param master:
        :type master: Handle_TDF_Attribute &
        :rtype: Handle_TPrsStd_AISPresentation

        """
        return _TPrsStd.TPrsStd_AISPresentation_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TPrsStd.TPrsStd_AISPresentation_swiginit(self, _TPrsStd.new_TPrsStd_AISPresentation(*args))

    def SetDisplayed(self, *args):
        """
        :param B:
        :type B: bool
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetDisplayed(self, *args)


    def Display(self, *args):
        """
        * Display presentation of object in AIS viewer. If <update> = True then AISObject is recomputed and all the visualization settings are applied

        :param update: default value is Standard_False
        :type update: bool
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Display(self, *args)


    def Erase(self, *args):
        """
        * Removes the presentation of this AIS presentation attribute from the TPrsStd_AISViewer. If remove is true, this AIS presentation attribute is removed from the interactive context.

        :param remove: default value is Standard_False
        :type remove: bool
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Erase(self, *args)


    def Update(self, *args):
        """
        * Recompute presentation of object and apply the visualization settings

        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Update(self, *args)


    def GetDriverGUID(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetDriverGUID(self, *args)


    def SetDriverGUID(self, *args):
        """
        :param guid:
        :type guid: Standard_GUID &
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetDriverGUID(self, *args)


    def IsDisplayed(self, *args):
        """
        * Returns true if this AIS presentation attribute is displayed.

        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_IsDisplayed(self, *args)


    def GetAIS(self, *args):
        """
        * Returns AIS_InteractiveObject stored in the presentation attribute

        :rtype: Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetAIS(self, *args)


    def Material(self, *args):
        """
        * Returns the material setting for this presentation attribute.

        :rtype: Graphic3d_NameOfMaterial

        """
        return _TPrsStd.TPrsStd_AISPresentation_Material(self, *args)


    def SetMaterial(self, *args):
        """
        * Sets the material aName for this presentation attribute.

        :param aName:
        :type aName: Graphic3d_NameOfMaterial
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetMaterial(self, *args)


    def HasOwnMaterial(self, *args):
        """
        * Returns true if this presentation attribute already has a material setting.

        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnMaterial(self, *args)


    def UnsetMaterial(self, *args):
        """
        * Removes the material setting from this presentation attribute.

        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        * Sets the transparency value aValue for this presentation attribute. This value is 0.6 by default.

        :param aValue: default value is 0.6
        :type aValue: float
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetTransparency(self, *args)


    def Transparency(self, *args):
        """
        :rtype: float

        """
        return _TPrsStd.TPrsStd_AISPresentation_Transparency(self, *args)


    def HasOwnTransparency(self, *args):
        """
        * Returns true if this presentation attribute already has a transparency setting.

        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnTransparency(self, *args)


    def UnsetTransparency(self, *args):
        """
        * Removes the transparency setting from this presentation attribute.

        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetTransparency(self, *args)


    def Color(self, *args):
        """
        :rtype: Quantity_NameOfColor

        """
        return _TPrsStd.TPrsStd_AISPresentation_Color(self, *args)


    def SetColor(self, *args):
        """
        * Sets the color aColor for this presentation attribute.

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetColor(self, *args)


    def HasOwnColor(self, *args):
        """
        * Returns true if this presentation attribute already has a color setting.

        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnColor(self, *args)


    def UnsetColor(self, *args):
        """
        * Removes the color setting from this presentation attribute.

        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetColor(self, *args)


    def Width(self, *args):
        """
        :rtype: float

        """
        return _TPrsStd.TPrsStd_AISPresentation_Width(self, *args)


    def SetWidth(self, *args):
        """
        * Sets the width aWidth for this presentation attribute.

        :param aWidth:
        :type aWidth: float
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetWidth(self, *args)


    def HasOwnWidth(self, *args):
        """
        * Returns true if this presentation attribute already has a width setting.

        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnWidth(self, *args)


    def UnsetWidth(self, *args):
        """
        * Removes the width setting from this presentation attribute.

        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetWidth(self, *args)


    def Mode(self, *args):
        """
        :rtype: int

        """
        return _TPrsStd.TPrsStd_AISPresentation_Mode(self, *args)


    def SetMode(self, *args):
        """
        :param theMode:
        :type theMode: int
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetMode(self, *args)


    def HasOwnMode(self, *args):
        """
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnMode(self, *args)


    def UnsetMode(self, *args):
        """
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetMode(self, *args)


    def SelectionMode(self, *args):
        """
        :rtype: int

        """
        return _TPrsStd.TPrsStd_AISPresentation_SelectionMode(self, *args)


    def SetSelectionMode(self, *args):
        """
        :param theSelectionMode:
        :type theSelectionMode: int
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetSelectionMode(self, *args)


    def HasOwnSelectionMode(self, *args):
        """
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnSelectionMode(self, *args)


    def UnsetSelectionMode(self, *args):
        """
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetSelectionMode(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_AISPresentation(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AISPresentation
TPrsStd_AISPresentation.SetDisplayed = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetDisplayed, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Display = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Display, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Erase = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Erase, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Update = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Update, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.GetDriverGUID = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_GetDriverGUID, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetDriverGUID = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetDriverGUID, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.IsDisplayed = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_IsDisplayed, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.GetAIS = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_GetAIS, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Material = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Material, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetMaterial = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetMaterial, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.HasOwnMaterial = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_HasOwnMaterial, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.UnsetMaterial = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_UnsetMaterial, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetTransparency = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetTransparency, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Transparency = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Transparency, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.HasOwnTransparency = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_HasOwnTransparency, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.UnsetTransparency = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_UnsetTransparency, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Color = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Color, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetColor = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetColor, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.HasOwnColor = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_HasOwnColor, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.UnsetColor = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_UnsetColor, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Width = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Width, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetWidth = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetWidth, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.HasOwnWidth = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_HasOwnWidth, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.UnsetWidth = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_UnsetWidth, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.Mode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_Mode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.HasOwnMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_HasOwnMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.UnsetMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_UnsetMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SelectionMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SelectionMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.SetSelectionMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_SetSelectionMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.HasOwnSelectionMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_HasOwnSelectionMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation.UnsetSelectionMode = new_instancemethod(_TPrsStd.TPrsStd_AISPresentation_UnsetSelectionMode, None, TPrsStd_AISPresentation)
TPrsStd_AISPresentation_swigregister = _TPrsStd.TPrsStd_AISPresentation_swigregister
TPrsStd_AISPresentation_swigregister(TPrsStd_AISPresentation)

def TPrsStd_AISPresentation_GetID(*args):
    """
    * Returns the GUID for TPrsStd_AISPresentation attributes.

    :rtype: Standard_GUID

    """
    return _TPrsStd.TPrsStd_AISPresentation_GetID(*args)

def TPrsStd_AISPresentation_Unset(*args):
    """
    * Delete (if exist) the presentation attribute associated to the label <L>.

    :param L:
    :type L: TDF_Label &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_AISPresentation_Unset(*args)

def TPrsStd_AISPresentation_Set(*args):
    """
    * Creates or retrieves the presentation attribute on the label L, and sets the GUID driver.

    :param L:
    :type L: TDF_Label &
    :param driver:
    :type driver: Standard_GUID &
    :rtype: Handle_TPrsStd_AISPresentation

    * Creates or retrieves the AISPresentation attribute attached to master. The GUID of the driver will be the GUID of master. master is the attribute you want to display.

    :param master:
    :type master: Handle_TDF_Attribute &
    :rtype: Handle_TPrsStd_AISPresentation

    """
    return _TPrsStd.TPrsStd_AISPresentation_Set(*args)

class Handle_TPrsStd_AISPresentation(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_AISPresentation_swiginit(self, _TPrsStd.new_Handle_TPrsStd_AISPresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_AISPresentation_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_AISPresentation
Handle_TPrsStd_AISPresentation.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_AISPresentation_Nullify, None, Handle_TPrsStd_AISPresentation)
Handle_TPrsStd_AISPresentation.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_AISPresentation_IsNull, None, Handle_TPrsStd_AISPresentation)
Handle_TPrsStd_AISPresentation.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_AISPresentation_GetObject, None, Handle_TPrsStd_AISPresentation)
Handle_TPrsStd_AISPresentation_swigregister = _TPrsStd.Handle_TPrsStd_AISPresentation_swigregister
Handle_TPrsStd_AISPresentation_swigregister(Handle_TPrsStd_AISPresentation)

def Handle_TPrsStd_AISPresentation_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_AISPresentation_DownCast(AnObject)
Handle_TPrsStd_AISPresentation_DownCast = _TPrsStd.Handle_TPrsStd_AISPresentation_DownCast

class TPrsStd_AISViewer(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods  =============

        :rtype: Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISViewer_GetID(*args)

    GetID = staticmethod(GetID)

    def Has(*args):
        """
        * returns True if there is an AISViewer attribute in <acces> Data Framework.

        :param acces:
        :type acces: TDF_Label &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISViewer_Has(*args)

    Has = staticmethod(Has)

    def New(*args):
        """
        * create and set an AISViewer at. Raise an exception if Has.

        :param access:
        :type access: TDF_Label &
        :param selector:
        :type selector: Handle_AIS_InteractiveContext &
        :rtype: Handle_TPrsStd_AISViewer

        * create and set an AISAttribute at root label. The interactive context is build. Raise an exception if Has.

        :param acces:
        :type acces: TDF_Label &
        :param viewer:
        :type viewer: Handle_V3d_Viewer &
        :rtype: Handle_TPrsStd_AISViewer

        """
        return _TPrsStd.TPrsStd_AISViewer_New(*args)

    New = staticmethod(New)

    def Find(*args):
        """
        * Finds the viewer attribute at the label access, the root of the data framework. Calling this function can be used to initialize an AIS viewer

        :param acces:
        :type acces: TDF_Label &
        :param A:
        :type A: Handle_TPrsStd_AISViewer &
        :rtype: bool

        :param acces:
        :type acces: TDF_Label &
        :param IC:
        :type IC: Handle_AIS_InteractiveContext &
        :rtype: bool

        :param acces:
        :type acces: TDF_Label &
        :param V:
        :type V: Handle_V3d_Viewer &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_AISViewer_Find(*args)

    Find = staticmethod(Find)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TPrsStd.TPrsStd_AISViewer_swiginit(self, _TPrsStd.new_TPrsStd_AISViewer(*args))

    def Update(self, *args):
        """
        * AISViewer methods =================

        :param acces:
        :type acces: TDF_Label &
        :rtype: void

        * Updates the viewer at the label access. access is the root of the data framework.

        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISViewer_Update(self, *args)


    def SetInteractiveContext(self, *args):
        """
        * Sets the interactive context ctx for this attribute.

        :param ctx:
        :type ctx: Handle_AIS_InteractiveContext &
        :rtype: None

        """
        return _TPrsStd.TPrsStd_AISViewer_SetInteractiveContext(self, *args)


    def GetInteractiveContext(self, *args):
        """
        * Returns the interactive context in this attribute.

        :rtype: Handle_AIS_InteractiveContext

        """
        return _TPrsStd.TPrsStd_AISViewer_GetInteractiveContext(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_AISViewer(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AISViewer
TPrsStd_AISViewer.Update = new_instancemethod(_TPrsStd.TPrsStd_AISViewer_Update, None, TPrsStd_AISViewer)
TPrsStd_AISViewer.SetInteractiveContext = new_instancemethod(_TPrsStd.TPrsStd_AISViewer_SetInteractiveContext, None, TPrsStd_AISViewer)
TPrsStd_AISViewer.GetInteractiveContext = new_instancemethod(_TPrsStd.TPrsStd_AISViewer_GetInteractiveContext, None, TPrsStd_AISViewer)
TPrsStd_AISViewer_swigregister = _TPrsStd.TPrsStd_AISViewer_swigregister
TPrsStd_AISViewer_swigregister(TPrsStd_AISViewer)

def TPrsStd_AISViewer_GetID(*args):
    """
    * class methods  =============

    :rtype: Standard_GUID

    """
    return _TPrsStd.TPrsStd_AISViewer_GetID(*args)

def TPrsStd_AISViewer_Has(*args):
    """
    * returns True if there is an AISViewer attribute in <acces> Data Framework.

    :param acces:
    :type acces: TDF_Label &
    :rtype: bool

    """
    return _TPrsStd.TPrsStd_AISViewer_Has(*args)

def TPrsStd_AISViewer_New(*args):
    """
    * create and set an AISViewer at. Raise an exception if Has.

    :param access:
    :type access: TDF_Label &
    :param selector:
    :type selector: Handle_AIS_InteractiveContext &
    :rtype: Handle_TPrsStd_AISViewer

    * create and set an AISAttribute at root label. The interactive context is build. Raise an exception if Has.

    :param acces:
    :type acces: TDF_Label &
    :param viewer:
    :type viewer: Handle_V3d_Viewer &
    :rtype: Handle_TPrsStd_AISViewer

    """
    return _TPrsStd.TPrsStd_AISViewer_New(*args)

def TPrsStd_AISViewer_Find(*args):
    """
    * Finds the viewer attribute at the label access, the root of the data framework. Calling this function can be used to initialize an AIS viewer

    :param acces:
    :type acces: TDF_Label &
    :param A:
    :type A: Handle_TPrsStd_AISViewer &
    :rtype: bool

    :param acces:
    :type acces: TDF_Label &
    :param IC:
    :type IC: Handle_AIS_InteractiveContext &
    :rtype: bool

    :param acces:
    :type acces: TDF_Label &
    :param V:
    :type V: Handle_V3d_Viewer &
    :rtype: bool

    """
    return _TPrsStd.TPrsStd_AISViewer_Find(*args)

class Handle_TPrsStd_AISViewer(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_AISViewer_swiginit(self, _TPrsStd.new_Handle_TPrsStd_AISViewer(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_AISViewer_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_AISViewer
Handle_TPrsStd_AISViewer.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_AISViewer_Nullify, None, Handle_TPrsStd_AISViewer)
Handle_TPrsStd_AISViewer.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_AISViewer_IsNull, None, Handle_TPrsStd_AISViewer)
Handle_TPrsStd_AISViewer.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_AISViewer_GetObject, None, Handle_TPrsStd_AISViewer)
Handle_TPrsStd_AISViewer_swigregister = _TPrsStd.Handle_TPrsStd_AISViewer_swigregister
Handle_TPrsStd_AISViewer_swigregister(Handle_TPrsStd_AISViewer)

def Handle_TPrsStd_AISViewer_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_AISViewer_DownCast(AnObject)
Handle_TPrsStd_AISViewer_DownCast = _TPrsStd.Handle_TPrsStd_AISViewer_DownCast

class TPrsStd_ConstraintTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def UpdateOnlyValue(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

    UpdateOnlyValue = staticmethod(UpdateOnlyValue)

    def ComputeDistance(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

    ComputeDistance = staticmethod(ComputeDistance)

    def ComputeParallel(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

    ComputeParallel = staticmethod(ComputeParallel)

    def ComputeTangent(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

    ComputeTangent = staticmethod(ComputeTangent)

    def ComputePerpendicular(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

    ComputePerpendicular = staticmethod(ComputePerpendicular)

    def ComputeConcentric(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

    ComputeConcentric = staticmethod(ComputeConcentric)

    def ComputeSymmetry(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

    ComputeSymmetry = staticmethod(ComputeSymmetry)

    def ComputeMidPoint(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

    ComputeMidPoint = staticmethod(ComputeMidPoint)

    def ComputeAngle(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

    ComputeAngle = staticmethod(ComputeAngle)

    def ComputeRadius(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

    ComputeRadius = staticmethod(ComputeRadius)

    def ComputeMinRadius(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

    ComputeMinRadius = staticmethod(ComputeMinRadius)

    def ComputeMaxRadius(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

    ComputeMaxRadius = staticmethod(ComputeMaxRadius)

    def ComputeEqualDistance(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

    ComputeEqualDistance = staticmethod(ComputeEqualDistance)

    def ComputeEqualRadius(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

    ComputeEqualRadius = staticmethod(ComputeEqualRadius)

    def ComputeFix(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

    ComputeFix = staticmethod(ComputeFix)

    def ComputeDiameter(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

    ComputeDiameter = staticmethod(ComputeDiameter)

    def ComputeOffset(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

    ComputeOffset = staticmethod(ComputeOffset)

    def ComputePlacement(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

    ComputePlacement = staticmethod(ComputePlacement)

    def ComputeCoincident(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

    ComputeCoincident = staticmethod(ComputeCoincident)

    def ComputeRound(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

    ComputeRound = staticmethod(ComputeRound)

    def ComputeOthers(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

    ComputeOthers = staticmethod(ComputeOthers)

    def ComputeTextAndValue(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param aValue:
        :type aValue: float &
        :param aText:
        :type aText: TCollection_ExtendedString &
        :param anIsAngle:
        :type anIsAngle: bool
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

    ComputeTextAndValue = staticmethod(ComputeTextAndValue)

    def ComputeAngleForOneFace(*args):
        """
        :param aConst:
        :type aConst: Handle_TDataXtd_Constraint &
        :param anAIS:
        :type anAIS: Handle_AIS_InteractiveObject &
        :rtype: void

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

    ComputeAngleForOneFace = staticmethod(ComputeAngleForOneFace)

    def __init__(self):
        _TPrsStd.TPrsStd_ConstraintTools_swiginit(self, _TPrsStd.new_TPrsStd_ConstraintTools())
    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintTools
TPrsStd_ConstraintTools_swigregister = _TPrsStd.TPrsStd_ConstraintTools_swigregister
TPrsStd_ConstraintTools_swigregister(TPrsStd_ConstraintTools)

def TPrsStd_ConstraintTools_UpdateOnlyValue(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

def TPrsStd_ConstraintTools_ComputeDistance(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

def TPrsStd_ConstraintTools_ComputeParallel(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

def TPrsStd_ConstraintTools_ComputeTangent(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

def TPrsStd_ConstraintTools_ComputePerpendicular(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

def TPrsStd_ConstraintTools_ComputeConcentric(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

def TPrsStd_ConstraintTools_ComputeSymmetry(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

def TPrsStd_ConstraintTools_ComputeMidPoint(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

def TPrsStd_ConstraintTools_ComputeAngle(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

def TPrsStd_ConstraintTools_ComputeRadius(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

def TPrsStd_ConstraintTools_ComputeMinRadius(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

def TPrsStd_ConstraintTools_ComputeMaxRadius(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

def TPrsStd_ConstraintTools_ComputeEqualDistance(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

def TPrsStd_ConstraintTools_ComputeEqualRadius(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

def TPrsStd_ConstraintTools_ComputeFix(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

def TPrsStd_ConstraintTools_ComputeDiameter(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

def TPrsStd_ConstraintTools_ComputeOffset(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

def TPrsStd_ConstraintTools_ComputePlacement(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

def TPrsStd_ConstraintTools_ComputeCoincident(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

def TPrsStd_ConstraintTools_ComputeRound(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

def TPrsStd_ConstraintTools_ComputeOthers(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

def TPrsStd_ConstraintTools_ComputeTextAndValue(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param aValue:
    :type aValue: float &
    :param aText:
    :type aText: TCollection_ExtendedString &
    :param anIsAngle:
    :type anIsAngle: bool
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

def TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args):
    """
    :param aConst:
    :type aConst: Handle_TDataXtd_Constraint &
    :param anAIS:
    :type anAIS: Handle_AIS_InteractiveObject &
    :rtype: void

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

class TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TPrsStd_DataMapOfGUIDDriver &
        :rtype: None

        """
        _TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_swiginit(self, _TPrsStd.new_TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TPrsStd_DataMapOfGUIDDriver &
        :rtype: None

        """
        return _TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TPrsStd_Driver

        """
        return _TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_Value(self, *args)

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver
TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver.Initialize = new_instancemethod(_TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_Initialize, None, TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver)
TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver.Key = new_instancemethod(_TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_Key, None, TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver)
TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver.Value = new_instancemethod(_TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_Value, None, TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver)
TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_swigregister = _TPrsStd.TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_swigregister
TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver_swigregister(TPrsStd_DataMapIteratorOfDataMapOfGUIDDriver)

class TPrsStd_DataMapNodeOfDataMapOfGUIDDriver(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :param I:
        :type I: Handle_TPrsStd_Driver &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TPrsStd.TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swiginit(self, _TPrsStd.new_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver(*args))

    def Key(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TPrsStd.TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TPrsStd_Driver

        """
        return _TPrsStd.TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver
TPrsStd_DataMapNodeOfDataMapOfGUIDDriver.Key = new_instancemethod(_TPrsStd.TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_Key, None, TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)
TPrsStd_DataMapNodeOfDataMapOfGUIDDriver.Value = new_instancemethod(_TPrsStd.TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_Value, None, TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)
TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swigregister = _TPrsStd.TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swigregister
TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swigregister(TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)

class Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver
Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_Nullify, None, Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_IsNull, None, Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_GetObject, None, Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swigregister = _TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swigregister
Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_swigregister(Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver)

def Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_DownCast(AnObject)
Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_DownCast = _TPrsStd.Handle_TPrsStd_DataMapNodeOfDataMapOfGUIDDriver_DownCast

class TPrsStd_DataMapOfGUIDDriver(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TPrsStd.TPrsStd_DataMapOfGUIDDriver_swiginit(self, _TPrsStd.new_TPrsStd_DataMapOfGUIDDriver(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TPrsStd_DataMapOfGUIDDriver &
        :rtype: TPrsStd_DataMapOfGUIDDriver

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TPrsStd_DataMapOfGUIDDriver &
        :rtype: TPrsStd_DataMapOfGUIDDriver

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :param I:
        :type I: Handle_TPrsStd_Driver &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Handle_TPrsStd_Driver

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Handle_TPrsStd_Driver

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Standard_Address

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Standard_Address

        """
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeFind1(self, *args)

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DataMapOfGUIDDriver
TPrsStd_DataMapOfGUIDDriver.Assign = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Assign, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Set = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Set, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.ReSize = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_ReSize, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Clear = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Clear, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Bind = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Bind, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.IsBound = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_IsBound, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.UnBind = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_UnBind, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Find = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Find, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.ChangeFind = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeFind, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Find1 = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Find1, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.ChangeFind1 = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeFind1, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver_swigregister = _TPrsStd.TPrsStd_DataMapOfGUIDDriver_swigregister
TPrsStd_DataMapOfGUIDDriver_swigregister(TPrsStd_DataMapOfGUIDDriver)

class TPrsStd_Driver(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Update(self, *args):
        """
        * Updates the interactive object ais with information found on the attributes associated with the label L.

        :param L:
        :type L: TDF_Label &
        :param ais:
        :type ais: Handle_AIS_InteractiveObject &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_Driver_Update(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_Driver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_Driver
TPrsStd_Driver.Update = new_instancemethod(_TPrsStd.TPrsStd_Driver_Update, None, TPrsStd_Driver)
TPrsStd_Driver_swigregister = _TPrsStd.TPrsStd_Driver_swigregister
TPrsStd_Driver_swigregister(TPrsStd_Driver)

class Handle_TPrsStd_Driver(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_Driver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_Driver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_Driver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_Driver
Handle_TPrsStd_Driver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_Driver_Nullify, None, Handle_TPrsStd_Driver)
Handle_TPrsStd_Driver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_Driver_IsNull, None, Handle_TPrsStd_Driver)
Handle_TPrsStd_Driver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_Driver_GetObject, None, Handle_TPrsStd_Driver)
Handle_TPrsStd_Driver_swigregister = _TPrsStd.Handle_TPrsStd_Driver_swigregister
Handle_TPrsStd_Driver_swigregister(Handle_TPrsStd_Driver)

def Handle_TPrsStd_Driver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_Driver_DownCast(AnObject)
Handle_TPrsStd_Driver_DownCast = _TPrsStd.Handle_TPrsStd_Driver_DownCast

class TPrsStd_DriverTable(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(*args):
        """
        * Returns the static table. If it does not exist, creates it and fills it with standard drivers.

        :rtype: Handle_TPrsStd_DriverTable

        """
        return _TPrsStd.TPrsStd_DriverTable_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        * Default constructor

        :rtype: None

        """
        _TPrsStd.TPrsStd_DriverTable_swiginit(self, _TPrsStd.new_TPrsStd_DriverTable(*args))

    def InitStandardDrivers(self, *args):
        """
        * Fills the table with standard drivers

        :rtype: None

        """
        return _TPrsStd.TPrsStd_DriverTable_InitStandardDrivers(self, *args)


    def AddDriver(self, *args):
        """
        * Returns true if the driver has been added successfully to the driver table.

        :param guid:
        :type guid: Standard_GUID &
        :param driver:
        :type driver: Handle_TPrsStd_Driver &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_DriverTable_AddDriver(self, *args)


    def FindDriver(self, *args):
        """
        * Returns true if the driver was found.

        :param guid:
        :type guid: Standard_GUID &
        :param driver:
        :type driver: Handle_TPrsStd_Driver &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_DriverTable_FindDriver(self, *args)


    def RemoveDriver(self, *args):
        """
        * Removes a driver with the given GUID. Returns true if the driver has been removed successfully.

        :param guid:
        :type guid: Standard_GUID &
        :rtype: bool

        """
        return _TPrsStd.TPrsStd_DriverTable_RemoveDriver(self, *args)


    def Clear(self, *args):
        """
        * Removes all drivers. Returns true if the driver has been removed successfully. If this method is used, the InitStandardDrivers method should be called to fill the table with standard drivers.

        :rtype: None

        """
        return _TPrsStd.TPrsStd_DriverTable_Clear(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_DriverTable(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DriverTable
TPrsStd_DriverTable.InitStandardDrivers = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_InitStandardDrivers, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.AddDriver = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_AddDriver, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.FindDriver = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_FindDriver, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.RemoveDriver = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_RemoveDriver, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.Clear = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_Clear, None, TPrsStd_DriverTable)
TPrsStd_DriverTable_swigregister = _TPrsStd.TPrsStd_DriverTable_swigregister
TPrsStd_DriverTable_swigregister(TPrsStd_DriverTable)

def TPrsStd_DriverTable_Get(*args):
    """
    * Returns the static table. If it does not exist, creates it and fills it with standard drivers.

    :rtype: Handle_TPrsStd_DriverTable

    """
    return _TPrsStd.TPrsStd_DriverTable_Get(*args)

class Handle_TPrsStd_DriverTable(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_DriverTable_swiginit(self, _TPrsStd.new_Handle_TPrsStd_DriverTable(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_DriverTable_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_DriverTable
Handle_TPrsStd_DriverTable.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_DriverTable_Nullify, None, Handle_TPrsStd_DriverTable)
Handle_TPrsStd_DriverTable.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_DriverTable_IsNull, None, Handle_TPrsStd_DriverTable)
Handle_TPrsStd_DriverTable.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_DriverTable_GetObject, None, Handle_TPrsStd_DriverTable)
Handle_TPrsStd_DriverTable_swigregister = _TPrsStd.Handle_TPrsStd_DriverTable_swigregister
Handle_TPrsStd_DriverTable_swigregister(Handle_TPrsStd_DriverTable)

def Handle_TPrsStd_DriverTable_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_DriverTable_DownCast(AnObject)
Handle_TPrsStd_DriverTable_DownCast = _TPrsStd.Handle_TPrsStd_DriverTable_DownCast

class TPrsStd_AxisDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty axis driver.

        :rtype: None

        """
        _TPrsStd.TPrsStd_AxisDriver_swiginit(self, _TPrsStd.new_TPrsStd_AxisDriver(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_AxisDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AxisDriver
TPrsStd_AxisDriver_swigregister = _TPrsStd.TPrsStd_AxisDriver_swigregister
TPrsStd_AxisDriver_swigregister(TPrsStd_AxisDriver)

class Handle_TPrsStd_AxisDriver(Handle_TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_AxisDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_AxisDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_AxisDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_AxisDriver
Handle_TPrsStd_AxisDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_AxisDriver_Nullify, None, Handle_TPrsStd_AxisDriver)
Handle_TPrsStd_AxisDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_AxisDriver_IsNull, None, Handle_TPrsStd_AxisDriver)
Handle_TPrsStd_AxisDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_AxisDriver_GetObject, None, Handle_TPrsStd_AxisDriver)
Handle_TPrsStd_AxisDriver_swigregister = _TPrsStd.Handle_TPrsStd_AxisDriver_swigregister
Handle_TPrsStd_AxisDriver_swigregister(Handle_TPrsStd_AxisDriver)

def Handle_TPrsStd_AxisDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast(AnObject)
Handle_TPrsStd_AxisDriver_DownCast = _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast

class TPrsStd_ConstraintDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty constraint driver.

        :rtype: None

        """
        _TPrsStd.TPrsStd_ConstraintDriver_swiginit(self, _TPrsStd.new_TPrsStd_ConstraintDriver(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_ConstraintDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintDriver
TPrsStd_ConstraintDriver_swigregister = _TPrsStd.TPrsStd_ConstraintDriver_swigregister
TPrsStd_ConstraintDriver_swigregister(TPrsStd_ConstraintDriver)

class Handle_TPrsStd_ConstraintDriver(Handle_TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_ConstraintDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_ConstraintDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_ConstraintDriver
Handle_TPrsStd_ConstraintDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_ConstraintDriver_Nullify, None, Handle_TPrsStd_ConstraintDriver)
Handle_TPrsStd_ConstraintDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_ConstraintDriver_IsNull, None, Handle_TPrsStd_ConstraintDriver)
Handle_TPrsStd_ConstraintDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_ConstraintDriver_GetObject, None, Handle_TPrsStd_ConstraintDriver)
Handle_TPrsStd_ConstraintDriver_swigregister = _TPrsStd.Handle_TPrsStd_ConstraintDriver_swigregister
Handle_TPrsStd_ConstraintDriver_swigregister(Handle_TPrsStd_ConstraintDriver)

def Handle_TPrsStd_ConstraintDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast(AnObject)
Handle_TPrsStd_ConstraintDriver_DownCast = _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast

class TPrsStd_GeometryDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty geometry driver.

        :rtype: None

        """
        _TPrsStd.TPrsStd_GeometryDriver_swiginit(self, _TPrsStd.new_TPrsStd_GeometryDriver(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_GeometryDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_GeometryDriver
TPrsStd_GeometryDriver_swigregister = _TPrsStd.TPrsStd_GeometryDriver_swigregister
TPrsStd_GeometryDriver_swigregister(TPrsStd_GeometryDriver)

class Handle_TPrsStd_GeometryDriver(Handle_TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_GeometryDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_GeometryDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_GeometryDriver
Handle_TPrsStd_GeometryDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_GeometryDriver_Nullify, None, Handle_TPrsStd_GeometryDriver)
Handle_TPrsStd_GeometryDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_GeometryDriver_IsNull, None, Handle_TPrsStd_GeometryDriver)
Handle_TPrsStd_GeometryDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_GeometryDriver_GetObject, None, Handle_TPrsStd_GeometryDriver)
Handle_TPrsStd_GeometryDriver_swigregister = _TPrsStd.Handle_TPrsStd_GeometryDriver_swigregister
Handle_TPrsStd_GeometryDriver_swigregister(Handle_TPrsStd_GeometryDriver)

def Handle_TPrsStd_GeometryDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast(AnObject)
Handle_TPrsStd_GeometryDriver_DownCast = _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast

class TPrsStd_NamedShapeDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty named shape driver.

        :rtype: None

        """
        _TPrsStd.TPrsStd_NamedShapeDriver_swiginit(self, _TPrsStd.new_TPrsStd_NamedShapeDriver(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_NamedShapeDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_NamedShapeDriver
TPrsStd_NamedShapeDriver_swigregister = _TPrsStd.TPrsStd_NamedShapeDriver_swigregister
TPrsStd_NamedShapeDriver_swigregister(TPrsStd_NamedShapeDriver)

class Handle_TPrsStd_NamedShapeDriver(Handle_TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_NamedShapeDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_NamedShapeDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_NamedShapeDriver
Handle_TPrsStd_NamedShapeDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_NamedShapeDriver_Nullify, None, Handle_TPrsStd_NamedShapeDriver)
Handle_TPrsStd_NamedShapeDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsNull, None, Handle_TPrsStd_NamedShapeDriver)
Handle_TPrsStd_NamedShapeDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_NamedShapeDriver_GetObject, None, Handle_TPrsStd_NamedShapeDriver)
Handle_TPrsStd_NamedShapeDriver_swigregister = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_swigregister
Handle_TPrsStd_NamedShapeDriver_swigregister(Handle_TPrsStd_NamedShapeDriver)

def Handle_TPrsStd_NamedShapeDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast(AnObject)
Handle_TPrsStd_NamedShapeDriver_DownCast = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast

class TPrsStd_PlaneDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty plane driver.

        :rtype: None

        """
        _TPrsStd.TPrsStd_PlaneDriver_swiginit(self, _TPrsStd.new_TPrsStd_PlaneDriver(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_PlaneDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PlaneDriver
TPrsStd_PlaneDriver_swigregister = _TPrsStd.TPrsStd_PlaneDriver_swigregister
TPrsStd_PlaneDriver_swigregister(TPrsStd_PlaneDriver)

class Handle_TPrsStd_PlaneDriver(Handle_TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_PlaneDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_PlaneDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_PlaneDriver
Handle_TPrsStd_PlaneDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_PlaneDriver_Nullify, None, Handle_TPrsStd_PlaneDriver)
Handle_TPrsStd_PlaneDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_PlaneDriver_IsNull, None, Handle_TPrsStd_PlaneDriver)
Handle_TPrsStd_PlaneDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_PlaneDriver_GetObject, None, Handle_TPrsStd_PlaneDriver)
Handle_TPrsStd_PlaneDriver_swigregister = _TPrsStd.Handle_TPrsStd_PlaneDriver_swigregister
Handle_TPrsStd_PlaneDriver_swigregister(Handle_TPrsStd_PlaneDriver)

def Handle_TPrsStd_PlaneDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast(AnObject)
Handle_TPrsStd_PlaneDriver_DownCast = _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast

class TPrsStd_PointDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty point driver.

        :rtype: None

        """
        _TPrsStd.TPrsStd_PointDriver_swiginit(self, _TPrsStd.new_TPrsStd_PointDriver(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TPrsStd_PointDriver(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PointDriver
TPrsStd_PointDriver_swigregister = _TPrsStd.TPrsStd_PointDriver_swigregister
TPrsStd_PointDriver_swigregister(TPrsStd_PointDriver)

class Handle_TPrsStd_PointDriver(Handle_TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.Handle_TPrsStd_PointDriver_swiginit(self, _TPrsStd.new_Handle_TPrsStd_PointDriver(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_PointDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_PointDriver
Handle_TPrsStd_PointDriver.Nullify = new_instancemethod(_TPrsStd.Handle_TPrsStd_PointDriver_Nullify, None, Handle_TPrsStd_PointDriver)
Handle_TPrsStd_PointDriver.IsNull = new_instancemethod(_TPrsStd.Handle_TPrsStd_PointDriver_IsNull, None, Handle_TPrsStd_PointDriver)
Handle_TPrsStd_PointDriver.GetObject = new_instancemethod(_TPrsStd.Handle_TPrsStd_PointDriver_GetObject, None, Handle_TPrsStd_PointDriver)
Handle_TPrsStd_PointDriver_swigregister = _TPrsStd.Handle_TPrsStd_PointDriver_swigregister
Handle_TPrsStd_PointDriver_swigregister(Handle_TPrsStd_PointDriver)

def Handle_TPrsStd_PointDriver_DownCast(AnObject):
    return _TPrsStd.Handle_TPrsStd_PointDriver_DownCast(AnObject)
Handle_TPrsStd_PointDriver_DownCast = _TPrsStd.Handle_TPrsStd_PointDriver_DownCast



