# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _STEPSelections.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_STEPSelections', [dirname(__file__)])
        except ImportError:
            import _STEPSelections
            return _STEPSelections
        if fp is not None:
            try:
                _mod = imp.load_module('_STEPSelections', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _STEPSelections = swig_import_helper()
    del swig_import_helper
else:
    import _STEPSelections
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPSelections.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_STEPSelections.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_STEPSelections.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_STEPSelections.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_STEPSelections.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_STEPSelections.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_STEPSelections.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_STEPSelections.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_STEPSelections.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_STEPSelections.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_STEPSelections.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_STEPSelections.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_STEPSelections.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_STEPSelections.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_STEPSelections.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_STEPSelections.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_STEPSelections.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _STEPSelections.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.StepShape
import OCC.StepGeom
import OCC.StepRepr
import OCC.TCollection
import OCC.StepBasic
import OCC.TColStd
import OCC.Interface
import OCC.Message
import OCC.IFSelect
import OCC.Dico
import OCC.XSControl
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.TopTools

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class STEPSelections_AssemblyComponent(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param sdr:
        :type sdr: Handle_StepShape_ShapeDefinitionRepresentation &
        :param list:
        :type list: Handle_STEPSelections_HSequenceOfAssemblyLink &
        :rtype: None

        """
        _STEPSelections.STEPSelections_AssemblyComponent_swiginit(self, _STEPSelections.new_STEPSelections_AssemblyComponent(*args))

    def GetSDR(self, *args):
        """
        :rtype: Handle_StepShape_ShapeDefinitionRepresentation

        """
        return _STEPSelections.STEPSelections_AssemblyComponent_GetSDR(self, *args)


    def GetList(self, *args):
        """
        :rtype: Handle_STEPSelections_HSequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_AssemblyComponent_GetList(self, *args)


    def SetSDR(self, *args):
        """
        :param sdr:
        :type sdr: Handle_StepShape_ShapeDefinitionRepresentation &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyComponent_SetSDR(self, *args)


    def SetList(self, *args):
        """
        :param list:
        :type list: Handle_STEPSelections_HSequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyComponent_SetList(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_AssemblyComponent(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_AssemblyComponent
STEPSelections_AssemblyComponent.GetSDR = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_GetSDR, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent.GetList = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_GetList, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent.SetSDR = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_SetSDR, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent.SetList = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_SetList, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent_swigregister = _STEPSelections.STEPSelections_AssemblyComponent_swigregister
STEPSelections_AssemblyComponent_swigregister(STEPSelections_AssemblyComponent)

class Handle_STEPSelections_AssemblyComponent(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_AssemblyComponent_swiginit(self, _STEPSelections.new_Handle_STEPSelections_AssemblyComponent(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_AssemblyComponent_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_AssemblyComponent
Handle_STEPSelections_AssemblyComponent.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_AssemblyComponent_Nullify, None, Handle_STEPSelections_AssemblyComponent)
Handle_STEPSelections_AssemblyComponent.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_AssemblyComponent_IsNull, None, Handle_STEPSelections_AssemblyComponent)
Handle_STEPSelections_AssemblyComponent.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_AssemblyComponent_GetObject, None, Handle_STEPSelections_AssemblyComponent)
Handle_STEPSelections_AssemblyComponent_swigregister = _STEPSelections.Handle_STEPSelections_AssemblyComponent_swigregister
Handle_STEPSelections_AssemblyComponent_swigregister(Handle_STEPSelections_AssemblyComponent)

def Handle_STEPSelections_AssemblyComponent_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_AssemblyComponent_DownCast(AnObject)
Handle_STEPSelections_AssemblyComponent_DownCast = _STEPSelections.Handle_STEPSelections_AssemblyComponent_DownCast

class STEPSelections_AssemblyExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param G:
        :type G: Interface_Graph &
        :rtype: None

        """
        _STEPSelections.STEPSelections_AssemblyExplorer_swiginit(self, _STEPSelections.new_STEPSelections_AssemblyExplorer(*args))

    def Init(self, *args):
        """
        :param G:
        :type G: Interface_Graph &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_Init(self, *args)


    def DumpToString(self):
        """DumpToString(STEPSelections_AssemblyExplorer self) -> std::string"""
        return _STEPSelections.STEPSelections_AssemblyExplorer_DumpToString(self)


    def FindSDRWithProduct(self, *args):
        """
        :param product:
        :type product: Handle_StepBasic_ProductDefinition &
        :rtype: Handle_StepShape_ShapeDefinitionRepresentation

        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_FindSDRWithProduct(self, *args)


    def FillListWithGraph(self, *args):
        """
        :param cmp:
        :type cmp: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_FillListWithGraph(self, *args)


    def FindItemWithNAUO(self, *args):
        """
        :param nauo:
        :type nauo: Handle_StepRepr_NextAssemblyUsageOccurrence &
        :rtype: Handle_Standard_Transient

        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_FindItemWithNAUO(self, *args)


    def NbAssemblies(self, *args):
        """
        * Returns the number of root assemblies;

        :rtype: int

        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_NbAssemblies(self, *args)


    def Root(self, *args):
        """
        * Returns root of assenbly by its rank;

        :param rank: default value is 1
        :type rank: int
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_Root(self, *args)

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_AssemblyExplorer
STEPSelections_AssemblyExplorer.Init = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_Init, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.DumpToString = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_DumpToString, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.FindSDRWithProduct = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_FindSDRWithProduct, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.FillListWithGraph = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_FillListWithGraph, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.FindItemWithNAUO = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_FindItemWithNAUO, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.NbAssemblies = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_NbAssemblies, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.Root = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_Root, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer_swigregister = _STEPSelections.STEPSelections_AssemblyExplorer_swigregister
STEPSelections_AssemblyExplorer_swigregister(STEPSelections_AssemblyExplorer)

class STEPSelections_AssemblyLink(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param nauo:
        :type nauo: Handle_StepRepr_NextAssemblyUsageOccurrence &
        :param item:
        :type item: Handle_Standard_Transient &
        :param part:
        :type part: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        """
        _STEPSelections.STEPSelections_AssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_AssemblyLink(*args))

    def GetNAUO(self, *args):
        """
        :rtype: Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _STEPSelections.STEPSelections_AssemblyLink_GetNAUO(self, *args)


    def GetItem(self, *args):
        """
        :rtype: Handle_Standard_Transient

        """
        return _STEPSelections.STEPSelections_AssemblyLink_GetItem(self, *args)


    def GetComponent(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_AssemblyLink_GetComponent(self, *args)


    def SetNAUO(self, *args):
        """
        :param nauo:
        :type nauo: Handle_StepRepr_NextAssemblyUsageOccurrence &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyLink_SetNAUO(self, *args)


    def SetItem(self, *args):
        """
        :param item:
        :type item: Handle_Standard_Transient &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyLink_SetItem(self, *args)


    def SetComponent(self, *args):
        """
        :param part:
        :type part: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_AssemblyLink_SetComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_AssemblyLink(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_AssemblyLink
STEPSelections_AssemblyLink.GetNAUO = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_GetNAUO, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.GetItem = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_GetItem, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.GetComponent = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_GetComponent, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.SetNAUO = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_SetNAUO, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.SetItem = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_SetItem, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.SetComponent = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_SetComponent, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink_swigregister = _STEPSelections.STEPSelections_AssemblyLink_swigregister
STEPSelections_AssemblyLink_swigregister(STEPSelections_AssemblyLink)

class Handle_STEPSelections_AssemblyLink(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_AssemblyLink_swiginit(self, _STEPSelections.new_Handle_STEPSelections_AssemblyLink(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_AssemblyLink_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_AssemblyLink
Handle_STEPSelections_AssemblyLink.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_AssemblyLink_Nullify, None, Handle_STEPSelections_AssemblyLink)
Handle_STEPSelections_AssemblyLink.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_AssemblyLink_IsNull, None, Handle_STEPSelections_AssemblyLink)
Handle_STEPSelections_AssemblyLink.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_AssemblyLink_GetObject, None, Handle_STEPSelections_AssemblyLink)
Handle_STEPSelections_AssemblyLink_swigregister = _STEPSelections.Handle_STEPSelections_AssemblyLink_swigregister
Handle_STEPSelections_AssemblyLink_swigregister(Handle_STEPSelections_AssemblyLink)

def Handle_STEPSelections_AssemblyLink_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_AssemblyLink_DownCast(AnObject)
Handle_STEPSelections_AssemblyLink_DownCast = _STEPSelections.Handle_STEPSelections_AssemblyLink_DownCast

class STEPSelections_Counter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_Counter_swiginit(self, _STEPSelections.new_STEPSelections_Counter(*args))

    def Count(self, *args):
        """
        :param graph:
        :type graph: Interface_Graph &
        :param start:
        :type start: Handle_Standard_Transient &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_Counter_Count(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _STEPSelections.STEPSelections_Counter_Clear(self, *args)


    def NbInstancesOfFaces(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfFaces(self, *args)


    def NbInstancesOfShells(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfShells(self, *args)


    def NbInstancesOfSolids(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfSolids(self, *args)


    def NbInstancesOfEdges(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfEdges(self, *args)


    def NbInstancesOfWires(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfWires(self, *args)


    def NbSourceFaces(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbSourceFaces(self, *args)


    def NbSourceShells(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbSourceShells(self, *args)


    def NbSourceSolids(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbSourceSolids(self, *args)


    def NbSourceEdges(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbSourceEdges(self, *args)


    def NbSourceWires(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_Counter_NbSourceWires(self, *args)

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_Counter
STEPSelections_Counter.Count = new_instancemethod(_STEPSelections.STEPSelections_Counter_Count, None, STEPSelections_Counter)
STEPSelections_Counter.Clear = new_instancemethod(_STEPSelections.STEPSelections_Counter_Clear, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfFaces = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfFaces, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfShells = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfShells, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfSolids = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfSolids, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfEdges = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfEdges, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfWires = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfWires, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceFaces = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceFaces, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceShells = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceShells, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceSolids = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceSolids, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceEdges = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceEdges, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceWires = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceWires, None, STEPSelections_Counter)
STEPSelections_Counter_swigregister = _STEPSelections.STEPSelections_Counter_swigregister
STEPSelections_Counter_swigregister(STEPSelections_Counter)

class STEPSelections_HSequenceOfAssemblyLink(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_HSequenceOfAssemblyLink(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_STEPSelections_HSequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_STEPSelections_HSequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_STEPSelections_HSequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_STEPSelections_HSequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_STEPSelections_HSequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: STEPSelections_SequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: STEPSelections_SequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_STEPSelections_HSequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ShallowCopy(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_HSequenceOfAssemblyLink(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_HSequenceOfAssemblyLink
STEPSelections_HSequenceOfAssemblyLink.IsEmpty = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_IsEmpty, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Length = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Length, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Clear = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Clear, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Append = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Append, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Prepend = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Prepend, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Reverse = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Reverse, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.InsertBefore = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_InsertBefore, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.InsertAfter = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_InsertAfter, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Exchange = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Exchange, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Split = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Split, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.SetValue = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_SetValue, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Value = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Value, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.ChangeValue = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ChangeValue, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Remove = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Remove, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Sequence = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Sequence, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.ChangeSequence = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ChangeSequence, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.ShallowCopy = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ShallowCopy, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink_swigregister = _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_swigregister
STEPSelections_HSequenceOfAssemblyLink_swigregister(STEPSelections_HSequenceOfAssemblyLink)

class Handle_STEPSelections_HSequenceOfAssemblyLink(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_Handle_STEPSelections_HSequenceOfAssemblyLink(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_HSequenceOfAssemblyLink
Handle_STEPSelections_HSequenceOfAssemblyLink.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_Nullify, None, Handle_STEPSelections_HSequenceOfAssemblyLink)
Handle_STEPSelections_HSequenceOfAssemblyLink.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_IsNull, None, Handle_STEPSelections_HSequenceOfAssemblyLink)
Handle_STEPSelections_HSequenceOfAssemblyLink.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_GetObject, None, Handle_STEPSelections_HSequenceOfAssemblyLink)
Handle_STEPSelections_HSequenceOfAssemblyLink_swigregister = _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_swigregister
Handle_STEPSelections_HSequenceOfAssemblyLink_swigregister(Handle_STEPSelections_HSequenceOfAssemblyLink)

def Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast(AnObject)
Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast = _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast

class STEPSelections_SelectAssembly(OCC.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SelectAssembly_swiginit(self, _STEPSelections.new_STEPSelections_SelectAssembly(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SelectAssembly(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectAssembly
STEPSelections_SelectAssembly_swigregister = _STEPSelections.STEPSelections_SelectAssembly_swigregister
STEPSelections_SelectAssembly_swigregister(STEPSelections_SelectAssembly)

class Handle_STEPSelections_SelectAssembly(OCC.IFSelect.Handle_IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SelectAssembly_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SelectAssembly(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SelectAssembly_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SelectAssembly
Handle_STEPSelections_SelectAssembly.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectAssembly_Nullify, None, Handle_STEPSelections_SelectAssembly)
Handle_STEPSelections_SelectAssembly.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectAssembly_IsNull, None, Handle_STEPSelections_SelectAssembly)
Handle_STEPSelections_SelectAssembly.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectAssembly_GetObject, None, Handle_STEPSelections_SelectAssembly)
Handle_STEPSelections_SelectAssembly_swigregister = _STEPSelections.Handle_STEPSelections_SelectAssembly_swigregister
Handle_STEPSelections_SelectAssembly_swigregister(Handle_STEPSelections_SelectAssembly)

def Handle_STEPSelections_SelectAssembly_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SelectAssembly_DownCast(AnObject)
Handle_STEPSelections_SelectAssembly_DownCast = _STEPSelections.Handle_STEPSelections_SelectAssembly_DownCast

class STEPSelections_SelectDerived(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SelectDerived_swiginit(self, _STEPSelections.new_STEPSelections_SelectDerived(*args))

    def Matches(self, *args):
        """
        :param ent:
        :type ent: Handle_Standard_Transient &
        :param model:
        :type model: Handle_Interface_InterfaceModel &
        :param text:
        :type text: TCollection_AsciiString &
        :param exact:
        :type exact: bool
        :rtype: bool

        """
        return _STEPSelections.STEPSelections_SelectDerived_Matches(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SelectDerived(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectDerived
STEPSelections_SelectDerived.Matches = new_instancemethod(_STEPSelections.STEPSelections_SelectDerived_Matches, None, STEPSelections_SelectDerived)
STEPSelections_SelectDerived_swigregister = _STEPSelections.STEPSelections_SelectDerived_swigregister
STEPSelections_SelectDerived_swigregister(STEPSelections_SelectDerived)

class Handle_STEPSelections_SelectDerived(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SelectDerived_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SelectDerived(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SelectDerived_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SelectDerived
Handle_STEPSelections_SelectDerived.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectDerived_Nullify, None, Handle_STEPSelections_SelectDerived)
Handle_STEPSelections_SelectDerived.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectDerived_IsNull, None, Handle_STEPSelections_SelectDerived)
Handle_STEPSelections_SelectDerived.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectDerived_GetObject, None, Handle_STEPSelections_SelectDerived)
Handle_STEPSelections_SelectDerived_swigregister = _STEPSelections.Handle_STEPSelections_SelectDerived_swigregister
Handle_STEPSelections_SelectDerived_swigregister(Handle_STEPSelections_SelectDerived)

def Handle_STEPSelections_SelectDerived_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SelectDerived_DownCast(AnObject)
Handle_STEPSelections_SelectDerived_DownCast = _STEPSelections.Handle_STEPSelections_SelectDerived_DownCast

class STEPSelections_SelectFaces(OCC.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SelectFaces_swiginit(self, _STEPSelections.new_STEPSelections_SelectFaces(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SelectFaces(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectFaces
STEPSelections_SelectFaces_swigregister = _STEPSelections.STEPSelections_SelectFaces_swigregister
STEPSelections_SelectFaces_swigregister(STEPSelections_SelectFaces)

class Handle_STEPSelections_SelectFaces(OCC.IFSelect.Handle_IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SelectFaces_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SelectFaces(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SelectFaces_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SelectFaces
Handle_STEPSelections_SelectFaces.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectFaces_Nullify, None, Handle_STEPSelections_SelectFaces)
Handle_STEPSelections_SelectFaces.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectFaces_IsNull, None, Handle_STEPSelections_SelectFaces)
Handle_STEPSelections_SelectFaces.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectFaces_GetObject, None, Handle_STEPSelections_SelectFaces)
Handle_STEPSelections_SelectFaces_swigregister = _STEPSelections.Handle_STEPSelections_SelectFaces_swigregister
Handle_STEPSelections_SelectFaces_swigregister(Handle_STEPSelections_SelectFaces)

def Handle_STEPSelections_SelectFaces_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SelectFaces_DownCast(AnObject)
Handle_STEPSelections_SelectFaces_DownCast = _STEPSelections.Handle_STEPSelections_SelectFaces_DownCast

class STEPSelections_SelectForTransfer(OCC.XSControl.XSControl_SelectForTransfer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param TR:
        :type TR: Handle_XSControl_TransferReader &
        :rtype: None

        """
        _STEPSelections.STEPSelections_SelectForTransfer_swiginit(self, _STEPSelections.new_STEPSelections_SelectForTransfer(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SelectForTransfer(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectForTransfer
STEPSelections_SelectForTransfer_swigregister = _STEPSelections.STEPSelections_SelectForTransfer_swigregister
STEPSelections_SelectForTransfer_swigregister(STEPSelections_SelectForTransfer)

class Handle_STEPSelections_SelectForTransfer(OCC.XSControl.Handle_XSControl_SelectForTransfer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SelectForTransfer_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SelectForTransfer(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SelectForTransfer_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SelectForTransfer
Handle_STEPSelections_SelectForTransfer.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectForTransfer_Nullify, None, Handle_STEPSelections_SelectForTransfer)
Handle_STEPSelections_SelectForTransfer.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectForTransfer_IsNull, None, Handle_STEPSelections_SelectForTransfer)
Handle_STEPSelections_SelectForTransfer.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectForTransfer_GetObject, None, Handle_STEPSelections_SelectForTransfer)
Handle_STEPSelections_SelectForTransfer_swigregister = _STEPSelections.Handle_STEPSelections_SelectForTransfer_swigregister
Handle_STEPSelections_SelectForTransfer_swigregister(Handle_STEPSelections_SelectForTransfer)

def Handle_STEPSelections_SelectForTransfer_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SelectForTransfer_DownCast(AnObject)
Handle_STEPSelections_SelectForTransfer_DownCast = _STEPSelections.Handle_STEPSelections_SelectForTransfer_DownCast

class STEPSelections_SelectGSCurves(OCC.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SelectGSCurves_swiginit(self, _STEPSelections.new_STEPSelections_SelectGSCurves(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SelectGSCurves(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectGSCurves
STEPSelections_SelectGSCurves_swigregister = _STEPSelections.STEPSelections_SelectGSCurves_swigregister
STEPSelections_SelectGSCurves_swigregister(STEPSelections_SelectGSCurves)

class Handle_STEPSelections_SelectGSCurves(OCC.IFSelect.Handle_IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SelectGSCurves_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SelectGSCurves(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SelectGSCurves_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SelectGSCurves
Handle_STEPSelections_SelectGSCurves.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectGSCurves_Nullify, None, Handle_STEPSelections_SelectGSCurves)
Handle_STEPSelections_SelectGSCurves.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectGSCurves_IsNull, None, Handle_STEPSelections_SelectGSCurves)
Handle_STEPSelections_SelectGSCurves.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectGSCurves_GetObject, None, Handle_STEPSelections_SelectGSCurves)
Handle_STEPSelections_SelectGSCurves_swigregister = _STEPSelections.Handle_STEPSelections_SelectGSCurves_swigregister
Handle_STEPSelections_SelectGSCurves_swigregister(Handle_STEPSelections_SelectGSCurves)

def Handle_STEPSelections_SelectGSCurves_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SelectGSCurves_DownCast(AnObject)
Handle_STEPSelections_SelectGSCurves_DownCast = _STEPSelections.Handle_STEPSelections_SelectGSCurves_DownCast

class STEPSelections_SelectInstances(OCC.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SelectInstances_swiginit(self, _STEPSelections.new_STEPSelections_SelectInstances(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SelectInstances(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectInstances
STEPSelections_SelectInstances_swigregister = _STEPSelections.STEPSelections_SelectInstances_swigregister
STEPSelections_SelectInstances_swigregister(STEPSelections_SelectInstances)

class Handle_STEPSelections_SelectInstances(OCC.IFSelect.Handle_IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SelectInstances_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SelectInstances(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SelectInstances_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SelectInstances
Handle_STEPSelections_SelectInstances.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectInstances_Nullify, None, Handle_STEPSelections_SelectInstances)
Handle_STEPSelections_SelectInstances.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectInstances_IsNull, None, Handle_STEPSelections_SelectInstances)
Handle_STEPSelections_SelectInstances.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SelectInstances_GetObject, None, Handle_STEPSelections_SelectInstances)
Handle_STEPSelections_SelectInstances_swigregister = _STEPSelections.Handle_STEPSelections_SelectInstances_swigregister
Handle_STEPSelections_SelectInstances_swigregister(Handle_STEPSelections_SelectInstances)

def Handle_STEPSelections_SelectInstances_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SelectInstances_DownCast(AnObject)
Handle_STEPSelections_SelectInstances_DownCast = _STEPSelections.Handle_STEPSelections_SelectInstances_DownCast

class STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_STEPSelections_AssemblyComponent &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swiginit(self, _STEPSelections.new_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent(*args))

    def Value(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent
STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent.Value = new_instancemethod(_STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_Value, None, STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent)
STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swigregister = _STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swigregister
STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swigregister(STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent)

class Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_Nullify, None, Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_IsNull, None, Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_GetObject, None, Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swigregister = _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swigregister
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_swigregister(Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent)

def Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_DownCast(AnObject)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_DownCast = _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyComponent_DownCast

class STEPSelections_SequenceNodeOfSequenceOfAssemblyLink(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_STEPSelections_AssemblyLink &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink(*args))

    def Value(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink
STEPSelections_SequenceNodeOfSequenceOfAssemblyLink.Value = new_instancemethod(_STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_Value, None, STEPSelections_SequenceNodeOfSequenceOfAssemblyLink)
STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swigregister = _STEPSelections.STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swigregister
STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swigregister(STEPSelections_SequenceNodeOfSequenceOfAssemblyLink)

class Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_DownCast)
    __swig_destroy__ = _STEPSelections.delete_Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink.Nullify = new_instancemethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_Nullify, None, Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink.IsNull = new_instancemethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_IsNull, None, Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink.GetObject = new_instancemethod(_STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_GetObject, None, Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swigregister = _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swigregister
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_swigregister(Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink)

def Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_DownCast(AnObject):
    return _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_DownCast(AnObject)
Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_DownCast = _STEPSelections.Handle_STEPSelections_SequenceNodeOfSequenceOfAssemblyLink_DownCast

class STEPSelections_SequenceOfAssemblyComponent(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_swiginit(self, _STEPSelections.new_STEPSelections_SequenceOfAssemblyComponent(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: STEPSelections_SequenceOfAssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: STEPSelections_SequenceOfAssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        :param S:
        :type S: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        :param S:
        :type S: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: STEPSelections_SequenceOfAssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_STEPSelections_AssemblyComponent &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_STEPSelections_AssemblyComponent

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Remove(self, *args)

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SequenceOfAssemblyComponent
STEPSelections_SequenceOfAssemblyComponent.Clear = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Clear, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Assign = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Assign, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Set = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Set, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Append = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Append, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Prepend = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Prepend, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.InsertBefore = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_InsertBefore, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.InsertAfter = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_InsertAfter, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.First = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_First, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Last = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Last, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Split = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Split, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Value = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Value, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.SetValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_SetValue, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.ChangeValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_ChangeValue, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Remove = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Remove, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent_swigregister = _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_swigregister
STEPSelections_SequenceOfAssemblyComponent_swigregister(STEPSelections_SequenceOfAssemblyComponent)

class STEPSelections_SequenceOfAssemblyLink(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _STEPSelections.STEPSelections_SequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_SequenceOfAssemblyLink(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: STEPSelections_SequenceOfAssemblyLink &
        :rtype: STEPSelections_SequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: STEPSelections_SequenceOfAssemblyLink &
        :rtype: STEPSelections_SequenceOfAssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param S:
        :type S: STEPSelections_SequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param S:
        :type S: STEPSelections_SequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: STEPSelections_SequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: STEPSelections_SequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: STEPSelections_SequenceOfAssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_STEPSelections_AssemblyLink &
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_STEPSelections_AssemblyLink

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_Remove(self, *args)

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SequenceOfAssemblyLink
STEPSelections_SequenceOfAssemblyLink.Clear = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Clear, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Assign = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Assign, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Set = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Set, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Append = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Append, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Prepend = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Prepend, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.InsertBefore = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_InsertBefore, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.InsertAfter = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_InsertAfter, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.First = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_First, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Last = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Last, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Split = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Split, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Value = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Value, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.SetValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_SetValue, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.ChangeValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_ChangeValue, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Remove = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Remove, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink_swigregister = _STEPSelections.STEPSelections_SequenceOfAssemblyLink_swigregister
STEPSelections_SequenceOfAssemblyLink_swigregister(STEPSelections_SequenceOfAssemblyLink)



