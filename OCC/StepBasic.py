# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepBasic.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepBasic', [dirname(__file__)])
        except ImportError:
            import _StepBasic
            return _StepBasic
        if fp is not None:
            try:
                _mod = imp.load_module('_StepBasic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StepBasic = swig_import_helper()
    del swig_import_helper
else:
    import _StepBasic
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepBasic.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepBasic.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepBasic.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepBasic.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepBasic.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepBasic.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepBasic.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepBasic.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepBasic.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepBasic.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepBasic.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepBasic.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepBasic.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepBasic.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepBasic.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepBasic.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepBasic.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepBasic.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TColStd
import OCC.Interface
import OCC.Message

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass


_StepBasic.StepBasic_aobAhead_swigconstant(_StepBasic)
StepBasic_aobAhead = _StepBasic.StepBasic_aobAhead

_StepBasic.StepBasic_aobExact_swigconstant(_StepBasic)
StepBasic_aobExact = _StepBasic.StepBasic_aobExact

_StepBasic.StepBasic_aobBehind_swigconstant(_StepBasic)
StepBasic_aobBehind = _StepBasic.StepBasic_aobBehind

_StepBasic.StepBasic_spExa_swigconstant(_StepBasic)
StepBasic_spExa = _StepBasic.StepBasic_spExa

_StepBasic.StepBasic_spPeta_swigconstant(_StepBasic)
StepBasic_spPeta = _StepBasic.StepBasic_spPeta

_StepBasic.StepBasic_spTera_swigconstant(_StepBasic)
StepBasic_spTera = _StepBasic.StepBasic_spTera

_StepBasic.StepBasic_spGiga_swigconstant(_StepBasic)
StepBasic_spGiga = _StepBasic.StepBasic_spGiga

_StepBasic.StepBasic_spMega_swigconstant(_StepBasic)
StepBasic_spMega = _StepBasic.StepBasic_spMega

_StepBasic.StepBasic_spKilo_swigconstant(_StepBasic)
StepBasic_spKilo = _StepBasic.StepBasic_spKilo

_StepBasic.StepBasic_spHecto_swigconstant(_StepBasic)
StepBasic_spHecto = _StepBasic.StepBasic_spHecto

_StepBasic.StepBasic_spDeca_swigconstant(_StepBasic)
StepBasic_spDeca = _StepBasic.StepBasic_spDeca

_StepBasic.StepBasic_spDeci_swigconstant(_StepBasic)
StepBasic_spDeci = _StepBasic.StepBasic_spDeci

_StepBasic.StepBasic_spCenti_swigconstant(_StepBasic)
StepBasic_spCenti = _StepBasic.StepBasic_spCenti

_StepBasic.StepBasic_spMilli_swigconstant(_StepBasic)
StepBasic_spMilli = _StepBasic.StepBasic_spMilli

_StepBasic.StepBasic_spMicro_swigconstant(_StepBasic)
StepBasic_spMicro = _StepBasic.StepBasic_spMicro

_StepBasic.StepBasic_spNano_swigconstant(_StepBasic)
StepBasic_spNano = _StepBasic.StepBasic_spNano

_StepBasic.StepBasic_spPico_swigconstant(_StepBasic)
StepBasic_spPico = _StepBasic.StepBasic_spPico

_StepBasic.StepBasic_spFemto_swigconstant(_StepBasic)
StepBasic_spFemto = _StepBasic.StepBasic_spFemto

_StepBasic.StepBasic_spAtto_swigconstant(_StepBasic)
StepBasic_spAtto = _StepBasic.StepBasic_spAtto

_StepBasic.StepBasic_sunMetre_swigconstant(_StepBasic)
StepBasic_sunMetre = _StepBasic.StepBasic_sunMetre

_StepBasic.StepBasic_sunGram_swigconstant(_StepBasic)
StepBasic_sunGram = _StepBasic.StepBasic_sunGram

_StepBasic.StepBasic_sunSecond_swigconstant(_StepBasic)
StepBasic_sunSecond = _StepBasic.StepBasic_sunSecond

_StepBasic.StepBasic_sunAmpere_swigconstant(_StepBasic)
StepBasic_sunAmpere = _StepBasic.StepBasic_sunAmpere

_StepBasic.StepBasic_sunKelvin_swigconstant(_StepBasic)
StepBasic_sunKelvin = _StepBasic.StepBasic_sunKelvin

_StepBasic.StepBasic_sunMole_swigconstant(_StepBasic)
StepBasic_sunMole = _StepBasic.StepBasic_sunMole

_StepBasic.StepBasic_sunCandela_swigconstant(_StepBasic)
StepBasic_sunCandela = _StepBasic.StepBasic_sunCandela

_StepBasic.StepBasic_sunRadian_swigconstant(_StepBasic)
StepBasic_sunRadian = _StepBasic.StepBasic_sunRadian

_StepBasic.StepBasic_sunSteradian_swigconstant(_StepBasic)
StepBasic_sunSteradian = _StepBasic.StepBasic_sunSteradian

_StepBasic.StepBasic_sunHertz_swigconstant(_StepBasic)
StepBasic_sunHertz = _StepBasic.StepBasic_sunHertz

_StepBasic.StepBasic_sunNewton_swigconstant(_StepBasic)
StepBasic_sunNewton = _StepBasic.StepBasic_sunNewton

_StepBasic.StepBasic_sunPascal_swigconstant(_StepBasic)
StepBasic_sunPascal = _StepBasic.StepBasic_sunPascal

_StepBasic.StepBasic_sunJoule_swigconstant(_StepBasic)
StepBasic_sunJoule = _StepBasic.StepBasic_sunJoule

_StepBasic.StepBasic_sunWatt_swigconstant(_StepBasic)
StepBasic_sunWatt = _StepBasic.StepBasic_sunWatt

_StepBasic.StepBasic_sunCoulomb_swigconstant(_StepBasic)
StepBasic_sunCoulomb = _StepBasic.StepBasic_sunCoulomb

_StepBasic.StepBasic_sunVolt_swigconstant(_StepBasic)
StepBasic_sunVolt = _StepBasic.StepBasic_sunVolt

_StepBasic.StepBasic_sunFarad_swigconstant(_StepBasic)
StepBasic_sunFarad = _StepBasic.StepBasic_sunFarad

_StepBasic.StepBasic_sunOhm_swigconstant(_StepBasic)
StepBasic_sunOhm = _StepBasic.StepBasic_sunOhm

_StepBasic.StepBasic_sunSiemens_swigconstant(_StepBasic)
StepBasic_sunSiemens = _StepBasic.StepBasic_sunSiemens

_StepBasic.StepBasic_sunWeber_swigconstant(_StepBasic)
StepBasic_sunWeber = _StepBasic.StepBasic_sunWeber

_StepBasic.StepBasic_sunTesla_swigconstant(_StepBasic)
StepBasic_sunTesla = _StepBasic.StepBasic_sunTesla

_StepBasic.StepBasic_sunHenry_swigconstant(_StepBasic)
StepBasic_sunHenry = _StepBasic.StepBasic_sunHenry

_StepBasic.StepBasic_sunDegreeCelsius_swigconstant(_StepBasic)
StepBasic_sunDegreeCelsius = _StepBasic.StepBasic_sunDegreeCelsius

_StepBasic.StepBasic_sunLumen_swigconstant(_StepBasic)
StepBasic_sunLumen = _StepBasic.StepBasic_sunLumen

_StepBasic.StepBasic_sunLux_swigconstant(_StepBasic)
StepBasic_sunLux = _StepBasic.StepBasic_sunLux

_StepBasic.StepBasic_sunBecquerel_swigconstant(_StepBasic)
StepBasic_sunBecquerel = _StepBasic.StepBasic_sunBecquerel

_StepBasic.StepBasic_sunGray_swigconstant(_StepBasic)
StepBasic_sunGray = _StepBasic.StepBasic_sunGray

_StepBasic.StepBasic_sunSievert_swigconstant(_StepBasic)
StepBasic_sunSievert = _StepBasic.StepBasic_sunSievert

_StepBasic.StepBasic_sMade_swigconstant(_StepBasic)
StepBasic_sMade = _StepBasic.StepBasic_sMade

_StepBasic.StepBasic_sBought_swigconstant(_StepBasic)
StepBasic_sBought = _StepBasic.StepBasic_sBought

_StepBasic.StepBasic_sNotKnown_swigconstant(_StepBasic)
StepBasic_sNotKnown = _StepBasic.StepBasic_sNotKnown
class StepBasic_Action(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_Action_swiginit(self, _StepBasic.new_StepBasic_Action(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aChosenMethod:
        :type aChosenMethod: Handle_StepBasic_ActionMethod &
        :rtype: None

        """
        return _StepBasic.StepBasic_Action_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Action_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Action_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Action_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Action_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_Action_HasDescription(self, *args)


    def ChosenMethod(self, *args):
        """
        * Returns field ChosenMethod

        :rtype: Handle_StepBasic_ActionMethod

        """
        return _StepBasic.StepBasic_Action_ChosenMethod(self, *args)


    def SetChosenMethod(self, *args):
        """
        * Set field ChosenMethod

        :param ChosenMethod:
        :type ChosenMethod: Handle_StepBasic_ActionMethod &
        :rtype: None

        """
        return _StepBasic.StepBasic_Action_SetChosenMethod(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Action(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Action
StepBasic_Action.Init = new_instancemethod(_StepBasic.StepBasic_Action_Init, None, StepBasic_Action)
StepBasic_Action.Name = new_instancemethod(_StepBasic.StepBasic_Action_Name, None, StepBasic_Action)
StepBasic_Action.SetName = new_instancemethod(_StepBasic.StepBasic_Action_SetName, None, StepBasic_Action)
StepBasic_Action.Description = new_instancemethod(_StepBasic.StepBasic_Action_Description, None, StepBasic_Action)
StepBasic_Action.SetDescription = new_instancemethod(_StepBasic.StepBasic_Action_SetDescription, None, StepBasic_Action)
StepBasic_Action.HasDescription = new_instancemethod(_StepBasic.StepBasic_Action_HasDescription, None, StepBasic_Action)
StepBasic_Action.ChosenMethod = new_instancemethod(_StepBasic.StepBasic_Action_ChosenMethod, None, StepBasic_Action)
StepBasic_Action.SetChosenMethod = new_instancemethod(_StepBasic.StepBasic_Action_SetChosenMethod, None, StepBasic_Action)
StepBasic_Action_swigregister = _StepBasic.StepBasic_Action_swigregister
StepBasic_Action_swigregister(StepBasic_Action)

class Handle_StepBasic_Action(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Action_swiginit(self, _StepBasic.new_Handle_StepBasic_Action(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Action_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Action
Handle_StepBasic_Action.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Action_Nullify, None, Handle_StepBasic_Action)
Handle_StepBasic_Action.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Action_IsNull, None, Handle_StepBasic_Action)
Handle_StepBasic_Action.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Action_GetObject, None, Handle_StepBasic_Action)
Handle_StepBasic_Action_swigregister = _StepBasic.Handle_StepBasic_Action_swigregister
Handle_StepBasic_Action_swigregister(Handle_StepBasic_Action)

def Handle_StepBasic_Action_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Action_DownCast(AnObject)
Handle_StepBasic_Action_DownCast = _StepBasic.Handle_StepBasic_Action_DownCast

class StepBasic_ActionAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ActionAssignment_swiginit(self, _StepBasic.new_StepBasic_ActionAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedAction:
        :type aAssignedAction: Handle_StepBasic_Action &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionAssignment_Init(self, *args)


    def AssignedAction(self, *args):
        """
        * Returns field AssignedAction

        :rtype: Handle_StepBasic_Action

        """
        return _StepBasic.StepBasic_ActionAssignment_AssignedAction(self, *args)


    def SetAssignedAction(self, *args):
        """
        * Set field AssignedAction

        :param AssignedAction:
        :type AssignedAction: Handle_StepBasic_Action &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionAssignment_SetAssignedAction(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ActionAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionAssignment
StepBasic_ActionAssignment.Init = new_instancemethod(_StepBasic.StepBasic_ActionAssignment_Init, None, StepBasic_ActionAssignment)
StepBasic_ActionAssignment.AssignedAction = new_instancemethod(_StepBasic.StepBasic_ActionAssignment_AssignedAction, None, StepBasic_ActionAssignment)
StepBasic_ActionAssignment.SetAssignedAction = new_instancemethod(_StepBasic.StepBasic_ActionAssignment_SetAssignedAction, None, StepBasic_ActionAssignment)
StepBasic_ActionAssignment_swigregister = _StepBasic.StepBasic_ActionAssignment_swigregister
StepBasic_ActionAssignment_swigregister(StepBasic_ActionAssignment)

class Handle_StepBasic_ActionAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ActionAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_ActionAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ActionAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ActionAssignment
Handle_StepBasic_ActionAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ActionAssignment_Nullify, None, Handle_StepBasic_ActionAssignment)
Handle_StepBasic_ActionAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ActionAssignment_IsNull, None, Handle_StepBasic_ActionAssignment)
Handle_StepBasic_ActionAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ActionAssignment_GetObject, None, Handle_StepBasic_ActionAssignment)
Handle_StepBasic_ActionAssignment_swigregister = _StepBasic.Handle_StepBasic_ActionAssignment_swigregister
Handle_StepBasic_ActionAssignment_swigregister(Handle_StepBasic_ActionAssignment)

def Handle_StepBasic_ActionAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ActionAssignment_DownCast(AnObject)
Handle_StepBasic_ActionAssignment_DownCast = _StepBasic.Handle_StepBasic_ActionAssignment_DownCast

class StepBasic_ActionMethod(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ActionMethod_swiginit(self, _StepBasic.new_StepBasic_ActionMethod(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aConsequence:
        :type aConsequence: Handle_TCollection_HAsciiString &
        :param aPurpose:
        :type aPurpose: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionMethod_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ActionMethod_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionMethod_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ActionMethod_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionMethod_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_ActionMethod_HasDescription(self, *args)


    def Consequence(self, *args):
        """
        * Returns field Consequence

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ActionMethod_Consequence(self, *args)


    def SetConsequence(self, *args):
        """
        * Set field Consequence

        :param Consequence:
        :type Consequence: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionMethod_SetConsequence(self, *args)


    def Purpose(self, *args):
        """
        * Returns field Purpose

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ActionMethod_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        * Set field Purpose

        :param Purpose:
        :type Purpose: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionMethod_SetPurpose(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ActionMethod(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionMethod
StepBasic_ActionMethod.Init = new_instancemethod(_StepBasic.StepBasic_ActionMethod_Init, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.Name = new_instancemethod(_StepBasic.StepBasic_ActionMethod_Name, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.SetName = new_instancemethod(_StepBasic.StepBasic_ActionMethod_SetName, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.Description = new_instancemethod(_StepBasic.StepBasic_ActionMethod_Description, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.SetDescription = new_instancemethod(_StepBasic.StepBasic_ActionMethod_SetDescription, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.HasDescription = new_instancemethod(_StepBasic.StepBasic_ActionMethod_HasDescription, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.Consequence = new_instancemethod(_StepBasic.StepBasic_ActionMethod_Consequence, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.SetConsequence = new_instancemethod(_StepBasic.StepBasic_ActionMethod_SetConsequence, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.Purpose = new_instancemethod(_StepBasic.StepBasic_ActionMethod_Purpose, None, StepBasic_ActionMethod)
StepBasic_ActionMethod.SetPurpose = new_instancemethod(_StepBasic.StepBasic_ActionMethod_SetPurpose, None, StepBasic_ActionMethod)
StepBasic_ActionMethod_swigregister = _StepBasic.StepBasic_ActionMethod_swigregister
StepBasic_ActionMethod_swigregister(StepBasic_ActionMethod)

class Handle_StepBasic_ActionMethod(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ActionMethod_swiginit(self, _StepBasic.new_Handle_StepBasic_ActionMethod(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ActionMethod_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ActionMethod
Handle_StepBasic_ActionMethod.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ActionMethod_Nullify, None, Handle_StepBasic_ActionMethod)
Handle_StepBasic_ActionMethod.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ActionMethod_IsNull, None, Handle_StepBasic_ActionMethod)
Handle_StepBasic_ActionMethod.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ActionMethod_GetObject, None, Handle_StepBasic_ActionMethod)
Handle_StepBasic_ActionMethod_swigregister = _StepBasic.Handle_StepBasic_ActionMethod_swigregister
Handle_StepBasic_ActionMethod_swigregister(Handle_StepBasic_ActionMethod)

def Handle_StepBasic_ActionMethod_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ActionMethod_DownCast(AnObject)
Handle_StepBasic_ActionMethod_DownCast = _StepBasic.Handle_StepBasic_ActionMethod_DownCast

class StepBasic_ActionRequestAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ActionRequestAssignment_swiginit(self, _StepBasic.new_StepBasic_ActionRequestAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedActionRequest:
        :type aAssignedActionRequest: Handle_StepBasic_VersionedActionRequest &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionRequestAssignment_Init(self, *args)


    def AssignedActionRequest(self, *args):
        """
        * Returns field AssignedActionRequest

        :rtype: Handle_StepBasic_VersionedActionRequest

        """
        return _StepBasic.StepBasic_ActionRequestAssignment_AssignedActionRequest(self, *args)


    def SetAssignedActionRequest(self, *args):
        """
        * Set field AssignedActionRequest

        :param AssignedActionRequest:
        :type AssignedActionRequest: Handle_StepBasic_VersionedActionRequest &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionRequestAssignment_SetAssignedActionRequest(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ActionRequestAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionRequestAssignment
StepBasic_ActionRequestAssignment.Init = new_instancemethod(_StepBasic.StepBasic_ActionRequestAssignment_Init, None, StepBasic_ActionRequestAssignment)
StepBasic_ActionRequestAssignment.AssignedActionRequest = new_instancemethod(_StepBasic.StepBasic_ActionRequestAssignment_AssignedActionRequest, None, StepBasic_ActionRequestAssignment)
StepBasic_ActionRequestAssignment.SetAssignedActionRequest = new_instancemethod(_StepBasic.StepBasic_ActionRequestAssignment_SetAssignedActionRequest, None, StepBasic_ActionRequestAssignment)
StepBasic_ActionRequestAssignment_swigregister = _StepBasic.StepBasic_ActionRequestAssignment_swigregister
StepBasic_ActionRequestAssignment_swigregister(StepBasic_ActionRequestAssignment)

class Handle_StepBasic_ActionRequestAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ActionRequestAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_ActionRequestAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ActionRequestAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ActionRequestAssignment
Handle_StepBasic_ActionRequestAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ActionRequestAssignment_Nullify, None, Handle_StepBasic_ActionRequestAssignment)
Handle_StepBasic_ActionRequestAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ActionRequestAssignment_IsNull, None, Handle_StepBasic_ActionRequestAssignment)
Handle_StepBasic_ActionRequestAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ActionRequestAssignment_GetObject, None, Handle_StepBasic_ActionRequestAssignment)
Handle_StepBasic_ActionRequestAssignment_swigregister = _StepBasic.Handle_StepBasic_ActionRequestAssignment_swigregister
Handle_StepBasic_ActionRequestAssignment_swigregister(Handle_StepBasic_ActionRequestAssignment)

def Handle_StepBasic_ActionRequestAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ActionRequestAssignment_DownCast(AnObject)
Handle_StepBasic_ActionRequestAssignment_DownCast = _StepBasic.Handle_StepBasic_ActionRequestAssignment_DownCast

class StepBasic_ActionRequestSolution(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ActionRequestSolution_swiginit(self, _StepBasic.new_StepBasic_ActionRequestSolution(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aMethod:
        :type aMethod: Handle_StepBasic_ActionMethod &
        :param aRequest:
        :type aRequest: Handle_StepBasic_VersionedActionRequest &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionRequestSolution_Init(self, *args)


    def Method(self, *args):
        """
        * Returns field Method

        :rtype: Handle_StepBasic_ActionMethod

        """
        return _StepBasic.StepBasic_ActionRequestSolution_Method(self, *args)


    def SetMethod(self, *args):
        """
        * Set field Method

        :param Method:
        :type Method: Handle_StepBasic_ActionMethod &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionRequestSolution_SetMethod(self, *args)


    def Request(self, *args):
        """
        * Returns field Request

        :rtype: Handle_StepBasic_VersionedActionRequest

        """
        return _StepBasic.StepBasic_ActionRequestSolution_Request(self, *args)


    def SetRequest(self, *args):
        """
        * Set field Request

        :param Request:
        :type Request: Handle_StepBasic_VersionedActionRequest &
        :rtype: None

        """
        return _StepBasic.StepBasic_ActionRequestSolution_SetRequest(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ActionRequestSolution(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionRequestSolution
StepBasic_ActionRequestSolution.Init = new_instancemethod(_StepBasic.StepBasic_ActionRequestSolution_Init, None, StepBasic_ActionRequestSolution)
StepBasic_ActionRequestSolution.Method = new_instancemethod(_StepBasic.StepBasic_ActionRequestSolution_Method, None, StepBasic_ActionRequestSolution)
StepBasic_ActionRequestSolution.SetMethod = new_instancemethod(_StepBasic.StepBasic_ActionRequestSolution_SetMethod, None, StepBasic_ActionRequestSolution)
StepBasic_ActionRequestSolution.Request = new_instancemethod(_StepBasic.StepBasic_ActionRequestSolution_Request, None, StepBasic_ActionRequestSolution)
StepBasic_ActionRequestSolution.SetRequest = new_instancemethod(_StepBasic.StepBasic_ActionRequestSolution_SetRequest, None, StepBasic_ActionRequestSolution)
StepBasic_ActionRequestSolution_swigregister = _StepBasic.StepBasic_ActionRequestSolution_swigregister
StepBasic_ActionRequestSolution_swigregister(StepBasic_ActionRequestSolution)

class Handle_StepBasic_ActionRequestSolution(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ActionRequestSolution_swiginit(self, _StepBasic.new_Handle_StepBasic_ActionRequestSolution(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ActionRequestSolution_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ActionRequestSolution
Handle_StepBasic_ActionRequestSolution.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ActionRequestSolution_Nullify, None, Handle_StepBasic_ActionRequestSolution)
Handle_StepBasic_ActionRequestSolution.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ActionRequestSolution_IsNull, None, Handle_StepBasic_ActionRequestSolution)
Handle_StepBasic_ActionRequestSolution.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ActionRequestSolution_GetObject, None, Handle_StepBasic_ActionRequestSolution)
Handle_StepBasic_ActionRequestSolution_swigregister = _StepBasic.Handle_StepBasic_ActionRequestSolution_swigregister
Handle_StepBasic_ActionRequestSolution_swigregister(Handle_StepBasic_ActionRequestSolution)

def Handle_StepBasic_ActionRequestSolution_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ActionRequestSolution_DownCast(AnObject)
Handle_StepBasic_ActionRequestSolution_DownCast = _StepBasic.Handle_StepBasic_ActionRequestSolution_DownCast

class StepBasic_Address(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Address

        :rtype: None

        """
        _StepBasic.StepBasic_Address_swiginit(self, _StepBasic.new_StepBasic_Address(*args))

    def Init(self, *args):
        """
        :param hasAinternalLocation:
        :type hasAinternalLocation: bool
        :param aInternalLocation:
        :type aInternalLocation: Handle_TCollection_HAsciiString &
        :param hasAstreetNumber:
        :type hasAstreetNumber: bool
        :param aStreetNumber:
        :type aStreetNumber: Handle_TCollection_HAsciiString &
        :param hasAstreet:
        :type hasAstreet: bool
        :param aStreet:
        :type aStreet: Handle_TCollection_HAsciiString &
        :param hasApostalBox:
        :type hasApostalBox: bool
        :param aPostalBox:
        :type aPostalBox: Handle_TCollection_HAsciiString &
        :param hasAtown:
        :type hasAtown: bool
        :param aTown:
        :type aTown: Handle_TCollection_HAsciiString &
        :param hasAregion:
        :type hasAregion: bool
        :param aRegion:
        :type aRegion: Handle_TCollection_HAsciiString &
        :param hasApostalCode:
        :type hasApostalCode: bool
        :param aPostalCode:
        :type aPostalCode: Handle_TCollection_HAsciiString &
        :param hasAcountry:
        :type hasAcountry: bool
        :param aCountry:
        :type aCountry: Handle_TCollection_HAsciiString &
        :param hasAfacsimileNumber:
        :type hasAfacsimileNumber: bool
        :param aFacsimileNumber:
        :type aFacsimileNumber: Handle_TCollection_HAsciiString &
        :param hasAtelephoneNumber:
        :type hasAtelephoneNumber: bool
        :param aTelephoneNumber:
        :type aTelephoneNumber: Handle_TCollection_HAsciiString &
        :param hasAelectronicMailAddress:
        :type hasAelectronicMailAddress: bool
        :param aElectronicMailAddress:
        :type aElectronicMailAddress: Handle_TCollection_HAsciiString &
        :param hasAtelexNumber:
        :type hasAtelexNumber: bool
        :param aTelexNumber:
        :type aTelexNumber: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_Address_Init(self, *args)


    def SetInternalLocation(self, *args):
        """
        :param aInternalLocation:
        :type aInternalLocation: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetInternalLocation(self, *args)


    def UnSetInternalLocation(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetInternalLocation(self, *args)


    def InternalLocation(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_InternalLocation(self, *args)


    def HasInternalLocation(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasInternalLocation(self, *args)


    def SetStreetNumber(self, *args):
        """
        :param aStreetNumber:
        :type aStreetNumber: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetStreetNumber(self, *args)


    def UnSetStreetNumber(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetStreetNumber(self, *args)


    def StreetNumber(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_StreetNumber(self, *args)


    def HasStreetNumber(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasStreetNumber(self, *args)


    def SetStreet(self, *args):
        """
        :param aStreet:
        :type aStreet: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetStreet(self, *args)


    def UnSetStreet(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetStreet(self, *args)


    def Street(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_Street(self, *args)


    def HasStreet(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasStreet(self, *args)


    def SetPostalBox(self, *args):
        """
        :param aPostalBox:
        :type aPostalBox: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetPostalBox(self, *args)


    def UnSetPostalBox(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetPostalBox(self, *args)


    def PostalBox(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_PostalBox(self, *args)


    def HasPostalBox(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasPostalBox(self, *args)


    def SetTown(self, *args):
        """
        :param aTown:
        :type aTown: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetTown(self, *args)


    def UnSetTown(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetTown(self, *args)


    def Town(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_Town(self, *args)


    def HasTown(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasTown(self, *args)


    def SetRegion(self, *args):
        """
        :param aRegion:
        :type aRegion: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetRegion(self, *args)


    def UnSetRegion(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetRegion(self, *args)


    def Region(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_Region(self, *args)


    def HasRegion(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasRegion(self, *args)


    def SetPostalCode(self, *args):
        """
        :param aPostalCode:
        :type aPostalCode: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetPostalCode(self, *args)


    def UnSetPostalCode(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetPostalCode(self, *args)


    def PostalCode(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_PostalCode(self, *args)


    def HasPostalCode(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasPostalCode(self, *args)


    def SetCountry(self, *args):
        """
        :param aCountry:
        :type aCountry: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetCountry(self, *args)


    def UnSetCountry(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetCountry(self, *args)


    def Country(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_Country(self, *args)


    def HasCountry(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasCountry(self, *args)


    def SetFacsimileNumber(self, *args):
        """
        :param aFacsimileNumber:
        :type aFacsimileNumber: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetFacsimileNumber(self, *args)


    def UnSetFacsimileNumber(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetFacsimileNumber(self, *args)


    def FacsimileNumber(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_FacsimileNumber(self, *args)


    def HasFacsimileNumber(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasFacsimileNumber(self, *args)


    def SetTelephoneNumber(self, *args):
        """
        :param aTelephoneNumber:
        :type aTelephoneNumber: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetTelephoneNumber(self, *args)


    def UnSetTelephoneNumber(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetTelephoneNumber(self, *args)


    def TelephoneNumber(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_TelephoneNumber(self, *args)


    def HasTelephoneNumber(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasTelephoneNumber(self, *args)


    def SetElectronicMailAddress(self, *args):
        """
        :param aElectronicMailAddress:
        :type aElectronicMailAddress: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetElectronicMailAddress(self, *args)


    def UnSetElectronicMailAddress(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetElectronicMailAddress(self, *args)


    def ElectronicMailAddress(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_ElectronicMailAddress(self, *args)


    def HasElectronicMailAddress(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasElectronicMailAddress(self, *args)


    def SetTelexNumber(self, *args):
        """
        :param aTelexNumber:
        :type aTelexNumber: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_SetTelexNumber(self, *args)


    def UnSetTelexNumber(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Address_UnSetTelexNumber(self, *args)


    def TelexNumber(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Address_TelexNumber(self, *args)


    def HasTelexNumber(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Address_HasTelexNumber(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Address(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Address
StepBasic_Address.Init = new_instancemethod(_StepBasic.StepBasic_Address_Init, None, StepBasic_Address)
StepBasic_Address.SetInternalLocation = new_instancemethod(_StepBasic.StepBasic_Address_SetInternalLocation, None, StepBasic_Address)
StepBasic_Address.UnSetInternalLocation = new_instancemethod(_StepBasic.StepBasic_Address_UnSetInternalLocation, None, StepBasic_Address)
StepBasic_Address.InternalLocation = new_instancemethod(_StepBasic.StepBasic_Address_InternalLocation, None, StepBasic_Address)
StepBasic_Address.HasInternalLocation = new_instancemethod(_StepBasic.StepBasic_Address_HasInternalLocation, None, StepBasic_Address)
StepBasic_Address.SetStreetNumber = new_instancemethod(_StepBasic.StepBasic_Address_SetStreetNumber, None, StepBasic_Address)
StepBasic_Address.UnSetStreetNumber = new_instancemethod(_StepBasic.StepBasic_Address_UnSetStreetNumber, None, StepBasic_Address)
StepBasic_Address.StreetNumber = new_instancemethod(_StepBasic.StepBasic_Address_StreetNumber, None, StepBasic_Address)
StepBasic_Address.HasStreetNumber = new_instancemethod(_StepBasic.StepBasic_Address_HasStreetNumber, None, StepBasic_Address)
StepBasic_Address.SetStreet = new_instancemethod(_StepBasic.StepBasic_Address_SetStreet, None, StepBasic_Address)
StepBasic_Address.UnSetStreet = new_instancemethod(_StepBasic.StepBasic_Address_UnSetStreet, None, StepBasic_Address)
StepBasic_Address.Street = new_instancemethod(_StepBasic.StepBasic_Address_Street, None, StepBasic_Address)
StepBasic_Address.HasStreet = new_instancemethod(_StepBasic.StepBasic_Address_HasStreet, None, StepBasic_Address)
StepBasic_Address.SetPostalBox = new_instancemethod(_StepBasic.StepBasic_Address_SetPostalBox, None, StepBasic_Address)
StepBasic_Address.UnSetPostalBox = new_instancemethod(_StepBasic.StepBasic_Address_UnSetPostalBox, None, StepBasic_Address)
StepBasic_Address.PostalBox = new_instancemethod(_StepBasic.StepBasic_Address_PostalBox, None, StepBasic_Address)
StepBasic_Address.HasPostalBox = new_instancemethod(_StepBasic.StepBasic_Address_HasPostalBox, None, StepBasic_Address)
StepBasic_Address.SetTown = new_instancemethod(_StepBasic.StepBasic_Address_SetTown, None, StepBasic_Address)
StepBasic_Address.UnSetTown = new_instancemethod(_StepBasic.StepBasic_Address_UnSetTown, None, StepBasic_Address)
StepBasic_Address.Town = new_instancemethod(_StepBasic.StepBasic_Address_Town, None, StepBasic_Address)
StepBasic_Address.HasTown = new_instancemethod(_StepBasic.StepBasic_Address_HasTown, None, StepBasic_Address)
StepBasic_Address.SetRegion = new_instancemethod(_StepBasic.StepBasic_Address_SetRegion, None, StepBasic_Address)
StepBasic_Address.UnSetRegion = new_instancemethod(_StepBasic.StepBasic_Address_UnSetRegion, None, StepBasic_Address)
StepBasic_Address.Region = new_instancemethod(_StepBasic.StepBasic_Address_Region, None, StepBasic_Address)
StepBasic_Address.HasRegion = new_instancemethod(_StepBasic.StepBasic_Address_HasRegion, None, StepBasic_Address)
StepBasic_Address.SetPostalCode = new_instancemethod(_StepBasic.StepBasic_Address_SetPostalCode, None, StepBasic_Address)
StepBasic_Address.UnSetPostalCode = new_instancemethod(_StepBasic.StepBasic_Address_UnSetPostalCode, None, StepBasic_Address)
StepBasic_Address.PostalCode = new_instancemethod(_StepBasic.StepBasic_Address_PostalCode, None, StepBasic_Address)
StepBasic_Address.HasPostalCode = new_instancemethod(_StepBasic.StepBasic_Address_HasPostalCode, None, StepBasic_Address)
StepBasic_Address.SetCountry = new_instancemethod(_StepBasic.StepBasic_Address_SetCountry, None, StepBasic_Address)
StepBasic_Address.UnSetCountry = new_instancemethod(_StepBasic.StepBasic_Address_UnSetCountry, None, StepBasic_Address)
StepBasic_Address.Country = new_instancemethod(_StepBasic.StepBasic_Address_Country, None, StepBasic_Address)
StepBasic_Address.HasCountry = new_instancemethod(_StepBasic.StepBasic_Address_HasCountry, None, StepBasic_Address)
StepBasic_Address.SetFacsimileNumber = new_instancemethod(_StepBasic.StepBasic_Address_SetFacsimileNumber, None, StepBasic_Address)
StepBasic_Address.UnSetFacsimileNumber = new_instancemethod(_StepBasic.StepBasic_Address_UnSetFacsimileNumber, None, StepBasic_Address)
StepBasic_Address.FacsimileNumber = new_instancemethod(_StepBasic.StepBasic_Address_FacsimileNumber, None, StepBasic_Address)
StepBasic_Address.HasFacsimileNumber = new_instancemethod(_StepBasic.StepBasic_Address_HasFacsimileNumber, None, StepBasic_Address)
StepBasic_Address.SetTelephoneNumber = new_instancemethod(_StepBasic.StepBasic_Address_SetTelephoneNumber, None, StepBasic_Address)
StepBasic_Address.UnSetTelephoneNumber = new_instancemethod(_StepBasic.StepBasic_Address_UnSetTelephoneNumber, None, StepBasic_Address)
StepBasic_Address.TelephoneNumber = new_instancemethod(_StepBasic.StepBasic_Address_TelephoneNumber, None, StepBasic_Address)
StepBasic_Address.HasTelephoneNumber = new_instancemethod(_StepBasic.StepBasic_Address_HasTelephoneNumber, None, StepBasic_Address)
StepBasic_Address.SetElectronicMailAddress = new_instancemethod(_StepBasic.StepBasic_Address_SetElectronicMailAddress, None, StepBasic_Address)
StepBasic_Address.UnSetElectronicMailAddress = new_instancemethod(_StepBasic.StepBasic_Address_UnSetElectronicMailAddress, None, StepBasic_Address)
StepBasic_Address.ElectronicMailAddress = new_instancemethod(_StepBasic.StepBasic_Address_ElectronicMailAddress, None, StepBasic_Address)
StepBasic_Address.HasElectronicMailAddress = new_instancemethod(_StepBasic.StepBasic_Address_HasElectronicMailAddress, None, StepBasic_Address)
StepBasic_Address.SetTelexNumber = new_instancemethod(_StepBasic.StepBasic_Address_SetTelexNumber, None, StepBasic_Address)
StepBasic_Address.UnSetTelexNumber = new_instancemethod(_StepBasic.StepBasic_Address_UnSetTelexNumber, None, StepBasic_Address)
StepBasic_Address.TelexNumber = new_instancemethod(_StepBasic.StepBasic_Address_TelexNumber, None, StepBasic_Address)
StepBasic_Address.HasTelexNumber = new_instancemethod(_StepBasic.StepBasic_Address_HasTelexNumber, None, StepBasic_Address)
StepBasic_Address_swigregister = _StepBasic.StepBasic_Address_swigregister
StepBasic_Address_swigregister(StepBasic_Address)

class Handle_StepBasic_Address(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Address_swiginit(self, _StepBasic.new_Handle_StepBasic_Address(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Address_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Address
Handle_StepBasic_Address.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Address_Nullify, None, Handle_StepBasic_Address)
Handle_StepBasic_Address.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Address_IsNull, None, Handle_StepBasic_Address)
Handle_StepBasic_Address.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Address_GetObject, None, Handle_StepBasic_Address)
Handle_StepBasic_Address_swigregister = _StepBasic.Handle_StepBasic_Address_swigregister
Handle_StepBasic_Address_swigregister(Handle_StepBasic_Address)

def Handle_StepBasic_Address_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Address_DownCast(AnObject)
Handle_StepBasic_Address_DownCast = _StepBasic.Handle_StepBasic_Address_DownCast

class StepBasic_ApplicationContext(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApplicationContext

        :rtype: None

        """
        _StepBasic.StepBasic_ApplicationContext_swiginit(self, _StepBasic.new_StepBasic_ApplicationContext(*args))

    def Init(self, *args):
        """
        :param aApplication:
        :type aApplication: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApplicationContext_Init(self, *args)


    def SetApplication(self, *args):
        """
        :param aApplication:
        :type aApplication: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationContext_SetApplication(self, *args)


    def Application(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApplicationContext_Application(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApplicationContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApplicationContext
StepBasic_ApplicationContext.Init = new_instancemethod(_StepBasic.StepBasic_ApplicationContext_Init, None, StepBasic_ApplicationContext)
StepBasic_ApplicationContext.SetApplication = new_instancemethod(_StepBasic.StepBasic_ApplicationContext_SetApplication, None, StepBasic_ApplicationContext)
StepBasic_ApplicationContext.Application = new_instancemethod(_StepBasic.StepBasic_ApplicationContext_Application, None, StepBasic_ApplicationContext)
StepBasic_ApplicationContext_swigregister = _StepBasic.StepBasic_ApplicationContext_swigregister
StepBasic_ApplicationContext_swigregister(StepBasic_ApplicationContext)

class Handle_StepBasic_ApplicationContext(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApplicationContext_swiginit(self, _StepBasic.new_Handle_StepBasic_ApplicationContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApplicationContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApplicationContext
Handle_StepBasic_ApplicationContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationContext_Nullify, None, Handle_StepBasic_ApplicationContext)
Handle_StepBasic_ApplicationContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationContext_IsNull, None, Handle_StepBasic_ApplicationContext)
Handle_StepBasic_ApplicationContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationContext_GetObject, None, Handle_StepBasic_ApplicationContext)
Handle_StepBasic_ApplicationContext_swigregister = _StepBasic.Handle_StepBasic_ApplicationContext_swigregister
Handle_StepBasic_ApplicationContext_swigregister(Handle_StepBasic_ApplicationContext)

def Handle_StepBasic_ApplicationContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApplicationContext_DownCast(AnObject)
Handle_StepBasic_ApplicationContext_DownCast = _StepBasic.Handle_StepBasic_ApplicationContext_DownCast

class StepBasic_ApplicationContextElement(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApplicationContextElement

        :rtype: None

        """
        _StepBasic.StepBasic_ApplicationContextElement_swiginit(self, _StepBasic.new_StepBasic_ApplicationContextElement(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ApplicationContext &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApplicationContextElement_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationContextElement_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApplicationContextElement_Name(self, *args)


    def SetFrameOfReference(self, *args):
        """
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ApplicationContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationContextElement_SetFrameOfReference(self, *args)


    def FrameOfReference(self, *args):
        """
        :rtype: Handle_StepBasic_ApplicationContext

        """
        return _StepBasic.StepBasic_ApplicationContextElement_FrameOfReference(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApplicationContextElement(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApplicationContextElement
StepBasic_ApplicationContextElement.Init = new_instancemethod(_StepBasic.StepBasic_ApplicationContextElement_Init, None, StepBasic_ApplicationContextElement)
StepBasic_ApplicationContextElement.SetName = new_instancemethod(_StepBasic.StepBasic_ApplicationContextElement_SetName, None, StepBasic_ApplicationContextElement)
StepBasic_ApplicationContextElement.Name = new_instancemethod(_StepBasic.StepBasic_ApplicationContextElement_Name, None, StepBasic_ApplicationContextElement)
StepBasic_ApplicationContextElement.SetFrameOfReference = new_instancemethod(_StepBasic.StepBasic_ApplicationContextElement_SetFrameOfReference, None, StepBasic_ApplicationContextElement)
StepBasic_ApplicationContextElement.FrameOfReference = new_instancemethod(_StepBasic.StepBasic_ApplicationContextElement_FrameOfReference, None, StepBasic_ApplicationContextElement)
StepBasic_ApplicationContextElement_swigregister = _StepBasic.StepBasic_ApplicationContextElement_swigregister
StepBasic_ApplicationContextElement_swigregister(StepBasic_ApplicationContextElement)

class Handle_StepBasic_ApplicationContextElement(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApplicationContextElement_swiginit(self, _StepBasic.new_Handle_StepBasic_ApplicationContextElement(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApplicationContextElement_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApplicationContextElement
Handle_StepBasic_ApplicationContextElement.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationContextElement_Nullify, None, Handle_StepBasic_ApplicationContextElement)
Handle_StepBasic_ApplicationContextElement.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationContextElement_IsNull, None, Handle_StepBasic_ApplicationContextElement)
Handle_StepBasic_ApplicationContextElement.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationContextElement_GetObject, None, Handle_StepBasic_ApplicationContextElement)
Handle_StepBasic_ApplicationContextElement_swigregister = _StepBasic.Handle_StepBasic_ApplicationContextElement_swigregister
Handle_StepBasic_ApplicationContextElement_swigregister(Handle_StepBasic_ApplicationContextElement)

def Handle_StepBasic_ApplicationContextElement_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApplicationContextElement_DownCast(AnObject)
Handle_StepBasic_ApplicationContextElement_DownCast = _StepBasic.Handle_StepBasic_ApplicationContextElement_DownCast

class StepBasic_ApplicationProtocolDefinition(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApplicationProtocolDefinition

        :rtype: None

        """
        _StepBasic.StepBasic_ApplicationProtocolDefinition_swiginit(self, _StepBasic.new_StepBasic_ApplicationProtocolDefinition(*args))

    def Init(self, *args):
        """
        :param aStatus:
        :type aStatus: Handle_TCollection_HAsciiString &
        :param aApplicationInterpretedModelSchemaName:
        :type aApplicationInterpretedModelSchemaName: Handle_TCollection_HAsciiString &
        :param aApplicationProtocolYear:
        :type aApplicationProtocolYear: int
        :param aApplication:
        :type aApplication: Handle_StepBasic_ApplicationContext &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_Init(self, *args)


    def SetStatus(self, *args):
        """
        :param aStatus:
        :type aStatus: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetStatus(self, *args)


    def Status(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_Status(self, *args)


    def SetApplicationInterpretedModelSchemaName(self, *args):
        """
        :param aApplicationInterpretedModelSchemaName:
        :type aApplicationInterpretedModelSchemaName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplicationInterpretedModelSchemaName(self, *args)


    def ApplicationInterpretedModelSchemaName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_ApplicationInterpretedModelSchemaName(self, *args)


    def SetApplicationProtocolYear(self, *args):
        """
        :param aApplicationProtocolYear:
        :type aApplicationProtocolYear: int
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplicationProtocolYear(self, *args)


    def ApplicationProtocolYear(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_ApplicationProtocolYear(self, *args)


    def SetApplication(self, *args):
        """
        :param aApplication:
        :type aApplication: Handle_StepBasic_ApplicationContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplication(self, *args)


    def Application(self, *args):
        """
        :rtype: Handle_StepBasic_ApplicationContext

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_Application(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApplicationProtocolDefinition(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApplicationProtocolDefinition
StepBasic_ApplicationProtocolDefinition.Init = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_Init, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.SetStatus = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_SetStatus, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.Status = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_Status, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.SetApplicationInterpretedModelSchemaName = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplicationInterpretedModelSchemaName, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.ApplicationInterpretedModelSchemaName = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_ApplicationInterpretedModelSchemaName, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.SetApplicationProtocolYear = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplicationProtocolYear, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.ApplicationProtocolYear = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_ApplicationProtocolYear, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.SetApplication = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplication, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition.Application = new_instancemethod(_StepBasic.StepBasic_ApplicationProtocolDefinition_Application, None, StepBasic_ApplicationProtocolDefinition)
StepBasic_ApplicationProtocolDefinition_swigregister = _StepBasic.StepBasic_ApplicationProtocolDefinition_swigregister
StepBasic_ApplicationProtocolDefinition_swigregister(StepBasic_ApplicationProtocolDefinition)

class Handle_StepBasic_ApplicationProtocolDefinition(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_swiginit(self, _StepBasic.new_Handle_StepBasic_ApplicationProtocolDefinition(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApplicationProtocolDefinition
Handle_StepBasic_ApplicationProtocolDefinition.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_Nullify, None, Handle_StepBasic_ApplicationProtocolDefinition)
Handle_StepBasic_ApplicationProtocolDefinition.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_IsNull, None, Handle_StepBasic_ApplicationProtocolDefinition)
Handle_StepBasic_ApplicationProtocolDefinition.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_GetObject, None, Handle_StepBasic_ApplicationProtocolDefinition)
Handle_StepBasic_ApplicationProtocolDefinition_swigregister = _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_swigregister
Handle_StepBasic_ApplicationProtocolDefinition_swigregister(Handle_StepBasic_ApplicationProtocolDefinition)

def Handle_StepBasic_ApplicationProtocolDefinition_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_DownCast(AnObject)
Handle_StepBasic_ApplicationProtocolDefinition_DownCast = _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_DownCast

class StepBasic_Approval(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Approval

        :rtype: None

        """
        _StepBasic.StepBasic_Approval_swiginit(self, _StepBasic.new_StepBasic_Approval(*args))

    def Init(self, *args):
        """
        :param aStatus:
        :type aStatus: Handle_StepBasic_ApprovalStatus &
        :param aLevel:
        :type aLevel: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_Approval_Init(self, *args)


    def SetStatus(self, *args):
        """
        :param aStatus:
        :type aStatus: Handle_StepBasic_ApprovalStatus &
        :rtype: None

        """
        return _StepBasic.StepBasic_Approval_SetStatus(self, *args)


    def Status(self, *args):
        """
        :rtype: Handle_StepBasic_ApprovalStatus

        """
        return _StepBasic.StepBasic_Approval_Status(self, *args)


    def SetLevel(self, *args):
        """
        :param aLevel:
        :type aLevel: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Approval_SetLevel(self, *args)


    def Level(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Approval_Level(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Approval(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Approval
StepBasic_Approval.Init = new_instancemethod(_StepBasic.StepBasic_Approval_Init, None, StepBasic_Approval)
StepBasic_Approval.SetStatus = new_instancemethod(_StepBasic.StepBasic_Approval_SetStatus, None, StepBasic_Approval)
StepBasic_Approval.Status = new_instancemethod(_StepBasic.StepBasic_Approval_Status, None, StepBasic_Approval)
StepBasic_Approval.SetLevel = new_instancemethod(_StepBasic.StepBasic_Approval_SetLevel, None, StepBasic_Approval)
StepBasic_Approval.Level = new_instancemethod(_StepBasic.StepBasic_Approval_Level, None, StepBasic_Approval)
StepBasic_Approval_swigregister = _StepBasic.StepBasic_Approval_swigregister
StepBasic_Approval_swigregister(StepBasic_Approval)

class Handle_StepBasic_Approval(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Approval_swiginit(self, _StepBasic.new_Handle_StepBasic_Approval(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Approval_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Approval
Handle_StepBasic_Approval.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Approval_Nullify, None, Handle_StepBasic_Approval)
Handle_StepBasic_Approval.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Approval_IsNull, None, Handle_StepBasic_Approval)
Handle_StepBasic_Approval.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Approval_GetObject, None, Handle_StepBasic_Approval)
Handle_StepBasic_Approval_swigregister = _StepBasic.Handle_StepBasic_Approval_swigregister
Handle_StepBasic_Approval_swigregister(Handle_StepBasic_Approval)

def Handle_StepBasic_Approval_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Approval_DownCast(AnObject)
Handle_StepBasic_Approval_DownCast = _StepBasic.Handle_StepBasic_Approval_DownCast

class StepBasic_ApprovalAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        :param aAssignedApproval:
        :type aAssignedApproval: Handle_StepBasic_Approval &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApprovalAssignment_Init(self, *args)


    def SetAssignedApproval(self, *args):
        """
        :param aAssignedApproval:
        :type aAssignedApproval: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalAssignment_SetAssignedApproval(self, *args)


    def AssignedApproval(self, *args):
        """
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_ApprovalAssignment_AssignedApproval(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApprovalAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalAssignment
StepBasic_ApprovalAssignment.Init = new_instancemethod(_StepBasic.StepBasic_ApprovalAssignment_Init, None, StepBasic_ApprovalAssignment)
StepBasic_ApprovalAssignment.SetAssignedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalAssignment_SetAssignedApproval, None, StepBasic_ApprovalAssignment)
StepBasic_ApprovalAssignment.AssignedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalAssignment_AssignedApproval, None, StepBasic_ApprovalAssignment)
StepBasic_ApprovalAssignment_swigregister = _StepBasic.StepBasic_ApprovalAssignment_swigregister
StepBasic_ApprovalAssignment_swigregister(StepBasic_ApprovalAssignment)

class Handle_StepBasic_ApprovalAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApprovalAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_ApprovalAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApprovalAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApprovalAssignment
Handle_StepBasic_ApprovalAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalAssignment_Nullify, None, Handle_StepBasic_ApprovalAssignment)
Handle_StepBasic_ApprovalAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalAssignment_IsNull, None, Handle_StepBasic_ApprovalAssignment)
Handle_StepBasic_ApprovalAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalAssignment_GetObject, None, Handle_StepBasic_ApprovalAssignment)
Handle_StepBasic_ApprovalAssignment_swigregister = _StepBasic.Handle_StepBasic_ApprovalAssignment_swigregister
Handle_StepBasic_ApprovalAssignment_swigregister(Handle_StepBasic_ApprovalAssignment)

def Handle_StepBasic_ApprovalAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApprovalAssignment_DownCast(AnObject)
Handle_StepBasic_ApprovalAssignment_DownCast = _StepBasic.Handle_StepBasic_ApprovalAssignment_DownCast

class StepBasic_ApprovalDateTime(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_ApprovalDateTime_swiginit(self, _StepBasic.new_StepBasic_ApprovalDateTime(*args))

    def Init(self, *args):
        """
        :param aDateTime:
        :type aDateTime: StepBasic_DateTimeSelect &
        :param aDatedApproval:
        :type aDatedApproval: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalDateTime_Init(self, *args)


    def SetDateTime(self, *args):
        """
        :param aDateTime:
        :type aDateTime: StepBasic_DateTimeSelect &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalDateTime_SetDateTime(self, *args)


    def DateTime(self, *args):
        """
        :rtype: StepBasic_DateTimeSelect

        """
        return _StepBasic.StepBasic_ApprovalDateTime_DateTime(self, *args)


    def SetDatedApproval(self, *args):
        """
        :param aDatedApproval:
        :type aDatedApproval: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalDateTime_SetDatedApproval(self, *args)


    def DatedApproval(self, *args):
        """
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_ApprovalDateTime_DatedApproval(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApprovalDateTime(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalDateTime
StepBasic_ApprovalDateTime.Init = new_instancemethod(_StepBasic.StepBasic_ApprovalDateTime_Init, None, StepBasic_ApprovalDateTime)
StepBasic_ApprovalDateTime.SetDateTime = new_instancemethod(_StepBasic.StepBasic_ApprovalDateTime_SetDateTime, None, StepBasic_ApprovalDateTime)
StepBasic_ApprovalDateTime.DateTime = new_instancemethod(_StepBasic.StepBasic_ApprovalDateTime_DateTime, None, StepBasic_ApprovalDateTime)
StepBasic_ApprovalDateTime.SetDatedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalDateTime_SetDatedApproval, None, StepBasic_ApprovalDateTime)
StepBasic_ApprovalDateTime.DatedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalDateTime_DatedApproval, None, StepBasic_ApprovalDateTime)
StepBasic_ApprovalDateTime_swigregister = _StepBasic.StepBasic_ApprovalDateTime_swigregister
StepBasic_ApprovalDateTime_swigregister(StepBasic_ApprovalDateTime)

class Handle_StepBasic_ApprovalDateTime(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApprovalDateTime_swiginit(self, _StepBasic.new_Handle_StepBasic_ApprovalDateTime(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApprovalDateTime_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApprovalDateTime
Handle_StepBasic_ApprovalDateTime.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalDateTime_Nullify, None, Handle_StepBasic_ApprovalDateTime)
Handle_StepBasic_ApprovalDateTime.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalDateTime_IsNull, None, Handle_StepBasic_ApprovalDateTime)
Handle_StepBasic_ApprovalDateTime.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalDateTime_GetObject, None, Handle_StepBasic_ApprovalDateTime)
Handle_StepBasic_ApprovalDateTime_swigregister = _StepBasic.Handle_StepBasic_ApprovalDateTime_swigregister
Handle_StepBasic_ApprovalDateTime_swigregister(Handle_StepBasic_ApprovalDateTime)

def Handle_StepBasic_ApprovalDateTime_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApprovalDateTime_DownCast(AnObject)
Handle_StepBasic_ApprovalDateTime_DownCast = _StepBasic.Handle_StepBasic_ApprovalDateTime_DownCast

class StepBasic_ApprovalPersonOrganization(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApprovalPersonOrganization

        :rtype: None

        """
        _StepBasic.StepBasic_ApprovalPersonOrganization_swiginit(self, _StepBasic.new_StepBasic_ApprovalPersonOrganization(*args))

    def Init(self, *args):
        """
        :param aPersonOrganization:
        :type aPersonOrganization: StepBasic_PersonOrganizationSelect &
        :param aAuthorizedApproval:
        :type aAuthorizedApproval: Handle_StepBasic_Approval &
        :param aRole:
        :type aRole: Handle_StepBasic_ApprovalRole &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_Init(self, *args)


    def SetPersonOrganization(self, *args):
        """
        :param aPersonOrganization:
        :type aPersonOrganization: StepBasic_PersonOrganizationSelect &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_SetPersonOrganization(self, *args)


    def PersonOrganization(self, *args):
        """
        :rtype: StepBasic_PersonOrganizationSelect

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_PersonOrganization(self, *args)


    def SetAuthorizedApproval(self, *args):
        """
        :param aAuthorizedApproval:
        :type aAuthorizedApproval: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_SetAuthorizedApproval(self, *args)


    def AuthorizedApproval(self, *args):
        """
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_AuthorizedApproval(self, *args)


    def SetRole(self, *args):
        """
        :param aRole:
        :type aRole: Handle_StepBasic_ApprovalRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_SetRole(self, *args)


    def Role(self, *args):
        """
        :rtype: Handle_StepBasic_ApprovalRole

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_Role(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApprovalPersonOrganization(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalPersonOrganization
StepBasic_ApprovalPersonOrganization.Init = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_Init, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization.SetPersonOrganization = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_SetPersonOrganization, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization.PersonOrganization = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_PersonOrganization, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization.SetAuthorizedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_SetAuthorizedApproval, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization.AuthorizedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_AuthorizedApproval, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization.SetRole = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_SetRole, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization.Role = new_instancemethod(_StepBasic.StepBasic_ApprovalPersonOrganization_Role, None, StepBasic_ApprovalPersonOrganization)
StepBasic_ApprovalPersonOrganization_swigregister = _StepBasic.StepBasic_ApprovalPersonOrganization_swigregister
StepBasic_ApprovalPersonOrganization_swigregister(StepBasic_ApprovalPersonOrganization)

class Handle_StepBasic_ApprovalPersonOrganization(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_swiginit(self, _StepBasic.new_Handle_StepBasic_ApprovalPersonOrganization(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApprovalPersonOrganization_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApprovalPersonOrganization
Handle_StepBasic_ApprovalPersonOrganization.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalPersonOrganization_Nullify, None, Handle_StepBasic_ApprovalPersonOrganization)
Handle_StepBasic_ApprovalPersonOrganization.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalPersonOrganization_IsNull, None, Handle_StepBasic_ApprovalPersonOrganization)
Handle_StepBasic_ApprovalPersonOrganization.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalPersonOrganization_GetObject, None, Handle_StepBasic_ApprovalPersonOrganization)
Handle_StepBasic_ApprovalPersonOrganization_swigregister = _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_swigregister
Handle_StepBasic_ApprovalPersonOrganization_swigregister(Handle_StepBasic_ApprovalPersonOrganization)

def Handle_StepBasic_ApprovalPersonOrganization_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_DownCast(AnObject)
Handle_StepBasic_ApprovalPersonOrganization_DownCast = _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_DownCast

class StepBasic_ApprovalRelationship(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApprovalRelationship

        :rtype: None

        """
        _StepBasic.StepBasic_ApprovalRelationship_swiginit(self, _StepBasic.new_StepBasic_ApprovalRelationship(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aRelatingApproval:
        :type aRelatingApproval: Handle_StepBasic_Approval &
        :param aRelatedApproval:
        :type aRelatedApproval: Handle_StepBasic_Approval &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApprovalRelationship_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApprovalRelationship_Name(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApprovalRelationship_Description(self, *args)


    def SetRelatingApproval(self, *args):
        """
        :param aRelatingApproval:
        :type aRelatingApproval: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetRelatingApproval(self, *args)


    def RelatingApproval(self, *args):
        """
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_ApprovalRelationship_RelatingApproval(self, *args)


    def SetRelatedApproval(self, *args):
        """
        :param aRelatedApproval:
        :type aRelatedApproval: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetRelatedApproval(self, *args)


    def RelatedApproval(self, *args):
        """
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_ApprovalRelationship_RelatedApproval(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApprovalRelationship(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalRelationship
StepBasic_ApprovalRelationship.Init = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_Init, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.SetName = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_SetName, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.Name = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_Name, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.SetDescription = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_SetDescription, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.Description = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_Description, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.SetRelatingApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_SetRelatingApproval, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.RelatingApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_RelatingApproval, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.SetRelatedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_SetRelatedApproval, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship.RelatedApproval = new_instancemethod(_StepBasic.StepBasic_ApprovalRelationship_RelatedApproval, None, StepBasic_ApprovalRelationship)
StepBasic_ApprovalRelationship_swigregister = _StepBasic.StepBasic_ApprovalRelationship_swigregister
StepBasic_ApprovalRelationship_swigregister(StepBasic_ApprovalRelationship)

class Handle_StepBasic_ApprovalRelationship(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApprovalRelationship_swiginit(self, _StepBasic.new_Handle_StepBasic_ApprovalRelationship(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApprovalRelationship_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApprovalRelationship
Handle_StepBasic_ApprovalRelationship.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalRelationship_Nullify, None, Handle_StepBasic_ApprovalRelationship)
Handle_StepBasic_ApprovalRelationship.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalRelationship_IsNull, None, Handle_StepBasic_ApprovalRelationship)
Handle_StepBasic_ApprovalRelationship.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalRelationship_GetObject, None, Handle_StepBasic_ApprovalRelationship)
Handle_StepBasic_ApprovalRelationship_swigregister = _StepBasic.Handle_StepBasic_ApprovalRelationship_swigregister
Handle_StepBasic_ApprovalRelationship_swigregister(Handle_StepBasic_ApprovalRelationship)

def Handle_StepBasic_ApprovalRelationship_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApprovalRelationship_DownCast(AnObject)
Handle_StepBasic_ApprovalRelationship_DownCast = _StepBasic.Handle_StepBasic_ApprovalRelationship_DownCast

class StepBasic_ApprovalRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApprovalRole

        :rtype: None

        """
        _StepBasic.StepBasic_ApprovalRole_swiginit(self, _StepBasic.new_StepBasic_ApprovalRole(*args))

    def Init(self, *args):
        """
        :param aRole:
        :type aRole: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApprovalRole_Init(self, *args)


    def SetRole(self, *args):
        """
        :param aRole:
        :type aRole: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalRole_SetRole(self, *args)


    def Role(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApprovalRole_Role(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApprovalRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalRole
StepBasic_ApprovalRole.Init = new_instancemethod(_StepBasic.StepBasic_ApprovalRole_Init, None, StepBasic_ApprovalRole)
StepBasic_ApprovalRole.SetRole = new_instancemethod(_StepBasic.StepBasic_ApprovalRole_SetRole, None, StepBasic_ApprovalRole)
StepBasic_ApprovalRole.Role = new_instancemethod(_StepBasic.StepBasic_ApprovalRole_Role, None, StepBasic_ApprovalRole)
StepBasic_ApprovalRole_swigregister = _StepBasic.StepBasic_ApprovalRole_swigregister
StepBasic_ApprovalRole_swigregister(StepBasic_ApprovalRole)

class Handle_StepBasic_ApprovalRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApprovalRole_swiginit(self, _StepBasic.new_Handle_StepBasic_ApprovalRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApprovalRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApprovalRole
Handle_StepBasic_ApprovalRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalRole_Nullify, None, Handle_StepBasic_ApprovalRole)
Handle_StepBasic_ApprovalRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalRole_IsNull, None, Handle_StepBasic_ApprovalRole)
Handle_StepBasic_ApprovalRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalRole_GetObject, None, Handle_StepBasic_ApprovalRole)
Handle_StepBasic_ApprovalRole_swigregister = _StepBasic.Handle_StepBasic_ApprovalRole_swigregister
Handle_StepBasic_ApprovalRole_swigregister(Handle_StepBasic_ApprovalRole)

def Handle_StepBasic_ApprovalRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApprovalRole_DownCast(AnObject)
Handle_StepBasic_ApprovalRole_DownCast = _StepBasic.Handle_StepBasic_ApprovalRole_DownCast

class StepBasic_ApprovalStatus(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ApprovalStatus

        :rtype: None

        """
        _StepBasic.StepBasic_ApprovalStatus_swiginit(self, _StepBasic.new_StepBasic_ApprovalStatus(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_ApprovalStatus_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ApprovalStatus_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ApprovalStatus_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ApprovalStatus(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalStatus
StepBasic_ApprovalStatus.Init = new_instancemethod(_StepBasic.StepBasic_ApprovalStatus_Init, None, StepBasic_ApprovalStatus)
StepBasic_ApprovalStatus.SetName = new_instancemethod(_StepBasic.StepBasic_ApprovalStatus_SetName, None, StepBasic_ApprovalStatus)
StepBasic_ApprovalStatus.Name = new_instancemethod(_StepBasic.StepBasic_ApprovalStatus_Name, None, StepBasic_ApprovalStatus)
StepBasic_ApprovalStatus_swigregister = _StepBasic.StepBasic_ApprovalStatus_swigregister
StepBasic_ApprovalStatus_swigregister(StepBasic_ApprovalStatus)

class Handle_StepBasic_ApprovalStatus(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ApprovalStatus_swiginit(self, _StepBasic.new_Handle_StepBasic_ApprovalStatus(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ApprovalStatus_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ApprovalStatus
Handle_StepBasic_ApprovalStatus.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalStatus_Nullify, None, Handle_StepBasic_ApprovalStatus)
Handle_StepBasic_ApprovalStatus.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalStatus_IsNull, None, Handle_StepBasic_ApprovalStatus)
Handle_StepBasic_ApprovalStatus.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ApprovalStatus_GetObject, None, Handle_StepBasic_ApprovalStatus)
Handle_StepBasic_ApprovalStatus_swigregister = _StepBasic.Handle_StepBasic_ApprovalStatus_swigregister
Handle_StepBasic_ApprovalStatus_swigregister(Handle_StepBasic_ApprovalStatus)

def Handle_StepBasic_ApprovalStatus_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ApprovalStatus_DownCast(AnObject)
Handle_StepBasic_ApprovalStatus_DownCast = _StepBasic.Handle_StepBasic_ApprovalStatus_DownCast

class StepBasic_Array1OfApproval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_Approval &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfApproval_swiginit(self, _StepBasic.new_StepBasic_Array1OfApproval(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfApproval_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfApproval_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfApproval_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfApproval &
        :rtype: StepBasic_Array1OfApproval

        """
        return _StepBasic.StepBasic_Array1OfApproval_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfApproval &
        :rtype: StepBasic_Array1OfApproval

        """
        return _StepBasic.StepBasic_Array1OfApproval_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfApproval_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfApproval_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfApproval_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfApproval_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_Array1OfApproval_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_Array1OfApproval_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfApproval
StepBasic_Array1OfApproval.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Init, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Destroy, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_IsAllocated, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Assign, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Set, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Length, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Lower, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Upper, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_SetValue, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_Value, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfApproval_ChangeValue, None, StepBasic_Array1OfApproval)
StepBasic_Array1OfApproval_swigregister = _StepBasic.StepBasic_Array1OfApproval_swigregister
StepBasic_Array1OfApproval_swigregister(StepBasic_Array1OfApproval)

class StepBasic_Array1OfDerivedUnitElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_DerivedUnitElement &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfDerivedUnitElement_swiginit(self, _StepBasic.new_StepBasic_Array1OfDerivedUnitElement(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_DerivedUnitElement &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfDerivedUnitElement &
        :rtype: StepBasic_Array1OfDerivedUnitElement

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfDerivedUnitElement &
        :rtype: StepBasic_Array1OfDerivedUnitElement

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_DerivedUnitElement &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_DerivedUnitElement

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_DerivedUnitElement

        """
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfDerivedUnitElement
StepBasic_Array1OfDerivedUnitElement.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Init, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Destroy, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_IsAllocated, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Assign, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Set, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Length, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Lower, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Upper, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_SetValue, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_Value, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfDerivedUnitElement_ChangeValue, None, StepBasic_Array1OfDerivedUnitElement)
StepBasic_Array1OfDerivedUnitElement_swigregister = _StepBasic.StepBasic_Array1OfDerivedUnitElement_swigregister
StepBasic_Array1OfDerivedUnitElement_swigregister(StepBasic_Array1OfDerivedUnitElement)

class StepBasic_Array1OfDocument(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_Document &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfDocument_swiginit(self, _StepBasic.new_StepBasic_Array1OfDocument(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfDocument_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfDocument_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfDocument_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfDocument &
        :rtype: StepBasic_Array1OfDocument

        """
        return _StepBasic.StepBasic_Array1OfDocument_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfDocument &
        :rtype: StepBasic_Array1OfDocument

        """
        return _StepBasic.StepBasic_Array1OfDocument_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfDocument_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfDocument_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfDocument_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfDocument_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_Array1OfDocument_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_Array1OfDocument_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfDocument
StepBasic_Array1OfDocument.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Init, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Destroy, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_IsAllocated, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Assign, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Set, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Length, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Lower, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Upper, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_SetValue, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_Value, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfDocument_ChangeValue, None, StepBasic_Array1OfDocument)
StepBasic_Array1OfDocument_swigregister = _StepBasic.StepBasic_Array1OfDocument_swigregister
StepBasic_Array1OfDocument_swigregister(StepBasic_Array1OfDocument)

class StepBasic_Array1OfNamedUnit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_NamedUnit &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfNamedUnit_swiginit(self, _StepBasic.new_StepBasic_Array1OfNamedUnit(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_NamedUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfNamedUnit &
        :rtype: StepBasic_Array1OfNamedUnit

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfNamedUnit &
        :rtype: StepBasic_Array1OfNamedUnit

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_NamedUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepBasic.StepBasic_Array1OfNamedUnit_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfNamedUnit
StepBasic_Array1OfNamedUnit.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Init, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Destroy, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_IsAllocated, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Assign, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Set, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Length, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Lower, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Upper, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_SetValue, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_Value, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfNamedUnit_ChangeValue, None, StepBasic_Array1OfNamedUnit)
StepBasic_Array1OfNamedUnit_swigregister = _StepBasic.StepBasic_Array1OfNamedUnit_swigregister
StepBasic_Array1OfNamedUnit_swigregister(StepBasic_Array1OfNamedUnit)

class StepBasic_Array1OfOrganization(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_Organization &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfOrganization_swiginit(self, _StepBasic.new_StepBasic_Array1OfOrganization(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Organization &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfOrganization_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfOrganization &
        :rtype: StepBasic_Array1OfOrganization

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfOrganization &
        :rtype: StepBasic_Array1OfOrganization

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Organization &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfOrganization_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_Array1OfOrganization_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_Array1OfOrganization_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfOrganization
StepBasic_Array1OfOrganization.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Init, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Destroy, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_IsAllocated, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Assign, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Set, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Length, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Lower, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Upper, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_SetValue, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_Value, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfOrganization_ChangeValue, None, StepBasic_Array1OfOrganization)
StepBasic_Array1OfOrganization_swigregister = _StepBasic.StepBasic_Array1OfOrganization_swigregister
StepBasic_Array1OfOrganization_swigregister(StepBasic_Array1OfOrganization)

class StepBasic_Array1OfPerson(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_Person &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfPerson_swiginit(self, _StepBasic.new_StepBasic_Array1OfPerson(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Person &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfPerson_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfPerson_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfPerson_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfPerson &
        :rtype: StepBasic_Array1OfPerson

        """
        return _StepBasic.StepBasic_Array1OfPerson_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfPerson &
        :rtype: StepBasic_Array1OfPerson

        """
        return _StepBasic.StepBasic_Array1OfPerson_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfPerson_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfPerson_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfPerson_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Person &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfPerson_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_Array1OfPerson_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_Array1OfPerson_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfPerson
StepBasic_Array1OfPerson.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Init, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Destroy, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_IsAllocated, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Assign, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Set, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Length, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Lower, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Upper, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_SetValue, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_Value, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfPerson_ChangeValue, None, StepBasic_Array1OfPerson)
StepBasic_Array1OfPerson_swigregister = _StepBasic.StepBasic_Array1OfPerson_swigregister
StepBasic_Array1OfPerson_swigregister(StepBasic_Array1OfPerson)

class StepBasic_Array1OfProduct(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_Product &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfProduct_swiginit(self, _StepBasic.new_StepBasic_Array1OfProduct(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Product &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProduct_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProduct_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfProduct_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfProduct &
        :rtype: StepBasic_Array1OfProduct

        """
        return _StepBasic.StepBasic_Array1OfProduct_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfProduct &
        :rtype: StepBasic_Array1OfProduct

        """
        return _StepBasic.StepBasic_Array1OfProduct_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProduct_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProduct_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProduct_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Product &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProduct_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_Array1OfProduct_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_Array1OfProduct_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfProduct
StepBasic_Array1OfProduct.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Init, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Destroy, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_IsAllocated, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Assign, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Set, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Length, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Lower, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Upper, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_SetValue, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_Value, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfProduct_ChangeValue, None, StepBasic_Array1OfProduct)
StepBasic_Array1OfProduct_swigregister = _StepBasic.StepBasic_Array1OfProduct_swigregister
StepBasic_Array1OfProduct_swigregister(StepBasic_Array1OfProduct)

class StepBasic_Array1OfProductContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_ProductContext &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfProductContext_swiginit(self, _StepBasic.new_StepBasic_Array1OfProductContext(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_ProductContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfProductContext_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfProductContext &
        :rtype: StepBasic_Array1OfProductContext

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfProductContext &
        :rtype: StepBasic_Array1OfProductContext

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_ProductContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProductContext_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductContext

        """
        return _StepBasic.StepBasic_Array1OfProductContext_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductContext

        """
        return _StepBasic.StepBasic_Array1OfProductContext_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfProductContext
StepBasic_Array1OfProductContext.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Init, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Destroy, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_IsAllocated, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Assign, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Set, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Length, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Lower, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Upper, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_SetValue, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_Value, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfProductContext_ChangeValue, None, StepBasic_Array1OfProductContext)
StepBasic_Array1OfProductContext_swigregister = _StepBasic.StepBasic_Array1OfProductContext_swigregister
StepBasic_Array1OfProductContext_swigregister(StepBasic_Array1OfProductContext)

class StepBasic_Array1OfProductDefinition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_ProductDefinition &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfProductDefinition_swiginit(self, _StepBasic.new_StepBasic_Array1OfProductDefinition(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfProductDefinition &
        :rtype: StepBasic_Array1OfProductDefinition

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfProductDefinition &
        :rtype: StepBasic_Array1OfProductDefinition

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_Array1OfProductDefinition_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfProductDefinition
StepBasic_Array1OfProductDefinition.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Init, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Destroy, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_IsAllocated, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Assign, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Set, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Length, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Lower, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Upper, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_SetValue, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_Value, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfProductDefinition_ChangeValue, None, StepBasic_Array1OfProductDefinition)
StepBasic_Array1OfProductDefinition_swigregister = _StepBasic.StepBasic_Array1OfProductDefinition_swigregister
StepBasic_Array1OfProductDefinition_swigregister(StepBasic_Array1OfProductDefinition)

class StepBasic_Array1OfUncertaintyMeasureWithUnit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepBasic_UncertaintyMeasureWithUnit &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_Array1OfUncertaintyMeasureWithUnit(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_UncertaintyMeasureWithUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfUncertaintyMeasureWithUnit &
        :rtype: StepBasic_Array1OfUncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepBasic_Array1OfUncertaintyMeasureWithUnit &
        :rtype: StepBasic_Array1OfUncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_UncertaintyMeasureWithUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_ChangeValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfUncertaintyMeasureWithUnit
StepBasic_Array1OfUncertaintyMeasureWithUnit.Init = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Init, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Destroy = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Destroy, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.IsAllocated = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_IsAllocated, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Assign = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Assign, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Set = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Set, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Length = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Length, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Lower = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Lower, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Upper = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Upper, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.SetValue = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_SetValue, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.Value = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Value, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit.ChangeValue = new_instancemethod(_StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_ChangeValue, None, StepBasic_Array1OfUncertaintyMeasureWithUnit)
StepBasic_Array1OfUncertaintyMeasureWithUnit_swigregister = _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_swigregister
StepBasic_Array1OfUncertaintyMeasureWithUnit_swigregister(StepBasic_Array1OfUncertaintyMeasureWithUnit)

class StepBasic_Certification(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_Certification_swiginit(self, _StepBasic.new_StepBasic_Certification(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPurpose:
        :type aPurpose: Handle_TCollection_HAsciiString &
        :param aKind:
        :type aKind: Handle_StepBasic_CertificationType &
        :rtype: None

        """
        return _StepBasic.StepBasic_Certification_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Certification_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Certification_SetName(self, *args)


    def Purpose(self, *args):
        """
        * Returns field Purpose

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Certification_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        * Set field Purpose

        :param Purpose:
        :type Purpose: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Certification_SetPurpose(self, *args)


    def Kind(self, *args):
        """
        * Returns field Kind

        :rtype: Handle_StepBasic_CertificationType

        """
        return _StepBasic.StepBasic_Certification_Kind(self, *args)


    def SetKind(self, *args):
        """
        * Set field Kind

        :param Kind:
        :type Kind: Handle_StepBasic_CertificationType &
        :rtype: None

        """
        return _StepBasic.StepBasic_Certification_SetKind(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Certification(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Certification
StepBasic_Certification.Init = new_instancemethod(_StepBasic.StepBasic_Certification_Init, None, StepBasic_Certification)
StepBasic_Certification.Name = new_instancemethod(_StepBasic.StepBasic_Certification_Name, None, StepBasic_Certification)
StepBasic_Certification.SetName = new_instancemethod(_StepBasic.StepBasic_Certification_SetName, None, StepBasic_Certification)
StepBasic_Certification.Purpose = new_instancemethod(_StepBasic.StepBasic_Certification_Purpose, None, StepBasic_Certification)
StepBasic_Certification.SetPurpose = new_instancemethod(_StepBasic.StepBasic_Certification_SetPurpose, None, StepBasic_Certification)
StepBasic_Certification.Kind = new_instancemethod(_StepBasic.StepBasic_Certification_Kind, None, StepBasic_Certification)
StepBasic_Certification.SetKind = new_instancemethod(_StepBasic.StepBasic_Certification_SetKind, None, StepBasic_Certification)
StepBasic_Certification_swigregister = _StepBasic.StepBasic_Certification_swigregister
StepBasic_Certification_swigregister(StepBasic_Certification)

class Handle_StepBasic_Certification(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Certification_swiginit(self, _StepBasic.new_Handle_StepBasic_Certification(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Certification_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Certification
Handle_StepBasic_Certification.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Certification_Nullify, None, Handle_StepBasic_Certification)
Handle_StepBasic_Certification.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Certification_IsNull, None, Handle_StepBasic_Certification)
Handle_StepBasic_Certification.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Certification_GetObject, None, Handle_StepBasic_Certification)
Handle_StepBasic_Certification_swigregister = _StepBasic.Handle_StepBasic_Certification_swigregister
Handle_StepBasic_Certification_swigregister(Handle_StepBasic_Certification)

def Handle_StepBasic_Certification_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Certification_DownCast(AnObject)
Handle_StepBasic_Certification_DownCast = _StepBasic.Handle_StepBasic_Certification_DownCast

class StepBasic_CertificationAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_CertificationAssignment_swiginit(self, _StepBasic.new_StepBasic_CertificationAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedCertification:
        :type aAssignedCertification: Handle_StepBasic_Certification &
        :rtype: None

        """
        return _StepBasic.StepBasic_CertificationAssignment_Init(self, *args)


    def AssignedCertification(self, *args):
        """
        * Returns field AssignedCertification

        :rtype: Handle_StepBasic_Certification

        """
        return _StepBasic.StepBasic_CertificationAssignment_AssignedCertification(self, *args)


    def SetAssignedCertification(self, *args):
        """
        * Set field AssignedCertification

        :param AssignedCertification:
        :type AssignedCertification: Handle_StepBasic_Certification &
        :rtype: None

        """
        return _StepBasic.StepBasic_CertificationAssignment_SetAssignedCertification(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_CertificationAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_CertificationAssignment
StepBasic_CertificationAssignment.Init = new_instancemethod(_StepBasic.StepBasic_CertificationAssignment_Init, None, StepBasic_CertificationAssignment)
StepBasic_CertificationAssignment.AssignedCertification = new_instancemethod(_StepBasic.StepBasic_CertificationAssignment_AssignedCertification, None, StepBasic_CertificationAssignment)
StepBasic_CertificationAssignment.SetAssignedCertification = new_instancemethod(_StepBasic.StepBasic_CertificationAssignment_SetAssignedCertification, None, StepBasic_CertificationAssignment)
StepBasic_CertificationAssignment_swigregister = _StepBasic.StepBasic_CertificationAssignment_swigregister
StepBasic_CertificationAssignment_swigregister(StepBasic_CertificationAssignment)

class Handle_StepBasic_CertificationAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_CertificationAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_CertificationAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_CertificationAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_CertificationAssignment
Handle_StepBasic_CertificationAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_CertificationAssignment_Nullify, None, Handle_StepBasic_CertificationAssignment)
Handle_StepBasic_CertificationAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_CertificationAssignment_IsNull, None, Handle_StepBasic_CertificationAssignment)
Handle_StepBasic_CertificationAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_CertificationAssignment_GetObject, None, Handle_StepBasic_CertificationAssignment)
Handle_StepBasic_CertificationAssignment_swigregister = _StepBasic.Handle_StepBasic_CertificationAssignment_swigregister
Handle_StepBasic_CertificationAssignment_swigregister(Handle_StepBasic_CertificationAssignment)

def Handle_StepBasic_CertificationAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_CertificationAssignment_DownCast(AnObject)
Handle_StepBasic_CertificationAssignment_DownCast = _StepBasic.Handle_StepBasic_CertificationAssignment_DownCast

class StepBasic_CertificationType(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_CertificationType_swiginit(self, _StepBasic.new_StepBasic_CertificationType(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_CertificationType_Init(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_CertificationType_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_CertificationType_SetDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_CertificationType(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_CertificationType
StepBasic_CertificationType.Init = new_instancemethod(_StepBasic.StepBasic_CertificationType_Init, None, StepBasic_CertificationType)
StepBasic_CertificationType.Description = new_instancemethod(_StepBasic.StepBasic_CertificationType_Description, None, StepBasic_CertificationType)
StepBasic_CertificationType.SetDescription = new_instancemethod(_StepBasic.StepBasic_CertificationType_SetDescription, None, StepBasic_CertificationType)
StepBasic_CertificationType_swigregister = _StepBasic.StepBasic_CertificationType_swigregister
StepBasic_CertificationType_swigregister(StepBasic_CertificationType)

class Handle_StepBasic_CertificationType(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_CertificationType_swiginit(self, _StepBasic.new_Handle_StepBasic_CertificationType(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_CertificationType_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_CertificationType
Handle_StepBasic_CertificationType.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_CertificationType_Nullify, None, Handle_StepBasic_CertificationType)
Handle_StepBasic_CertificationType.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_CertificationType_IsNull, None, Handle_StepBasic_CertificationType)
Handle_StepBasic_CertificationType.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_CertificationType_GetObject, None, Handle_StepBasic_CertificationType)
Handle_StepBasic_CertificationType_swigregister = _StepBasic.Handle_StepBasic_CertificationType_swigregister
Handle_StepBasic_CertificationType_swigregister(Handle_StepBasic_CertificationType)

def Handle_StepBasic_CertificationType_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_CertificationType_DownCast(AnObject)
Handle_StepBasic_CertificationType_DownCast = _StepBasic.Handle_StepBasic_CertificationType_DownCast

class StepBasic_CharacterizedObject(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_CharacterizedObject_swiginit(self, _StepBasic.new_StepBasic_CharacterizedObject(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_CharacterizedObject_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_CharacterizedObject_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_CharacterizedObject_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_CharacterizedObject_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_CharacterizedObject_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_CharacterizedObject_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_CharacterizedObject(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_CharacterizedObject
StepBasic_CharacterizedObject.Init = new_instancemethod(_StepBasic.StepBasic_CharacterizedObject_Init, None, StepBasic_CharacterizedObject)
StepBasic_CharacterizedObject.Name = new_instancemethod(_StepBasic.StepBasic_CharacterizedObject_Name, None, StepBasic_CharacterizedObject)
StepBasic_CharacterizedObject.SetName = new_instancemethod(_StepBasic.StepBasic_CharacterizedObject_SetName, None, StepBasic_CharacterizedObject)
StepBasic_CharacterizedObject.Description = new_instancemethod(_StepBasic.StepBasic_CharacterizedObject_Description, None, StepBasic_CharacterizedObject)
StepBasic_CharacterizedObject.SetDescription = new_instancemethod(_StepBasic.StepBasic_CharacterizedObject_SetDescription, None, StepBasic_CharacterizedObject)
StepBasic_CharacterizedObject.HasDescription = new_instancemethod(_StepBasic.StepBasic_CharacterizedObject_HasDescription, None, StepBasic_CharacterizedObject)
StepBasic_CharacterizedObject_swigregister = _StepBasic.StepBasic_CharacterizedObject_swigregister
StepBasic_CharacterizedObject_swigregister(StepBasic_CharacterizedObject)

class Handle_StepBasic_CharacterizedObject(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_CharacterizedObject_swiginit(self, _StepBasic.new_Handle_StepBasic_CharacterizedObject(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_CharacterizedObject_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_CharacterizedObject
Handle_StepBasic_CharacterizedObject.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_CharacterizedObject_Nullify, None, Handle_StepBasic_CharacterizedObject)
Handle_StepBasic_CharacterizedObject.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_CharacterizedObject_IsNull, None, Handle_StepBasic_CharacterizedObject)
Handle_StepBasic_CharacterizedObject.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_CharacterizedObject_GetObject, None, Handle_StepBasic_CharacterizedObject)
Handle_StepBasic_CharacterizedObject_swigregister = _StepBasic.Handle_StepBasic_CharacterizedObject_swigregister
Handle_StepBasic_CharacterizedObject_swigregister(Handle_StepBasic_CharacterizedObject)

def Handle_StepBasic_CharacterizedObject_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_CharacterizedObject_DownCast(AnObject)
Handle_StepBasic_CharacterizedObject_DownCast = _StepBasic.Handle_StepBasic_CharacterizedObject_DownCast

class StepBasic_Contract(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_Contract_swiginit(self, _StepBasic.new_StepBasic_Contract(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPurpose:
        :type aPurpose: Handle_TCollection_HAsciiString &
        :param aKind:
        :type aKind: Handle_StepBasic_ContractType &
        :rtype: None

        """
        return _StepBasic.StepBasic_Contract_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Contract_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Contract_SetName(self, *args)


    def Purpose(self, *args):
        """
        * Returns field Purpose

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Contract_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        * Set field Purpose

        :param Purpose:
        :type Purpose: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Contract_SetPurpose(self, *args)


    def Kind(self, *args):
        """
        * Returns field Kind

        :rtype: Handle_StepBasic_ContractType

        """
        return _StepBasic.StepBasic_Contract_Kind(self, *args)


    def SetKind(self, *args):
        """
        * Set field Kind

        :param Kind:
        :type Kind: Handle_StepBasic_ContractType &
        :rtype: None

        """
        return _StepBasic.StepBasic_Contract_SetKind(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Contract(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Contract
StepBasic_Contract.Init = new_instancemethod(_StepBasic.StepBasic_Contract_Init, None, StepBasic_Contract)
StepBasic_Contract.Name = new_instancemethod(_StepBasic.StepBasic_Contract_Name, None, StepBasic_Contract)
StepBasic_Contract.SetName = new_instancemethod(_StepBasic.StepBasic_Contract_SetName, None, StepBasic_Contract)
StepBasic_Contract.Purpose = new_instancemethod(_StepBasic.StepBasic_Contract_Purpose, None, StepBasic_Contract)
StepBasic_Contract.SetPurpose = new_instancemethod(_StepBasic.StepBasic_Contract_SetPurpose, None, StepBasic_Contract)
StepBasic_Contract.Kind = new_instancemethod(_StepBasic.StepBasic_Contract_Kind, None, StepBasic_Contract)
StepBasic_Contract.SetKind = new_instancemethod(_StepBasic.StepBasic_Contract_SetKind, None, StepBasic_Contract)
StepBasic_Contract_swigregister = _StepBasic.StepBasic_Contract_swigregister
StepBasic_Contract_swigregister(StepBasic_Contract)

class Handle_StepBasic_Contract(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Contract_swiginit(self, _StepBasic.new_Handle_StepBasic_Contract(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Contract_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Contract
Handle_StepBasic_Contract.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Contract_Nullify, None, Handle_StepBasic_Contract)
Handle_StepBasic_Contract.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Contract_IsNull, None, Handle_StepBasic_Contract)
Handle_StepBasic_Contract.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Contract_GetObject, None, Handle_StepBasic_Contract)
Handle_StepBasic_Contract_swigregister = _StepBasic.Handle_StepBasic_Contract_swigregister
Handle_StepBasic_Contract_swigregister(Handle_StepBasic_Contract)

def Handle_StepBasic_Contract_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Contract_DownCast(AnObject)
Handle_StepBasic_Contract_DownCast = _StepBasic.Handle_StepBasic_Contract_DownCast

class StepBasic_ContractAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ContractAssignment_swiginit(self, _StepBasic.new_StepBasic_ContractAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedContract:
        :type aAssignedContract: Handle_StepBasic_Contract &
        :rtype: None

        """
        return _StepBasic.StepBasic_ContractAssignment_Init(self, *args)


    def AssignedContract(self, *args):
        """
        * Returns field AssignedContract

        :rtype: Handle_StepBasic_Contract

        """
        return _StepBasic.StepBasic_ContractAssignment_AssignedContract(self, *args)


    def SetAssignedContract(self, *args):
        """
        * Set field AssignedContract

        :param AssignedContract:
        :type AssignedContract: Handle_StepBasic_Contract &
        :rtype: None

        """
        return _StepBasic.StepBasic_ContractAssignment_SetAssignedContract(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ContractAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ContractAssignment
StepBasic_ContractAssignment.Init = new_instancemethod(_StepBasic.StepBasic_ContractAssignment_Init, None, StepBasic_ContractAssignment)
StepBasic_ContractAssignment.AssignedContract = new_instancemethod(_StepBasic.StepBasic_ContractAssignment_AssignedContract, None, StepBasic_ContractAssignment)
StepBasic_ContractAssignment.SetAssignedContract = new_instancemethod(_StepBasic.StepBasic_ContractAssignment_SetAssignedContract, None, StepBasic_ContractAssignment)
StepBasic_ContractAssignment_swigregister = _StepBasic.StepBasic_ContractAssignment_swigregister
StepBasic_ContractAssignment_swigregister(StepBasic_ContractAssignment)

class Handle_StepBasic_ContractAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ContractAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_ContractAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ContractAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ContractAssignment
Handle_StepBasic_ContractAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ContractAssignment_Nullify, None, Handle_StepBasic_ContractAssignment)
Handle_StepBasic_ContractAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ContractAssignment_IsNull, None, Handle_StepBasic_ContractAssignment)
Handle_StepBasic_ContractAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ContractAssignment_GetObject, None, Handle_StepBasic_ContractAssignment)
Handle_StepBasic_ContractAssignment_swigregister = _StepBasic.Handle_StepBasic_ContractAssignment_swigregister
Handle_StepBasic_ContractAssignment_swigregister(Handle_StepBasic_ContractAssignment)

def Handle_StepBasic_ContractAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ContractAssignment_DownCast(AnObject)
Handle_StepBasic_ContractAssignment_DownCast = _StepBasic.Handle_StepBasic_ContractAssignment_DownCast

class StepBasic_ContractType(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ContractType_swiginit(self, _StepBasic.new_StepBasic_ContractType(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ContractType_Init(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ContractType_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ContractType_SetDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ContractType(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ContractType
StepBasic_ContractType.Init = new_instancemethod(_StepBasic.StepBasic_ContractType_Init, None, StepBasic_ContractType)
StepBasic_ContractType.Description = new_instancemethod(_StepBasic.StepBasic_ContractType_Description, None, StepBasic_ContractType)
StepBasic_ContractType.SetDescription = new_instancemethod(_StepBasic.StepBasic_ContractType_SetDescription, None, StepBasic_ContractType)
StepBasic_ContractType_swigregister = _StepBasic.StepBasic_ContractType_swigregister
StepBasic_ContractType_swigregister(StepBasic_ContractType)

class Handle_StepBasic_ContractType(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ContractType_swiginit(self, _StepBasic.new_Handle_StepBasic_ContractType(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ContractType_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ContractType
Handle_StepBasic_ContractType.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ContractType_Nullify, None, Handle_StepBasic_ContractType)
Handle_StepBasic_ContractType.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ContractType_IsNull, None, Handle_StepBasic_ContractType)
Handle_StepBasic_ContractType.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ContractType_GetObject, None, Handle_StepBasic_ContractType)
Handle_StepBasic_ContractType_swigregister = _StepBasic.Handle_StepBasic_ContractType_swigregister
Handle_StepBasic_ContractType_swigregister(Handle_StepBasic_ContractType)

def Handle_StepBasic_ContractType_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ContractType_DownCast(AnObject)
Handle_StepBasic_ContractType_DownCast = _StepBasic.Handle_StepBasic_ContractType_DownCast

class StepBasic_CoordinatedUniversalTimeOffset(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CoordinatedUniversalTimeOffset

        :rtype: None

        """
        _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_swiginit(self, _StepBasic.new_StepBasic_CoordinatedUniversalTimeOffset(*args))

    def Init(self, *args):
        """
        :param aHourOffset:
        :type aHourOffset: int
        :param hasAminuteOffset:
        :type hasAminuteOffset: bool
        :param aMinuteOffset:
        :type aMinuteOffset: int
        :param aSense:
        :type aSense: StepBasic_AheadOrBehind
        :rtype: void

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_Init(self, *args)


    def SetHourOffset(self, *args):
        """
        :param aHourOffset:
        :type aHourOffset: int
        :rtype: None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetHourOffset(self, *args)


    def HourOffset(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_HourOffset(self, *args)


    def SetMinuteOffset(self, *args):
        """
        :param aMinuteOffset:
        :type aMinuteOffset: int
        :rtype: None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetMinuteOffset(self, *args)


    def UnSetMinuteOffset(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_UnSetMinuteOffset(self, *args)


    def MinuteOffset(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_MinuteOffset(self, *args)


    def HasMinuteOffset(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_HasMinuteOffset(self, *args)


    def SetSense(self, *args):
        """
        :param aSense:
        :type aSense: StepBasic_AheadOrBehind
        :rtype: None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetSense(self, *args)


    def Sense(self, *args):
        """
        :rtype: StepBasic_AheadOrBehind

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_Sense(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_CoordinatedUniversalTimeOffset(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_CoordinatedUniversalTimeOffset
StepBasic_CoordinatedUniversalTimeOffset.Init = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_Init, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.SetHourOffset = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetHourOffset, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.HourOffset = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_HourOffset, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.SetMinuteOffset = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetMinuteOffset, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.UnSetMinuteOffset = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_UnSetMinuteOffset, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.MinuteOffset = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_MinuteOffset, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.HasMinuteOffset = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_HasMinuteOffset, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.SetSense = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetSense, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset.Sense = new_instancemethod(_StepBasic.StepBasic_CoordinatedUniversalTimeOffset_Sense, None, StepBasic_CoordinatedUniversalTimeOffset)
StepBasic_CoordinatedUniversalTimeOffset_swigregister = _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_swigregister
StepBasic_CoordinatedUniversalTimeOffset_swigregister(StepBasic_CoordinatedUniversalTimeOffset)

class Handle_StepBasic_CoordinatedUniversalTimeOffset(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_swiginit(self, _StepBasic.new_Handle_StepBasic_CoordinatedUniversalTimeOffset(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_CoordinatedUniversalTimeOffset
Handle_StepBasic_CoordinatedUniversalTimeOffset.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_Nullify, None, Handle_StepBasic_CoordinatedUniversalTimeOffset)
Handle_StepBasic_CoordinatedUniversalTimeOffset.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_IsNull, None, Handle_StepBasic_CoordinatedUniversalTimeOffset)
Handle_StepBasic_CoordinatedUniversalTimeOffset.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_GetObject, None, Handle_StepBasic_CoordinatedUniversalTimeOffset)
Handle_StepBasic_CoordinatedUniversalTimeOffset_swigregister = _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_swigregister
Handle_StepBasic_CoordinatedUniversalTimeOffset_swigregister(Handle_StepBasic_CoordinatedUniversalTimeOffset)

def Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast(AnObject)
Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast = _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast

class StepBasic_Date(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Date

        :rtype: None

        """
        _StepBasic.StepBasic_Date_swiginit(self, _StepBasic.new_StepBasic_Date(*args))

    def Init(self, *args):
        """
        :param aYearComponent:
        :type aYearComponent: int
        :rtype: void

        """
        return _StepBasic.StepBasic_Date_Init(self, *args)


    def SetYearComponent(self, *args):
        """
        :param aYearComponent:
        :type aYearComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_Date_SetYearComponent(self, *args)


    def YearComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Date_YearComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Date(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Date
StepBasic_Date.Init = new_instancemethod(_StepBasic.StepBasic_Date_Init, None, StepBasic_Date)
StepBasic_Date.SetYearComponent = new_instancemethod(_StepBasic.StepBasic_Date_SetYearComponent, None, StepBasic_Date)
StepBasic_Date.YearComponent = new_instancemethod(_StepBasic.StepBasic_Date_YearComponent, None, StepBasic_Date)
StepBasic_Date_swigregister = _StepBasic.StepBasic_Date_swigregister
StepBasic_Date_swigregister(StepBasic_Date)

class Handle_StepBasic_Date(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Date_swiginit(self, _StepBasic.new_Handle_StepBasic_Date(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Date_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Date
Handle_StepBasic_Date.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Date_Nullify, None, Handle_StepBasic_Date)
Handle_StepBasic_Date.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Date_IsNull, None, Handle_StepBasic_Date)
Handle_StepBasic_Date.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Date_GetObject, None, Handle_StepBasic_Date)
Handle_StepBasic_Date_swigregister = _StepBasic.Handle_StepBasic_Date_swigregister
Handle_StepBasic_Date_swigregister(Handle_StepBasic_Date)

def Handle_StepBasic_Date_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Date_DownCast(AnObject)
Handle_StepBasic_Date_DownCast = _StepBasic.Handle_StepBasic_Date_DownCast

class StepBasic_DateAndTime(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DateAndTime

        :rtype: None

        """
        _StepBasic.StepBasic_DateAndTime_swiginit(self, _StepBasic.new_StepBasic_DateAndTime(*args))

    def Init(self, *args):
        """
        :param aDateComponent:
        :type aDateComponent: Handle_StepBasic_Date &
        :param aTimeComponent:
        :type aTimeComponent: Handle_StepBasic_LocalTime &
        :rtype: void

        """
        return _StepBasic.StepBasic_DateAndTime_Init(self, *args)


    def SetDateComponent(self, *args):
        """
        :param aDateComponent:
        :type aDateComponent: Handle_StepBasic_Date &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateAndTime_SetDateComponent(self, *args)


    def DateComponent(self, *args):
        """
        :rtype: Handle_StepBasic_Date

        """
        return _StepBasic.StepBasic_DateAndTime_DateComponent(self, *args)


    def SetTimeComponent(self, *args):
        """
        :param aTimeComponent:
        :type aTimeComponent: Handle_StepBasic_LocalTime &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateAndTime_SetTimeComponent(self, *args)


    def TimeComponent(self, *args):
        """
        :rtype: Handle_StepBasic_LocalTime

        """
        return _StepBasic.StepBasic_DateAndTime_TimeComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DateAndTime(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateAndTime
StepBasic_DateAndTime.Init = new_instancemethod(_StepBasic.StepBasic_DateAndTime_Init, None, StepBasic_DateAndTime)
StepBasic_DateAndTime.SetDateComponent = new_instancemethod(_StepBasic.StepBasic_DateAndTime_SetDateComponent, None, StepBasic_DateAndTime)
StepBasic_DateAndTime.DateComponent = new_instancemethod(_StepBasic.StepBasic_DateAndTime_DateComponent, None, StepBasic_DateAndTime)
StepBasic_DateAndTime.SetTimeComponent = new_instancemethod(_StepBasic.StepBasic_DateAndTime_SetTimeComponent, None, StepBasic_DateAndTime)
StepBasic_DateAndTime.TimeComponent = new_instancemethod(_StepBasic.StepBasic_DateAndTime_TimeComponent, None, StepBasic_DateAndTime)
StepBasic_DateAndTime_swigregister = _StepBasic.StepBasic_DateAndTime_swigregister
StepBasic_DateAndTime_swigregister(StepBasic_DateAndTime)

class Handle_StepBasic_DateAndTime(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DateAndTime_swiginit(self, _StepBasic.new_Handle_StepBasic_DateAndTime(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DateAndTime_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DateAndTime
Handle_StepBasic_DateAndTime.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DateAndTime_Nullify, None, Handle_StepBasic_DateAndTime)
Handle_StepBasic_DateAndTime.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DateAndTime_IsNull, None, Handle_StepBasic_DateAndTime)
Handle_StepBasic_DateAndTime.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DateAndTime_GetObject, None, Handle_StepBasic_DateAndTime)
Handle_StepBasic_DateAndTime_swigregister = _StepBasic.Handle_StepBasic_DateAndTime_swigregister
Handle_StepBasic_DateAndTime_swigregister(Handle_StepBasic_DateAndTime)

def Handle_StepBasic_DateAndTime_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DateAndTime_DownCast(AnObject)
Handle_StepBasic_DateAndTime_DownCast = _StepBasic.Handle_StepBasic_DateAndTime_DownCast

class StepBasic_DateAndTimeAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        :param aAssignedDateAndTime:
        :type aAssignedDateAndTime: Handle_StepBasic_DateAndTime &
        :param aRole:
        :type aRole: Handle_StepBasic_DateTimeRole &
        :rtype: void

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_Init(self, *args)


    def SetAssignedDateAndTime(self, *args):
        """
        :param aAssignedDateAndTime:
        :type aAssignedDateAndTime: Handle_StepBasic_DateAndTime &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_SetAssignedDateAndTime(self, *args)


    def AssignedDateAndTime(self, *args):
        """
        :rtype: Handle_StepBasic_DateAndTime

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_AssignedDateAndTime(self, *args)


    def SetRole(self, *args):
        """
        :param aRole:
        :type aRole: Handle_StepBasic_DateTimeRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        :rtype: Handle_StepBasic_DateTimeRole

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_Role(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DateAndTimeAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateAndTimeAssignment
StepBasic_DateAndTimeAssignment.Init = new_instancemethod(_StepBasic.StepBasic_DateAndTimeAssignment_Init, None, StepBasic_DateAndTimeAssignment)
StepBasic_DateAndTimeAssignment.SetAssignedDateAndTime = new_instancemethod(_StepBasic.StepBasic_DateAndTimeAssignment_SetAssignedDateAndTime, None, StepBasic_DateAndTimeAssignment)
StepBasic_DateAndTimeAssignment.AssignedDateAndTime = new_instancemethod(_StepBasic.StepBasic_DateAndTimeAssignment_AssignedDateAndTime, None, StepBasic_DateAndTimeAssignment)
StepBasic_DateAndTimeAssignment.SetRole = new_instancemethod(_StepBasic.StepBasic_DateAndTimeAssignment_SetRole, None, StepBasic_DateAndTimeAssignment)
StepBasic_DateAndTimeAssignment.Role = new_instancemethod(_StepBasic.StepBasic_DateAndTimeAssignment_Role, None, StepBasic_DateAndTimeAssignment)
StepBasic_DateAndTimeAssignment_swigregister = _StepBasic.StepBasic_DateAndTimeAssignment_swigregister
StepBasic_DateAndTimeAssignment_swigregister(StepBasic_DateAndTimeAssignment)

class Handle_StepBasic_DateAndTimeAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DateAndTimeAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_DateAndTimeAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DateAndTimeAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DateAndTimeAssignment
Handle_StepBasic_DateAndTimeAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DateAndTimeAssignment_Nullify, None, Handle_StepBasic_DateAndTimeAssignment)
Handle_StepBasic_DateAndTimeAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DateAndTimeAssignment_IsNull, None, Handle_StepBasic_DateAndTimeAssignment)
Handle_StepBasic_DateAndTimeAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DateAndTimeAssignment_GetObject, None, Handle_StepBasic_DateAndTimeAssignment)
Handle_StepBasic_DateAndTimeAssignment_swigregister = _StepBasic.Handle_StepBasic_DateAndTimeAssignment_swigregister
Handle_StepBasic_DateAndTimeAssignment_swigregister(Handle_StepBasic_DateAndTimeAssignment)

def Handle_StepBasic_DateAndTimeAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DateAndTimeAssignment_DownCast(AnObject)
Handle_StepBasic_DateAndTimeAssignment_DownCast = _StepBasic.Handle_StepBasic_DateAndTimeAssignment_DownCast

class StepBasic_DateAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        :param aAssignedDate:
        :type aAssignedDate: Handle_StepBasic_Date &
        :param aRole:
        :type aRole: Handle_StepBasic_DateRole &
        :rtype: void

        """
        return _StepBasic.StepBasic_DateAssignment_Init(self, *args)


    def SetAssignedDate(self, *args):
        """
        :param aAssignedDate:
        :type aAssignedDate: Handle_StepBasic_Date &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateAssignment_SetAssignedDate(self, *args)


    def AssignedDate(self, *args):
        """
        :rtype: Handle_StepBasic_Date

        """
        return _StepBasic.StepBasic_DateAssignment_AssignedDate(self, *args)


    def SetRole(self, *args):
        """
        :param aRole:
        :type aRole: Handle_StepBasic_DateRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        :rtype: Handle_StepBasic_DateRole

        """
        return _StepBasic.StepBasic_DateAssignment_Role(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DateAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateAssignment
StepBasic_DateAssignment.Init = new_instancemethod(_StepBasic.StepBasic_DateAssignment_Init, None, StepBasic_DateAssignment)
StepBasic_DateAssignment.SetAssignedDate = new_instancemethod(_StepBasic.StepBasic_DateAssignment_SetAssignedDate, None, StepBasic_DateAssignment)
StepBasic_DateAssignment.AssignedDate = new_instancemethod(_StepBasic.StepBasic_DateAssignment_AssignedDate, None, StepBasic_DateAssignment)
StepBasic_DateAssignment.SetRole = new_instancemethod(_StepBasic.StepBasic_DateAssignment_SetRole, None, StepBasic_DateAssignment)
StepBasic_DateAssignment.Role = new_instancemethod(_StepBasic.StepBasic_DateAssignment_Role, None, StepBasic_DateAssignment)
StepBasic_DateAssignment_swigregister = _StepBasic.StepBasic_DateAssignment_swigregister
StepBasic_DateAssignment_swigregister(StepBasic_DateAssignment)

class Handle_StepBasic_DateAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DateAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_DateAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DateAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DateAssignment
Handle_StepBasic_DateAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DateAssignment_Nullify, None, Handle_StepBasic_DateAssignment)
Handle_StepBasic_DateAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DateAssignment_IsNull, None, Handle_StepBasic_DateAssignment)
Handle_StepBasic_DateAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DateAssignment_GetObject, None, Handle_StepBasic_DateAssignment)
Handle_StepBasic_DateAssignment_swigregister = _StepBasic.Handle_StepBasic_DateAssignment_swigregister
Handle_StepBasic_DateAssignment_swigregister(Handle_StepBasic_DateAssignment)

def Handle_StepBasic_DateAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DateAssignment_DownCast(AnObject)
Handle_StepBasic_DateAssignment_DownCast = _StepBasic.Handle_StepBasic_DateAssignment_DownCast

class StepBasic_DateRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DateRole

        :rtype: None

        """
        _StepBasic.StepBasic_DateRole_swiginit(self, _StepBasic.new_StepBasic_DateRole(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_DateRole_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateRole_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DateRole_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DateRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateRole
StepBasic_DateRole.Init = new_instancemethod(_StepBasic.StepBasic_DateRole_Init, None, StepBasic_DateRole)
StepBasic_DateRole.SetName = new_instancemethod(_StepBasic.StepBasic_DateRole_SetName, None, StepBasic_DateRole)
StepBasic_DateRole.Name = new_instancemethod(_StepBasic.StepBasic_DateRole_Name, None, StepBasic_DateRole)
StepBasic_DateRole_swigregister = _StepBasic.StepBasic_DateRole_swigregister
StepBasic_DateRole_swigregister(StepBasic_DateRole)

class Handle_StepBasic_DateRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DateRole_swiginit(self, _StepBasic.new_Handle_StepBasic_DateRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DateRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DateRole
Handle_StepBasic_DateRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DateRole_Nullify, None, Handle_StepBasic_DateRole)
Handle_StepBasic_DateRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DateRole_IsNull, None, Handle_StepBasic_DateRole)
Handle_StepBasic_DateRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DateRole_GetObject, None, Handle_StepBasic_DateRole)
Handle_StepBasic_DateRole_swigregister = _StepBasic.Handle_StepBasic_DateRole_swigregister
Handle_StepBasic_DateRole_swigregister(Handle_StepBasic_DateRole)

def Handle_StepBasic_DateRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DateRole_DownCast(AnObject)
Handle_StepBasic_DateRole_DownCast = _StepBasic.Handle_StepBasic_DateRole_DownCast

class StepBasic_DateTimeRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DateTimeRole

        :rtype: None

        """
        _StepBasic.StepBasic_DateTimeRole_swiginit(self, _StepBasic.new_StepBasic_DateTimeRole(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_DateTimeRole_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DateTimeRole_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DateTimeRole_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DateTimeRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateTimeRole
StepBasic_DateTimeRole.Init = new_instancemethod(_StepBasic.StepBasic_DateTimeRole_Init, None, StepBasic_DateTimeRole)
StepBasic_DateTimeRole.SetName = new_instancemethod(_StepBasic.StepBasic_DateTimeRole_SetName, None, StepBasic_DateTimeRole)
StepBasic_DateTimeRole.Name = new_instancemethod(_StepBasic.StepBasic_DateTimeRole_Name, None, StepBasic_DateTimeRole)
StepBasic_DateTimeRole_swigregister = _StepBasic.StepBasic_DateTimeRole_swigregister
StepBasic_DateTimeRole_swigregister(StepBasic_DateTimeRole)

class Handle_StepBasic_DateTimeRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DateTimeRole_swiginit(self, _StepBasic.new_Handle_StepBasic_DateTimeRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DateTimeRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DateTimeRole
Handle_StepBasic_DateTimeRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DateTimeRole_Nullify, None, Handle_StepBasic_DateTimeRole)
Handle_StepBasic_DateTimeRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DateTimeRole_IsNull, None, Handle_StepBasic_DateTimeRole)
Handle_StepBasic_DateTimeRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DateTimeRole_GetObject, None, Handle_StepBasic_DateTimeRole)
Handle_StepBasic_DateTimeRole_swigregister = _StepBasic.Handle_StepBasic_DateTimeRole_swigregister
Handle_StepBasic_DateTimeRole_swigregister(Handle_StepBasic_DateTimeRole)

def Handle_StepBasic_DateTimeRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DateTimeRole_DownCast(AnObject)
Handle_StepBasic_DateTimeRole_DownCast = _StepBasic.Handle_StepBasic_DateTimeRole_DownCast

class StepBasic_DateTimeSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DateTimeSelect SelectType

        :rtype: None

        """
        _StepBasic.StepBasic_DateTimeSelect_swiginit(self, _StepBasic.new_StepBasic_DateTimeSelect(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a DateTimeSelect Kind Entity that is : 1 -> Date 2 -> LocalTime 3 -> DateAndTime 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_DateTimeSelect_CaseNum(self, *args)


    def Date(self, *args):
        """
        * returns Value as a Date (Null if another type)

        :rtype: Handle_StepBasic_Date

        """
        return _StepBasic.StepBasic_DateTimeSelect_Date(self, *args)


    def LocalTime(self, *args):
        """
        * returns Value as a LocalTime (Null if another type)

        :rtype: Handle_StepBasic_LocalTime

        """
        return _StepBasic.StepBasic_DateTimeSelect_LocalTime(self, *args)


    def DateAndTime(self, *args):
        """
        * returns Value as a DateAndTime (Null if another type)

        :rtype: Handle_StepBasic_DateAndTime

        """
        return _StepBasic.StepBasic_DateTimeSelect_DateAndTime(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateTimeSelect
StepBasic_DateTimeSelect.CaseNum = new_instancemethod(_StepBasic.StepBasic_DateTimeSelect_CaseNum, None, StepBasic_DateTimeSelect)
StepBasic_DateTimeSelect.Date = new_instancemethod(_StepBasic.StepBasic_DateTimeSelect_Date, None, StepBasic_DateTimeSelect)
StepBasic_DateTimeSelect.LocalTime = new_instancemethod(_StepBasic.StepBasic_DateTimeSelect_LocalTime, None, StepBasic_DateTimeSelect)
StepBasic_DateTimeSelect.DateAndTime = new_instancemethod(_StepBasic.StepBasic_DateTimeSelect_DateAndTime, None, StepBasic_DateTimeSelect)
StepBasic_DateTimeSelect_swigregister = _StepBasic.StepBasic_DateTimeSelect_swigregister
StepBasic_DateTimeSelect_swigregister(StepBasic_DateTimeSelect)

class StepBasic_DerivedUnit(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DerivedUnit_swiginit(self, _StepBasic.new_StepBasic_DerivedUnit(*args))

    def Init(self, *args):
        """
        :param elements:
        :type elements: Handle_StepBasic_HArray1OfDerivedUnitElement &
        :rtype: None

        """
        return _StepBasic.StepBasic_DerivedUnit_Init(self, *args)


    def SetElements(self, *args):
        """
        :param elements:
        :type elements: Handle_StepBasic_HArray1OfDerivedUnitElement &
        :rtype: None

        """
        return _StepBasic.StepBasic_DerivedUnit_SetElements(self, *args)


    def Elements(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfDerivedUnitElement

        """
        return _StepBasic.StepBasic_DerivedUnit_Elements(self, *args)


    def NbElements(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_DerivedUnit_NbElements(self, *args)


    def ElementsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_DerivedUnitElement

        """
        return _StepBasic.StepBasic_DerivedUnit_ElementsValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DerivedUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DerivedUnit
StepBasic_DerivedUnit.Init = new_instancemethod(_StepBasic.StepBasic_DerivedUnit_Init, None, StepBasic_DerivedUnit)
StepBasic_DerivedUnit.SetElements = new_instancemethod(_StepBasic.StepBasic_DerivedUnit_SetElements, None, StepBasic_DerivedUnit)
StepBasic_DerivedUnit.Elements = new_instancemethod(_StepBasic.StepBasic_DerivedUnit_Elements, None, StepBasic_DerivedUnit)
StepBasic_DerivedUnit.NbElements = new_instancemethod(_StepBasic.StepBasic_DerivedUnit_NbElements, None, StepBasic_DerivedUnit)
StepBasic_DerivedUnit.ElementsValue = new_instancemethod(_StepBasic.StepBasic_DerivedUnit_ElementsValue, None, StepBasic_DerivedUnit)
StepBasic_DerivedUnit_swigregister = _StepBasic.StepBasic_DerivedUnit_swigregister
StepBasic_DerivedUnit_swigregister(StepBasic_DerivedUnit)

class Handle_StepBasic_DerivedUnit(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DerivedUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_DerivedUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DerivedUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DerivedUnit
Handle_StepBasic_DerivedUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DerivedUnit_Nullify, None, Handle_StepBasic_DerivedUnit)
Handle_StepBasic_DerivedUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DerivedUnit_IsNull, None, Handle_StepBasic_DerivedUnit)
Handle_StepBasic_DerivedUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DerivedUnit_GetObject, None, Handle_StepBasic_DerivedUnit)
Handle_StepBasic_DerivedUnit_swigregister = _StepBasic.Handle_StepBasic_DerivedUnit_swigregister
Handle_StepBasic_DerivedUnit_swigregister(Handle_StepBasic_DerivedUnit)

def Handle_StepBasic_DerivedUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DerivedUnit_DownCast(AnObject)
Handle_StepBasic_DerivedUnit_DownCast = _StepBasic.Handle_StepBasic_DerivedUnit_DownCast

class StepBasic_DerivedUnitElement(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DerivedUnitElement_swiginit(self, _StepBasic.new_StepBasic_DerivedUnitElement(*args))

    def Init(self, *args):
        """
        :param aUnit:
        :type aUnit: Handle_StepBasic_NamedUnit &
        :param aExponent:
        :type aExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DerivedUnitElement_Init(self, *args)


    def SetUnit(self, *args):
        """
        :param aUnit:
        :type aUnit: Handle_StepBasic_NamedUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_DerivedUnitElement_SetUnit(self, *args)


    def Unit(self, *args):
        """
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepBasic.StepBasic_DerivedUnitElement_Unit(self, *args)


    def SetExponent(self, *args):
        """
        :param aExponent:
        :type aExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DerivedUnitElement_SetExponent(self, *args)


    def Exponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DerivedUnitElement_Exponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DerivedUnitElement(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DerivedUnitElement
StepBasic_DerivedUnitElement.Init = new_instancemethod(_StepBasic.StepBasic_DerivedUnitElement_Init, None, StepBasic_DerivedUnitElement)
StepBasic_DerivedUnitElement.SetUnit = new_instancemethod(_StepBasic.StepBasic_DerivedUnitElement_SetUnit, None, StepBasic_DerivedUnitElement)
StepBasic_DerivedUnitElement.Unit = new_instancemethod(_StepBasic.StepBasic_DerivedUnitElement_Unit, None, StepBasic_DerivedUnitElement)
StepBasic_DerivedUnitElement.SetExponent = new_instancemethod(_StepBasic.StepBasic_DerivedUnitElement_SetExponent, None, StepBasic_DerivedUnitElement)
StepBasic_DerivedUnitElement.Exponent = new_instancemethod(_StepBasic.StepBasic_DerivedUnitElement_Exponent, None, StepBasic_DerivedUnitElement)
StepBasic_DerivedUnitElement_swigregister = _StepBasic.StepBasic_DerivedUnitElement_swigregister
StepBasic_DerivedUnitElement_swigregister(StepBasic_DerivedUnitElement)

class Handle_StepBasic_DerivedUnitElement(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DerivedUnitElement_swiginit(self, _StepBasic.new_Handle_StepBasic_DerivedUnitElement(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DerivedUnitElement_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DerivedUnitElement
Handle_StepBasic_DerivedUnitElement.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DerivedUnitElement_Nullify, None, Handle_StepBasic_DerivedUnitElement)
Handle_StepBasic_DerivedUnitElement.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DerivedUnitElement_IsNull, None, Handle_StepBasic_DerivedUnitElement)
Handle_StepBasic_DerivedUnitElement.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DerivedUnitElement_GetObject, None, Handle_StepBasic_DerivedUnitElement)
Handle_StepBasic_DerivedUnitElement_swigregister = _StepBasic.Handle_StepBasic_DerivedUnitElement_swigregister
Handle_StepBasic_DerivedUnitElement_swigregister(Handle_StepBasic_DerivedUnitElement)

def Handle_StepBasic_DerivedUnitElement_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DerivedUnitElement_DownCast(AnObject)
Handle_StepBasic_DerivedUnitElement_DownCast = _StepBasic.Handle_StepBasic_DerivedUnitElement_DownCast

class StepBasic_DimensionalExponents(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DimensionalExponents

        :rtype: None

        """
        _StepBasic.StepBasic_DimensionalExponents_swiginit(self, _StepBasic.new_StepBasic_DimensionalExponents(*args))

    def Init(self, *args):
        """
        :param aLengthExponent:
        :type aLengthExponent: float
        :param aMassExponent:
        :type aMassExponent: float
        :param aTimeExponent:
        :type aTimeExponent: float
        :param aElectricCurrentExponent:
        :type aElectricCurrentExponent: float
        :param aThermodynamicTemperatureExponent:
        :type aThermodynamicTemperatureExponent: float
        :param aAmountOfSubstanceExponent:
        :type aAmountOfSubstanceExponent: float
        :param aLuminousIntensityExponent:
        :type aLuminousIntensityExponent: float
        :rtype: void

        """
        return _StepBasic.StepBasic_DimensionalExponents_Init(self, *args)


    def SetLengthExponent(self, *args):
        """
        :param aLengthExponent:
        :type aLengthExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetLengthExponent(self, *args)


    def LengthExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_LengthExponent(self, *args)


    def SetMassExponent(self, *args):
        """
        :param aMassExponent:
        :type aMassExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetMassExponent(self, *args)


    def MassExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_MassExponent(self, *args)


    def SetTimeExponent(self, *args):
        """
        :param aTimeExponent:
        :type aTimeExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetTimeExponent(self, *args)


    def TimeExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_TimeExponent(self, *args)


    def SetElectricCurrentExponent(self, *args):
        """
        :param aElectricCurrentExponent:
        :type aElectricCurrentExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetElectricCurrentExponent(self, *args)


    def ElectricCurrentExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_ElectricCurrentExponent(self, *args)


    def SetThermodynamicTemperatureExponent(self, *args):
        """
        :param aThermodynamicTemperatureExponent:
        :type aThermodynamicTemperatureExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetThermodynamicTemperatureExponent(self, *args)


    def ThermodynamicTemperatureExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_ThermodynamicTemperatureExponent(self, *args)


    def SetAmountOfSubstanceExponent(self, *args):
        """
        :param aAmountOfSubstanceExponent:
        :type aAmountOfSubstanceExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetAmountOfSubstanceExponent(self, *args)


    def AmountOfSubstanceExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_AmountOfSubstanceExponent(self, *args)


    def SetLuminousIntensityExponent(self, *args):
        """
        :param aLuminousIntensityExponent:
        :type aLuminousIntensityExponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetLuminousIntensityExponent(self, *args)


    def LuminousIntensityExponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_DimensionalExponents_LuminousIntensityExponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DimensionalExponents(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DimensionalExponents
StepBasic_DimensionalExponents.Init = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_Init, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetLengthExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetLengthExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.LengthExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_LengthExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetMassExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetMassExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.MassExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_MassExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetTimeExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetTimeExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.TimeExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_TimeExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetElectricCurrentExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetElectricCurrentExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.ElectricCurrentExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_ElectricCurrentExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetThermodynamicTemperatureExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetThermodynamicTemperatureExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.ThermodynamicTemperatureExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_ThermodynamicTemperatureExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetAmountOfSubstanceExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetAmountOfSubstanceExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.AmountOfSubstanceExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_AmountOfSubstanceExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.SetLuminousIntensityExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_SetLuminousIntensityExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents.LuminousIntensityExponent = new_instancemethod(_StepBasic.StepBasic_DimensionalExponents_LuminousIntensityExponent, None, StepBasic_DimensionalExponents)
StepBasic_DimensionalExponents_swigregister = _StepBasic.StepBasic_DimensionalExponents_swigregister
StepBasic_DimensionalExponents_swigregister(StepBasic_DimensionalExponents)

class Handle_StepBasic_DimensionalExponents(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DimensionalExponents_swiginit(self, _StepBasic.new_Handle_StepBasic_DimensionalExponents(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DimensionalExponents_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DimensionalExponents
Handle_StepBasic_DimensionalExponents.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DimensionalExponents_Nullify, None, Handle_StepBasic_DimensionalExponents)
Handle_StepBasic_DimensionalExponents.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DimensionalExponents_IsNull, None, Handle_StepBasic_DimensionalExponents)
Handle_StepBasic_DimensionalExponents.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DimensionalExponents_GetObject, None, Handle_StepBasic_DimensionalExponents)
Handle_StepBasic_DimensionalExponents_swigregister = _StepBasic.Handle_StepBasic_DimensionalExponents_swigregister
Handle_StepBasic_DimensionalExponents_swigregister(Handle_StepBasic_DimensionalExponents)

def Handle_StepBasic_DimensionalExponents_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DimensionalExponents_DownCast(AnObject)
Handle_StepBasic_DimensionalExponents_DownCast = _StepBasic.Handle_StepBasic_DimensionalExponents_DownCast

class StepBasic_Document(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_Document_swiginit(self, _StepBasic.new_StepBasic_Document(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aKind:
        :type aKind: Handle_StepBasic_DocumentType &
        :rtype: None

        """
        return _StepBasic.StepBasic_Document_Init(self, *args)


    def Id(self, *args):
        """
        * Returns field Id

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Document_Id(self, *args)


    def SetId(self, *args):
        """
        * Set field Id

        :param Id:
        :type Id: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Document_SetId(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Document_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Document_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Document_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Document_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_Document_HasDescription(self, *args)


    def Kind(self, *args):
        """
        * Returns field Kind

        :rtype: Handle_StepBasic_DocumentType

        """
        return _StepBasic.StepBasic_Document_Kind(self, *args)


    def SetKind(self, *args):
        """
        * Set field Kind

        :param Kind:
        :type Kind: Handle_StepBasic_DocumentType &
        :rtype: None

        """
        return _StepBasic.StepBasic_Document_SetKind(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Document(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Document
StepBasic_Document.Init = new_instancemethod(_StepBasic.StepBasic_Document_Init, None, StepBasic_Document)
StepBasic_Document.Id = new_instancemethod(_StepBasic.StepBasic_Document_Id, None, StepBasic_Document)
StepBasic_Document.SetId = new_instancemethod(_StepBasic.StepBasic_Document_SetId, None, StepBasic_Document)
StepBasic_Document.Name = new_instancemethod(_StepBasic.StepBasic_Document_Name, None, StepBasic_Document)
StepBasic_Document.SetName = new_instancemethod(_StepBasic.StepBasic_Document_SetName, None, StepBasic_Document)
StepBasic_Document.Description = new_instancemethod(_StepBasic.StepBasic_Document_Description, None, StepBasic_Document)
StepBasic_Document.SetDescription = new_instancemethod(_StepBasic.StepBasic_Document_SetDescription, None, StepBasic_Document)
StepBasic_Document.HasDescription = new_instancemethod(_StepBasic.StepBasic_Document_HasDescription, None, StepBasic_Document)
StepBasic_Document.Kind = new_instancemethod(_StepBasic.StepBasic_Document_Kind, None, StepBasic_Document)
StepBasic_Document.SetKind = new_instancemethod(_StepBasic.StepBasic_Document_SetKind, None, StepBasic_Document)
StepBasic_Document_swigregister = _StepBasic.StepBasic_Document_swigregister
StepBasic_Document_swigregister(StepBasic_Document)

class Handle_StepBasic_Document(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Document_swiginit(self, _StepBasic.new_Handle_StepBasic_Document(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Document_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Document
Handle_StepBasic_Document.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Document_Nullify, None, Handle_StepBasic_Document)
Handle_StepBasic_Document.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Document_IsNull, None, Handle_StepBasic_Document)
Handle_StepBasic_Document.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Document_GetObject, None, Handle_StepBasic_Document)
Handle_StepBasic_Document_swigregister = _StepBasic.Handle_StepBasic_Document_swigregister
Handle_StepBasic_Document_swigregister(Handle_StepBasic_Document)

def Handle_StepBasic_Document_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Document_DownCast(AnObject)
Handle_StepBasic_Document_DownCast = _StepBasic.Handle_StepBasic_Document_DownCast

class StepBasic_DocumentProductAssociation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_DocumentProductAssociation_swiginit(self, _StepBasic.new_StepBasic_DocumentProductAssociation(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aRelatingDocument:
        :type aRelatingDocument: Handle_StepBasic_Document &
        :param aRelatedProduct:
        :type aRelatedProduct: StepBasic_ProductOrFormationOrDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_HasDescription(self, *args)


    def RelatingDocument(self, *args):
        """
        * Returns field RelatingDocument

        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_RelatingDocument(self, *args)


    def SetRelatingDocument(self, *args):
        """
        * Set field RelatingDocument

        :param RelatingDocument:
        :type RelatingDocument: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetRelatingDocument(self, *args)


    def RelatedProduct(self, *args):
        """
        * Returns field RelatedProduct

        :rtype: StepBasic_ProductOrFormationOrDefinition

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_RelatedProduct(self, *args)


    def SetRelatedProduct(self, *args):
        """
        * Set field RelatedProduct

        :param RelatedProduct:
        :type RelatedProduct: StepBasic_ProductOrFormationOrDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetRelatedProduct(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentProductAssociation(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentProductAssociation
StepBasic_DocumentProductAssociation.Init = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_Init, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.Name = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_Name, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.SetName = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_SetName, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.Description = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_Description, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.SetDescription = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_SetDescription, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.HasDescription = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_HasDescription, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.RelatingDocument = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_RelatingDocument, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.SetRelatingDocument = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_SetRelatingDocument, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.RelatedProduct = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_RelatedProduct, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation.SetRelatedProduct = new_instancemethod(_StepBasic.StepBasic_DocumentProductAssociation_SetRelatedProduct, None, StepBasic_DocumentProductAssociation)
StepBasic_DocumentProductAssociation_swigregister = _StepBasic.StepBasic_DocumentProductAssociation_swigregister
StepBasic_DocumentProductAssociation_swigregister(StepBasic_DocumentProductAssociation)

class Handle_StepBasic_DocumentProductAssociation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentProductAssociation_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentProductAssociation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentProductAssociation_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentProductAssociation
Handle_StepBasic_DocumentProductAssociation.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentProductAssociation_Nullify, None, Handle_StepBasic_DocumentProductAssociation)
Handle_StepBasic_DocumentProductAssociation.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentProductAssociation_IsNull, None, Handle_StepBasic_DocumentProductAssociation)
Handle_StepBasic_DocumentProductAssociation.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentProductAssociation_GetObject, None, Handle_StepBasic_DocumentProductAssociation)
Handle_StepBasic_DocumentProductAssociation_swigregister = _StepBasic.Handle_StepBasic_DocumentProductAssociation_swigregister
Handle_StepBasic_DocumentProductAssociation_swigregister(Handle_StepBasic_DocumentProductAssociation)

def Handle_StepBasic_DocumentProductAssociation_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentProductAssociation_DownCast(AnObject)
Handle_StepBasic_DocumentProductAssociation_DownCast = _StepBasic.Handle_StepBasic_DocumentProductAssociation_DownCast

class StepBasic_DocumentReference(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init0(self, *args):
        """
        :param aAssignedDocument:
        :type aAssignedDocument: Handle_StepBasic_Document &
        :param aSource:
        :type aSource: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentReference_Init0(self, *args)


    def AssignedDocument(self, *args):
        """
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_DocumentReference_AssignedDocument(self, *args)


    def SetAssignedDocument(self, *args):
        """
        :param aAssignedDocument:
        :type aAssignedDocument: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentReference_SetAssignedDocument(self, *args)


    def Source(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentReference_Source(self, *args)


    def SetSource(self, *args):
        """
        :param aSource:
        :type aSource: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentReference_SetSource(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentReference(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentReference
StepBasic_DocumentReference.Init0 = new_instancemethod(_StepBasic.StepBasic_DocumentReference_Init0, None, StepBasic_DocumentReference)
StepBasic_DocumentReference.AssignedDocument = new_instancemethod(_StepBasic.StepBasic_DocumentReference_AssignedDocument, None, StepBasic_DocumentReference)
StepBasic_DocumentReference.SetAssignedDocument = new_instancemethod(_StepBasic.StepBasic_DocumentReference_SetAssignedDocument, None, StepBasic_DocumentReference)
StepBasic_DocumentReference.Source = new_instancemethod(_StepBasic.StepBasic_DocumentReference_Source, None, StepBasic_DocumentReference)
StepBasic_DocumentReference.SetSource = new_instancemethod(_StepBasic.StepBasic_DocumentReference_SetSource, None, StepBasic_DocumentReference)
StepBasic_DocumentReference_swigregister = _StepBasic.StepBasic_DocumentReference_swigregister
StepBasic_DocumentReference_swigregister(StepBasic_DocumentReference)

class Handle_StepBasic_DocumentReference(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentReference_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentReference(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentReference_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentReference
Handle_StepBasic_DocumentReference.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentReference_Nullify, None, Handle_StepBasic_DocumentReference)
Handle_StepBasic_DocumentReference.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentReference_IsNull, None, Handle_StepBasic_DocumentReference)
Handle_StepBasic_DocumentReference.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentReference_GetObject, None, Handle_StepBasic_DocumentReference)
Handle_StepBasic_DocumentReference_swigregister = _StepBasic.Handle_StepBasic_DocumentReference_swigregister
Handle_StepBasic_DocumentReference_swigregister(Handle_StepBasic_DocumentReference)

def Handle_StepBasic_DocumentReference_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentReference_DownCast(AnObject)
Handle_StepBasic_DocumentReference_DownCast = _StepBasic.Handle_StepBasic_DocumentReference_DownCast

class StepBasic_DocumentRelationship(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DocumentRelationship_swiginit(self, _StepBasic.new_StepBasic_DocumentRelationship(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aRelating:
        :type aRelating: Handle_StepBasic_Document &
        :param aRelated:
        :type aRelated: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRelationship_Init(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetDescription(self, *args)


    def RelatingDocument(self, *args):
        """
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_DocumentRelationship_RelatingDocument(self, *args)


    def SetRelatingDocument(self, *args):
        """
        :param aRelating:
        :type aRelating: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetRelatingDocument(self, *args)


    def RelatedDocument(self, *args):
        """
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_DocumentRelationship_RelatedDocument(self, *args)


    def SetRelatedDocument(self, *args):
        """
        :param aRelated:
        :type aRelated: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetRelatedDocument(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentRelationship(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentRelationship
StepBasic_DocumentRelationship.Init = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_Init, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.Name = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_Name, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.SetName = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_SetName, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.Description = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_Description, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.SetDescription = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_SetDescription, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.RelatingDocument = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_RelatingDocument, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.SetRelatingDocument = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_SetRelatingDocument, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.RelatedDocument = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_RelatedDocument, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship.SetRelatedDocument = new_instancemethod(_StepBasic.StepBasic_DocumentRelationship_SetRelatedDocument, None, StepBasic_DocumentRelationship)
StepBasic_DocumentRelationship_swigregister = _StepBasic.StepBasic_DocumentRelationship_swigregister
StepBasic_DocumentRelationship_swigregister(StepBasic_DocumentRelationship)

class Handle_StepBasic_DocumentRelationship(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentRelationship_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentRelationship(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentRelationship_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentRelationship
Handle_StepBasic_DocumentRelationship.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentRelationship_Nullify, None, Handle_StepBasic_DocumentRelationship)
Handle_StepBasic_DocumentRelationship.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentRelationship_IsNull, None, Handle_StepBasic_DocumentRelationship)
Handle_StepBasic_DocumentRelationship.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentRelationship_GetObject, None, Handle_StepBasic_DocumentRelationship)
Handle_StepBasic_DocumentRelationship_swigregister = _StepBasic.Handle_StepBasic_DocumentRelationship_swigregister
Handle_StepBasic_DocumentRelationship_swigregister(Handle_StepBasic_DocumentRelationship)

def Handle_StepBasic_DocumentRelationship_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentRelationship_DownCast(AnObject)
Handle_StepBasic_DocumentRelationship_DownCast = _StepBasic.Handle_StepBasic_DocumentRelationship_DownCast

class StepBasic_DocumentRepresentationType(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_DocumentRepresentationType_swiginit(self, _StepBasic.new_StepBasic_DocumentRepresentationType(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aRepresentedDocument:
        :type aRepresentedDocument: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_SetName(self, *args)


    def RepresentedDocument(self, *args):
        """
        * Returns field RepresentedDocument

        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_RepresentedDocument(self, *args)


    def SetRepresentedDocument(self, *args):
        """
        * Set field RepresentedDocument

        :param RepresentedDocument:
        :type RepresentedDocument: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_SetRepresentedDocument(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentRepresentationType(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentRepresentationType
StepBasic_DocumentRepresentationType.Init = new_instancemethod(_StepBasic.StepBasic_DocumentRepresentationType_Init, None, StepBasic_DocumentRepresentationType)
StepBasic_DocumentRepresentationType.Name = new_instancemethod(_StepBasic.StepBasic_DocumentRepresentationType_Name, None, StepBasic_DocumentRepresentationType)
StepBasic_DocumentRepresentationType.SetName = new_instancemethod(_StepBasic.StepBasic_DocumentRepresentationType_SetName, None, StepBasic_DocumentRepresentationType)
StepBasic_DocumentRepresentationType.RepresentedDocument = new_instancemethod(_StepBasic.StepBasic_DocumentRepresentationType_RepresentedDocument, None, StepBasic_DocumentRepresentationType)
StepBasic_DocumentRepresentationType.SetRepresentedDocument = new_instancemethod(_StepBasic.StepBasic_DocumentRepresentationType_SetRepresentedDocument, None, StepBasic_DocumentRepresentationType)
StepBasic_DocumentRepresentationType_swigregister = _StepBasic.StepBasic_DocumentRepresentationType_swigregister
StepBasic_DocumentRepresentationType_swigregister(StepBasic_DocumentRepresentationType)

class Handle_StepBasic_DocumentRepresentationType(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentRepresentationType_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentRepresentationType(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentRepresentationType_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentRepresentationType
Handle_StepBasic_DocumentRepresentationType.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentRepresentationType_Nullify, None, Handle_StepBasic_DocumentRepresentationType)
Handle_StepBasic_DocumentRepresentationType.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentRepresentationType_IsNull, None, Handle_StepBasic_DocumentRepresentationType)
Handle_StepBasic_DocumentRepresentationType.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentRepresentationType_GetObject, None, Handle_StepBasic_DocumentRepresentationType)
Handle_StepBasic_DocumentRepresentationType_swigregister = _StepBasic.Handle_StepBasic_DocumentRepresentationType_swigregister
Handle_StepBasic_DocumentRepresentationType_swigregister(Handle_StepBasic_DocumentRepresentationType)

def Handle_StepBasic_DocumentRepresentationType_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentRepresentationType_DownCast(AnObject)
Handle_StepBasic_DocumentRepresentationType_DownCast = _StepBasic.Handle_StepBasic_DocumentRepresentationType_DownCast

class StepBasic_DocumentType(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DocumentType_swiginit(self, _StepBasic.new_StepBasic_DocumentType(*args))

    def Init(self, *args):
        """
        :param apdt:
        :type apdt: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentType_Init(self, *args)


    def ProductDataType(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentType_ProductDataType(self, *args)


    def SetProductDataType(self, *args):
        """
        :param apdt:
        :type apdt: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentType_SetProductDataType(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentType(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentType
StepBasic_DocumentType.Init = new_instancemethod(_StepBasic.StepBasic_DocumentType_Init, None, StepBasic_DocumentType)
StepBasic_DocumentType.ProductDataType = new_instancemethod(_StepBasic.StepBasic_DocumentType_ProductDataType, None, StepBasic_DocumentType)
StepBasic_DocumentType.SetProductDataType = new_instancemethod(_StepBasic.StepBasic_DocumentType_SetProductDataType, None, StepBasic_DocumentType)
StepBasic_DocumentType_swigregister = _StepBasic.StepBasic_DocumentType_swigregister
StepBasic_DocumentType_swigregister(StepBasic_DocumentType)

class Handle_StepBasic_DocumentType(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentType_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentType(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentType_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentType
Handle_StepBasic_DocumentType.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentType_Nullify, None, Handle_StepBasic_DocumentType)
Handle_StepBasic_DocumentType.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentType_IsNull, None, Handle_StepBasic_DocumentType)
Handle_StepBasic_DocumentType.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentType_GetObject, None, Handle_StepBasic_DocumentType)
Handle_StepBasic_DocumentType_swigregister = _StepBasic.Handle_StepBasic_DocumentType_swigregister
Handle_StepBasic_DocumentType_swigregister(Handle_StepBasic_DocumentType)

def Handle_StepBasic_DocumentType_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentType_DownCast(AnObject)
Handle_StepBasic_DocumentType_DownCast = _StepBasic.Handle_StepBasic_DocumentType_DownCast

class StepBasic_DocumentUsageConstraint(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DocumentUsageConstraint_swiginit(self, _StepBasic.new_StepBasic_DocumentUsageConstraint(*args))

    def Init(self, *args):
        """
        :param aSource:
        :type aSource: Handle_StepBasic_Document &
        :param ase:
        :type ase: Handle_TCollection_HAsciiString &
        :param asev:
        :type asev: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_Init(self, *args)


    def Source(self, *args):
        """
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_Source(self, *args)


    def SetSource(self, *args):
        """
        :param aSource:
        :type aSource: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SetSource(self, *args)


    def SubjectElement(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SubjectElement(self, *args)


    def SetSubjectElement(self, *args):
        """
        :param ase:
        :type ase: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SetSubjectElement(self, *args)


    def SubjectElementValue(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SubjectElementValue(self, *args)


    def SetSubjectElementValue(self, *args):
        """
        :param asev:
        :type asev: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SetSubjectElementValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentUsageConstraint(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentUsageConstraint
StepBasic_DocumentUsageConstraint.Init = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_Init, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint.Source = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_Source, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint.SetSource = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_SetSource, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint.SubjectElement = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_SubjectElement, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint.SetSubjectElement = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_SetSubjectElement, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint.SubjectElementValue = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_SubjectElementValue, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint.SetSubjectElementValue = new_instancemethod(_StepBasic.StepBasic_DocumentUsageConstraint_SetSubjectElementValue, None, StepBasic_DocumentUsageConstraint)
StepBasic_DocumentUsageConstraint_swigregister = _StepBasic.StepBasic_DocumentUsageConstraint_swigregister
StepBasic_DocumentUsageConstraint_swigregister(StepBasic_DocumentUsageConstraint)

class Handle_StepBasic_DocumentUsageConstraint(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentUsageConstraint_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentUsageConstraint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentUsageConstraint_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentUsageConstraint
Handle_StepBasic_DocumentUsageConstraint.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentUsageConstraint_Nullify, None, Handle_StepBasic_DocumentUsageConstraint)
Handle_StepBasic_DocumentUsageConstraint.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentUsageConstraint_IsNull, None, Handle_StepBasic_DocumentUsageConstraint)
Handle_StepBasic_DocumentUsageConstraint.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentUsageConstraint_GetObject, None, Handle_StepBasic_DocumentUsageConstraint)
Handle_StepBasic_DocumentUsageConstraint_swigregister = _StepBasic.Handle_StepBasic_DocumentUsageConstraint_swigregister
Handle_StepBasic_DocumentUsageConstraint_swigregister(Handle_StepBasic_DocumentUsageConstraint)

def Handle_StepBasic_DocumentUsageConstraint_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentUsageConstraint_DownCast(AnObject)
Handle_StepBasic_DocumentUsageConstraint_DownCast = _StepBasic.Handle_StepBasic_DocumentUsageConstraint_DownCast

class StepBasic_Effectivity(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_Effectivity_swiginit(self, _StepBasic.new_StepBasic_Effectivity(*args))

    def Init(self, *args):
        """
        :param aid:
        :type aid: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Effectivity_Init(self, *args)


    def Id(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Effectivity_Id(self, *args)


    def SetId(self, *args):
        """
        :param aid:
        :type aid: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Effectivity_SetId(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Effectivity(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Effectivity
StepBasic_Effectivity.Init = new_instancemethod(_StepBasic.StepBasic_Effectivity_Init, None, StepBasic_Effectivity)
StepBasic_Effectivity.Id = new_instancemethod(_StepBasic.StepBasic_Effectivity_Id, None, StepBasic_Effectivity)
StepBasic_Effectivity.SetId = new_instancemethod(_StepBasic.StepBasic_Effectivity_SetId, None, StepBasic_Effectivity)
StepBasic_Effectivity_swigregister = _StepBasic.StepBasic_Effectivity_swigregister
StepBasic_Effectivity_swigregister(StepBasic_Effectivity)

class Handle_StepBasic_Effectivity(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Effectivity_swiginit(self, _StepBasic.new_Handle_StepBasic_Effectivity(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Effectivity_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Effectivity
Handle_StepBasic_Effectivity.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Effectivity_Nullify, None, Handle_StepBasic_Effectivity)
Handle_StepBasic_Effectivity.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Effectivity_IsNull, None, Handle_StepBasic_Effectivity)
Handle_StepBasic_Effectivity.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Effectivity_GetObject, None, Handle_StepBasic_Effectivity)
Handle_StepBasic_Effectivity_swigregister = _StepBasic.Handle_StepBasic_Effectivity_swigregister
Handle_StepBasic_Effectivity_swigregister(Handle_StepBasic_Effectivity)

def Handle_StepBasic_Effectivity_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Effectivity_DownCast(AnObject)
Handle_StepBasic_Effectivity_DownCast = _StepBasic.Handle_StepBasic_Effectivity_DownCast

class StepBasic_EffectivityAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_EffectivityAssignment_swiginit(self, _StepBasic.new_StepBasic_EffectivityAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedEffectivity:
        :type aAssignedEffectivity: Handle_StepBasic_Effectivity &
        :rtype: None

        """
        return _StepBasic.StepBasic_EffectivityAssignment_Init(self, *args)


    def AssignedEffectivity(self, *args):
        """
        * Returns field AssignedEffectivity

        :rtype: Handle_StepBasic_Effectivity

        """
        return _StepBasic.StepBasic_EffectivityAssignment_AssignedEffectivity(self, *args)


    def SetAssignedEffectivity(self, *args):
        """
        * Set field AssignedEffectivity

        :param AssignedEffectivity:
        :type AssignedEffectivity: Handle_StepBasic_Effectivity &
        :rtype: None

        """
        return _StepBasic.StepBasic_EffectivityAssignment_SetAssignedEffectivity(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_EffectivityAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_EffectivityAssignment
StepBasic_EffectivityAssignment.Init = new_instancemethod(_StepBasic.StepBasic_EffectivityAssignment_Init, None, StepBasic_EffectivityAssignment)
StepBasic_EffectivityAssignment.AssignedEffectivity = new_instancemethod(_StepBasic.StepBasic_EffectivityAssignment_AssignedEffectivity, None, StepBasic_EffectivityAssignment)
StepBasic_EffectivityAssignment.SetAssignedEffectivity = new_instancemethod(_StepBasic.StepBasic_EffectivityAssignment_SetAssignedEffectivity, None, StepBasic_EffectivityAssignment)
StepBasic_EffectivityAssignment_swigregister = _StepBasic.StepBasic_EffectivityAssignment_swigregister
StepBasic_EffectivityAssignment_swigregister(StepBasic_EffectivityAssignment)

class Handle_StepBasic_EffectivityAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_EffectivityAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_EffectivityAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_EffectivityAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_EffectivityAssignment
Handle_StepBasic_EffectivityAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_EffectivityAssignment_Nullify, None, Handle_StepBasic_EffectivityAssignment)
Handle_StepBasic_EffectivityAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_EffectivityAssignment_IsNull, None, Handle_StepBasic_EffectivityAssignment)
Handle_StepBasic_EffectivityAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_EffectivityAssignment_GetObject, None, Handle_StepBasic_EffectivityAssignment)
Handle_StepBasic_EffectivityAssignment_swigregister = _StepBasic.Handle_StepBasic_EffectivityAssignment_swigregister
Handle_StepBasic_EffectivityAssignment_swigregister(Handle_StepBasic_EffectivityAssignment)

def Handle_StepBasic_EffectivityAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_EffectivityAssignment_DownCast(AnObject)
Handle_StepBasic_EffectivityAssignment_DownCast = _StepBasic.Handle_StepBasic_EffectivityAssignment_DownCast

class StepBasic_EulerAngles(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_EulerAngles_swiginit(self, _StepBasic.new_StepBasic_EulerAngles(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAngles:
        :type aAngles: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepBasic.StepBasic_EulerAngles_Init(self, *args)


    def Angles(self, *args):
        """
        * Returns field Angles

        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepBasic.StepBasic_EulerAngles_Angles(self, *args)


    def SetAngles(self, *args):
        """
        * Set field Angles

        :param Angles:
        :type Angles: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepBasic.StepBasic_EulerAngles_SetAngles(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_EulerAngles(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_EulerAngles
StepBasic_EulerAngles.Init = new_instancemethod(_StepBasic.StepBasic_EulerAngles_Init, None, StepBasic_EulerAngles)
StepBasic_EulerAngles.Angles = new_instancemethod(_StepBasic.StepBasic_EulerAngles_Angles, None, StepBasic_EulerAngles)
StepBasic_EulerAngles.SetAngles = new_instancemethod(_StepBasic.StepBasic_EulerAngles_SetAngles, None, StepBasic_EulerAngles)
StepBasic_EulerAngles_swigregister = _StepBasic.StepBasic_EulerAngles_swigregister
StepBasic_EulerAngles_swigregister(StepBasic_EulerAngles)

class Handle_StepBasic_EulerAngles(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_EulerAngles_swiginit(self, _StepBasic.new_Handle_StepBasic_EulerAngles(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_EulerAngles_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_EulerAngles
Handle_StepBasic_EulerAngles.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_EulerAngles_Nullify, None, Handle_StepBasic_EulerAngles)
Handle_StepBasic_EulerAngles.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_EulerAngles_IsNull, None, Handle_StepBasic_EulerAngles)
Handle_StepBasic_EulerAngles.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_EulerAngles_GetObject, None, Handle_StepBasic_EulerAngles)
Handle_StepBasic_EulerAngles_swigregister = _StepBasic.Handle_StepBasic_EulerAngles_swigregister
Handle_StepBasic_EulerAngles_swigregister(Handle_StepBasic_EulerAngles)

def Handle_StepBasic_EulerAngles_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_EulerAngles_DownCast(AnObject)
Handle_StepBasic_EulerAngles_DownCast = _StepBasic.Handle_StepBasic_EulerAngles_DownCast

class StepBasic_ExternalSource(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ExternalSource_swiginit(self, _StepBasic.new_StepBasic_ExternalSource(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aSourceId:
        :type aSourceId: StepBasic_SourceItem &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternalSource_Init(self, *args)


    def SourceId(self, *args):
        """
        * Returns field SourceId

        :rtype: StepBasic_SourceItem

        """
        return _StepBasic.StepBasic_ExternalSource_SourceId(self, *args)


    def SetSourceId(self, *args):
        """
        * Set field SourceId

        :param SourceId:
        :type SourceId: StepBasic_SourceItem &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternalSource_SetSourceId(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ExternalSource(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ExternalSource
StepBasic_ExternalSource.Init = new_instancemethod(_StepBasic.StepBasic_ExternalSource_Init, None, StepBasic_ExternalSource)
StepBasic_ExternalSource.SourceId = new_instancemethod(_StepBasic.StepBasic_ExternalSource_SourceId, None, StepBasic_ExternalSource)
StepBasic_ExternalSource.SetSourceId = new_instancemethod(_StepBasic.StepBasic_ExternalSource_SetSourceId, None, StepBasic_ExternalSource)
StepBasic_ExternalSource_swigregister = _StepBasic.StepBasic_ExternalSource_swigregister
StepBasic_ExternalSource_swigregister(StepBasic_ExternalSource)

class Handle_StepBasic_ExternalSource(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ExternalSource_swiginit(self, _StepBasic.new_Handle_StepBasic_ExternalSource(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ExternalSource_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ExternalSource
Handle_StepBasic_ExternalSource.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ExternalSource_Nullify, None, Handle_StepBasic_ExternalSource)
Handle_StepBasic_ExternalSource.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ExternalSource_IsNull, None, Handle_StepBasic_ExternalSource)
Handle_StepBasic_ExternalSource.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ExternalSource_GetObject, None, Handle_StepBasic_ExternalSource)
Handle_StepBasic_ExternalSource_swigregister = _StepBasic.Handle_StepBasic_ExternalSource_swigregister
Handle_StepBasic_ExternalSource_swigregister(Handle_StepBasic_ExternalSource)

def Handle_StepBasic_ExternalSource_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ExternalSource_DownCast(AnObject)
Handle_StepBasic_ExternalSource_DownCast = _StepBasic.Handle_StepBasic_ExternalSource_DownCast

class StepBasic_ExternallyDefinedItem(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ExternallyDefinedItem_swiginit(self, _StepBasic.new_StepBasic_ExternallyDefinedItem(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aItemId:
        :type aItemId: StepBasic_SourceItem &
        :param aSource:
        :type aSource: Handle_StepBasic_ExternalSource &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_Init(self, *args)


    def ItemId(self, *args):
        """
        * Returns field ItemId

        :rtype: StepBasic_SourceItem

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_ItemId(self, *args)


    def SetItemId(self, *args):
        """
        * Set field ItemId

        :param ItemId:
        :type ItemId: StepBasic_SourceItem &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_SetItemId(self, *args)


    def Source(self, *args):
        """
        * Returns field Source

        :rtype: Handle_StepBasic_ExternalSource

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_Source(self, *args)


    def SetSource(self, *args):
        """
        * Set field Source

        :param Source:
        :type Source: Handle_StepBasic_ExternalSource &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_SetSource(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ExternallyDefinedItem(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ExternallyDefinedItem
StepBasic_ExternallyDefinedItem.Init = new_instancemethod(_StepBasic.StepBasic_ExternallyDefinedItem_Init, None, StepBasic_ExternallyDefinedItem)
StepBasic_ExternallyDefinedItem.ItemId = new_instancemethod(_StepBasic.StepBasic_ExternallyDefinedItem_ItemId, None, StepBasic_ExternallyDefinedItem)
StepBasic_ExternallyDefinedItem.SetItemId = new_instancemethod(_StepBasic.StepBasic_ExternallyDefinedItem_SetItemId, None, StepBasic_ExternallyDefinedItem)
StepBasic_ExternallyDefinedItem.Source = new_instancemethod(_StepBasic.StepBasic_ExternallyDefinedItem_Source, None, StepBasic_ExternallyDefinedItem)
StepBasic_ExternallyDefinedItem.SetSource = new_instancemethod(_StepBasic.StepBasic_ExternallyDefinedItem_SetSource, None, StepBasic_ExternallyDefinedItem)
StepBasic_ExternallyDefinedItem_swigregister = _StepBasic.StepBasic_ExternallyDefinedItem_swigregister
StepBasic_ExternallyDefinedItem_swigregister(StepBasic_ExternallyDefinedItem)

class Handle_StepBasic_ExternallyDefinedItem(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ExternallyDefinedItem_swiginit(self, _StepBasic.new_Handle_StepBasic_ExternallyDefinedItem(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ExternallyDefinedItem_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ExternallyDefinedItem
Handle_StepBasic_ExternallyDefinedItem.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ExternallyDefinedItem_Nullify, None, Handle_StepBasic_ExternallyDefinedItem)
Handle_StepBasic_ExternallyDefinedItem.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ExternallyDefinedItem_IsNull, None, Handle_StepBasic_ExternallyDefinedItem)
Handle_StepBasic_ExternallyDefinedItem.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ExternallyDefinedItem_GetObject, None, Handle_StepBasic_ExternallyDefinedItem)
Handle_StepBasic_ExternallyDefinedItem_swigregister = _StepBasic.Handle_StepBasic_ExternallyDefinedItem_swigregister
Handle_StepBasic_ExternallyDefinedItem_swigregister(Handle_StepBasic_ExternallyDefinedItem)

def Handle_StepBasic_ExternallyDefinedItem_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ExternallyDefinedItem_DownCast(AnObject)
Handle_StepBasic_ExternallyDefinedItem_DownCast = _StepBasic.Handle_StepBasic_ExternallyDefinedItem_DownCast

class StepBasic_GeneralProperty(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_GeneralProperty_swiginit(self, _StepBasic.new_StepBasic_GeneralProperty(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_GeneralProperty_Init(self, *args)


    def Id(self, *args):
        """
        * Returns field Id

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_GeneralProperty_Id(self, *args)


    def SetId(self, *args):
        """
        * Set field Id

        :param Id:
        :type Id: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_GeneralProperty_SetId(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_GeneralProperty_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_GeneralProperty_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_GeneralProperty_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_GeneralProperty_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_GeneralProperty_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_GeneralProperty(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_GeneralProperty
StepBasic_GeneralProperty.Init = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_Init, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.Id = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_Id, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.SetId = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_SetId, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.Name = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_Name, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.SetName = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_SetName, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.Description = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_Description, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.SetDescription = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_SetDescription, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty.HasDescription = new_instancemethod(_StepBasic.StepBasic_GeneralProperty_HasDescription, None, StepBasic_GeneralProperty)
StepBasic_GeneralProperty_swigregister = _StepBasic.StepBasic_GeneralProperty_swigregister
StepBasic_GeneralProperty_swigregister(StepBasic_GeneralProperty)

class Handle_StepBasic_GeneralProperty(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_GeneralProperty_swiginit(self, _StepBasic.new_Handle_StepBasic_GeneralProperty(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_GeneralProperty_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_GeneralProperty
Handle_StepBasic_GeneralProperty.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_GeneralProperty_Nullify, None, Handle_StepBasic_GeneralProperty)
Handle_StepBasic_GeneralProperty.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_GeneralProperty_IsNull, None, Handle_StepBasic_GeneralProperty)
Handle_StepBasic_GeneralProperty.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_GeneralProperty_GetObject, None, Handle_StepBasic_GeneralProperty)
Handle_StepBasic_GeneralProperty_swigregister = _StepBasic.Handle_StepBasic_GeneralProperty_swigregister
Handle_StepBasic_GeneralProperty_swigregister(Handle_StepBasic_GeneralProperty)

def Handle_StepBasic_GeneralProperty_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_GeneralProperty_DownCast(AnObject)
Handle_StepBasic_GeneralProperty_DownCast = _StepBasic.Handle_StepBasic_GeneralProperty_DownCast

class StepBasic_Group(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_Group_swiginit(self, _StepBasic.new_StepBasic_Group(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Group_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Group_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Group_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Group_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Group_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_Group_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Group(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Group
StepBasic_Group.Init = new_instancemethod(_StepBasic.StepBasic_Group_Init, None, StepBasic_Group)
StepBasic_Group.Name = new_instancemethod(_StepBasic.StepBasic_Group_Name, None, StepBasic_Group)
StepBasic_Group.SetName = new_instancemethod(_StepBasic.StepBasic_Group_SetName, None, StepBasic_Group)
StepBasic_Group.Description = new_instancemethod(_StepBasic.StepBasic_Group_Description, None, StepBasic_Group)
StepBasic_Group.SetDescription = new_instancemethod(_StepBasic.StepBasic_Group_SetDescription, None, StepBasic_Group)
StepBasic_Group.HasDescription = new_instancemethod(_StepBasic.StepBasic_Group_HasDescription, None, StepBasic_Group)
StepBasic_Group_swigregister = _StepBasic.StepBasic_Group_swigregister
StepBasic_Group_swigregister(StepBasic_Group)

class Handle_StepBasic_Group(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Group_swiginit(self, _StepBasic.new_Handle_StepBasic_Group(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Group_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Group
Handle_StepBasic_Group.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Group_Nullify, None, Handle_StepBasic_Group)
Handle_StepBasic_Group.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Group_IsNull, None, Handle_StepBasic_Group)
Handle_StepBasic_Group.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Group_GetObject, None, Handle_StepBasic_Group)
Handle_StepBasic_Group_swigregister = _StepBasic.Handle_StepBasic_Group_swigregister
Handle_StepBasic_Group_swigregister(Handle_StepBasic_Group)

def Handle_StepBasic_Group_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Group_DownCast(AnObject)
Handle_StepBasic_Group_DownCast = _StepBasic.Handle_StepBasic_Group_DownCast

class StepBasic_GroupAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_GroupAssignment_swiginit(self, _StepBasic.new_StepBasic_GroupAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedGroup:
        :type aAssignedGroup: Handle_StepBasic_Group &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupAssignment_Init(self, *args)


    def AssignedGroup(self, *args):
        """
        * Returns field AssignedGroup

        :rtype: Handle_StepBasic_Group

        """
        return _StepBasic.StepBasic_GroupAssignment_AssignedGroup(self, *args)


    def SetAssignedGroup(self, *args):
        """
        * Set field AssignedGroup

        :param AssignedGroup:
        :type AssignedGroup: Handle_StepBasic_Group &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupAssignment_SetAssignedGroup(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_GroupAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_GroupAssignment
StepBasic_GroupAssignment.Init = new_instancemethod(_StepBasic.StepBasic_GroupAssignment_Init, None, StepBasic_GroupAssignment)
StepBasic_GroupAssignment.AssignedGroup = new_instancemethod(_StepBasic.StepBasic_GroupAssignment_AssignedGroup, None, StepBasic_GroupAssignment)
StepBasic_GroupAssignment.SetAssignedGroup = new_instancemethod(_StepBasic.StepBasic_GroupAssignment_SetAssignedGroup, None, StepBasic_GroupAssignment)
StepBasic_GroupAssignment_swigregister = _StepBasic.StepBasic_GroupAssignment_swigregister
StepBasic_GroupAssignment_swigregister(StepBasic_GroupAssignment)

class Handle_StepBasic_GroupAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_GroupAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_GroupAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_GroupAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_GroupAssignment
Handle_StepBasic_GroupAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_GroupAssignment_Nullify, None, Handle_StepBasic_GroupAssignment)
Handle_StepBasic_GroupAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_GroupAssignment_IsNull, None, Handle_StepBasic_GroupAssignment)
Handle_StepBasic_GroupAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_GroupAssignment_GetObject, None, Handle_StepBasic_GroupAssignment)
Handle_StepBasic_GroupAssignment_swigregister = _StepBasic.Handle_StepBasic_GroupAssignment_swigregister
Handle_StepBasic_GroupAssignment_swigregister(Handle_StepBasic_GroupAssignment)

def Handle_StepBasic_GroupAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_GroupAssignment_DownCast(AnObject)
Handle_StepBasic_GroupAssignment_DownCast = _StepBasic.Handle_StepBasic_GroupAssignment_DownCast

class StepBasic_GroupRelationship(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_GroupRelationship_swiginit(self, _StepBasic.new_StepBasic_GroupRelationship(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aRelatingGroup:
        :type aRelatingGroup: Handle_StepBasic_Group &
        :param aRelatedGroup:
        :type aRelatedGroup: Handle_StepBasic_Group &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupRelationship_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_GroupRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_GroupRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_GroupRelationship_HasDescription(self, *args)


    def RelatingGroup(self, *args):
        """
        * Returns field RelatingGroup

        :rtype: Handle_StepBasic_Group

        """
        return _StepBasic.StepBasic_GroupRelationship_RelatingGroup(self, *args)


    def SetRelatingGroup(self, *args):
        """
        * Set field RelatingGroup

        :param RelatingGroup:
        :type RelatingGroup: Handle_StepBasic_Group &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetRelatingGroup(self, *args)


    def RelatedGroup(self, *args):
        """
        * Returns field RelatedGroup

        :rtype: Handle_StepBasic_Group

        """
        return _StepBasic.StepBasic_GroupRelationship_RelatedGroup(self, *args)


    def SetRelatedGroup(self, *args):
        """
        * Set field RelatedGroup

        :param RelatedGroup:
        :type RelatedGroup: Handle_StepBasic_Group &
        :rtype: None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetRelatedGroup(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_GroupRelationship(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_GroupRelationship
StepBasic_GroupRelationship.Init = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_Init, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.Name = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_Name, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.SetName = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_SetName, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.Description = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_Description, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.SetDescription = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_SetDescription, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.HasDescription = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_HasDescription, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.RelatingGroup = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_RelatingGroup, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.SetRelatingGroup = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_SetRelatingGroup, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.RelatedGroup = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_RelatedGroup, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship.SetRelatedGroup = new_instancemethod(_StepBasic.StepBasic_GroupRelationship_SetRelatedGroup, None, StepBasic_GroupRelationship)
StepBasic_GroupRelationship_swigregister = _StepBasic.StepBasic_GroupRelationship_swigregister
StepBasic_GroupRelationship_swigregister(StepBasic_GroupRelationship)

class Handle_StepBasic_GroupRelationship(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_GroupRelationship_swiginit(self, _StepBasic.new_Handle_StepBasic_GroupRelationship(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_GroupRelationship_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_GroupRelationship
Handle_StepBasic_GroupRelationship.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_GroupRelationship_Nullify, None, Handle_StepBasic_GroupRelationship)
Handle_StepBasic_GroupRelationship.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_GroupRelationship_IsNull, None, Handle_StepBasic_GroupRelationship)
Handle_StepBasic_GroupRelationship.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_GroupRelationship_GetObject, None, Handle_StepBasic_GroupRelationship)
Handle_StepBasic_GroupRelationship_swigregister = _StepBasic.Handle_StepBasic_GroupRelationship_swigregister
Handle_StepBasic_GroupRelationship_swigregister(Handle_StepBasic_GroupRelationship)

def Handle_StepBasic_GroupRelationship_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_GroupRelationship_DownCast(AnObject)
Handle_StepBasic_GroupRelationship_DownCast = _StepBasic.Handle_StepBasic_GroupRelationship_DownCast

class StepBasic_HArray1OfApproval(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_Approval &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfApproval_swiginit(self, _StepBasic.new_StepBasic_HArray1OfApproval(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfApproval_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfApproval_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfApproval_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfApproval_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Approval &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfApproval_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_HArray1OfApproval_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Approval

        """
        return _StepBasic.StepBasic_HArray1OfApproval_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfApproval

        """
        return _StepBasic.StepBasic_HArray1OfApproval_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfApproval

        """
        return _StepBasic.StepBasic_HArray1OfApproval_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfApproval(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfApproval
StepBasic_HArray1OfApproval.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_Init, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_Length, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_Lower, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_Upper, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_SetValue, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_Value, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_ChangeValue, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_Array1, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfApproval_ChangeArray1, None, StepBasic_HArray1OfApproval)
StepBasic_HArray1OfApproval_swigregister = _StepBasic.StepBasic_HArray1OfApproval_swigregister
StepBasic_HArray1OfApproval_swigregister(StepBasic_HArray1OfApproval)

class Handle_StepBasic_HArray1OfApproval(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfApproval_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfApproval(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfApproval_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfApproval
Handle_StepBasic_HArray1OfApproval.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfApproval_Nullify, None, Handle_StepBasic_HArray1OfApproval)
Handle_StepBasic_HArray1OfApproval.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfApproval_IsNull, None, Handle_StepBasic_HArray1OfApproval)
Handle_StepBasic_HArray1OfApproval.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfApproval_GetObject, None, Handle_StepBasic_HArray1OfApproval)
Handle_StepBasic_HArray1OfApproval_swigregister = _StepBasic.Handle_StepBasic_HArray1OfApproval_swigregister
Handle_StepBasic_HArray1OfApproval_swigregister(Handle_StepBasic_HArray1OfApproval)

def Handle_StepBasic_HArray1OfApproval_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfApproval_DownCast(AnObject)
Handle_StepBasic_HArray1OfApproval_DownCast = _StepBasic.Handle_StepBasic_HArray1OfApproval_DownCast

class StepBasic_HArray1OfDerivedUnitElement(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_DerivedUnitElement &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfDerivedUnitElement_swiginit(self, _StepBasic.new_StepBasic_HArray1OfDerivedUnitElement(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_DerivedUnitElement &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_DerivedUnitElement &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_DerivedUnitElement

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_DerivedUnitElement

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfDerivedUnitElement

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfDerivedUnitElement

        """
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfDerivedUnitElement(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfDerivedUnitElement
StepBasic_HArray1OfDerivedUnitElement.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_Init, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_Length, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_Lower, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_Upper, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_SetValue, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_Value, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_ChangeValue, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_Array1, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfDerivedUnitElement_ChangeArray1, None, StepBasic_HArray1OfDerivedUnitElement)
StepBasic_HArray1OfDerivedUnitElement_swigregister = _StepBasic.StepBasic_HArray1OfDerivedUnitElement_swigregister
StepBasic_HArray1OfDerivedUnitElement_swigregister(StepBasic_HArray1OfDerivedUnitElement)

class Handle_StepBasic_HArray1OfDerivedUnitElement(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfDerivedUnitElement(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfDerivedUnitElement
Handle_StepBasic_HArray1OfDerivedUnitElement.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_Nullify, None, Handle_StepBasic_HArray1OfDerivedUnitElement)
Handle_StepBasic_HArray1OfDerivedUnitElement.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_IsNull, None, Handle_StepBasic_HArray1OfDerivedUnitElement)
Handle_StepBasic_HArray1OfDerivedUnitElement.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_GetObject, None, Handle_StepBasic_HArray1OfDerivedUnitElement)
Handle_StepBasic_HArray1OfDerivedUnitElement_swigregister = _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_swigregister
Handle_StepBasic_HArray1OfDerivedUnitElement_swigregister(Handle_StepBasic_HArray1OfDerivedUnitElement)

def Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast(AnObject)
Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast = _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast

class StepBasic_HArray1OfDocument(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_Document &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfDocument_swiginit(self, _StepBasic.new_StepBasic_HArray1OfDocument(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfDocument_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfDocument_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfDocument_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfDocument_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfDocument_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_HArray1OfDocument_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_HArray1OfDocument_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfDocument

        """
        return _StepBasic.StepBasic_HArray1OfDocument_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfDocument

        """
        return _StepBasic.StepBasic_HArray1OfDocument_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfDocument(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfDocument
StepBasic_HArray1OfDocument.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_Init, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_Length, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_Lower, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_Upper, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_SetValue, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_Value, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_ChangeValue, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_Array1, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfDocument_ChangeArray1, None, StepBasic_HArray1OfDocument)
StepBasic_HArray1OfDocument_swigregister = _StepBasic.StepBasic_HArray1OfDocument_swigregister
StepBasic_HArray1OfDocument_swigregister(StepBasic_HArray1OfDocument)

class Handle_StepBasic_HArray1OfDocument(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfDocument_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfDocument(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfDocument_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfDocument
Handle_StepBasic_HArray1OfDocument.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfDocument_Nullify, None, Handle_StepBasic_HArray1OfDocument)
Handle_StepBasic_HArray1OfDocument.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfDocument_IsNull, None, Handle_StepBasic_HArray1OfDocument)
Handle_StepBasic_HArray1OfDocument.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfDocument_GetObject, None, Handle_StepBasic_HArray1OfDocument)
Handle_StepBasic_HArray1OfDocument_swigregister = _StepBasic.Handle_StepBasic_HArray1OfDocument_swigregister
Handle_StepBasic_HArray1OfDocument_swigregister(Handle_StepBasic_HArray1OfDocument)

def Handle_StepBasic_HArray1OfDocument_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfDocument_DownCast(AnObject)
Handle_StepBasic_HArray1OfDocument_DownCast = _StepBasic.Handle_StepBasic_HArray1OfDocument_DownCast

class StepBasic_HArray1OfNamedUnit(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_NamedUnit &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfNamedUnit_swiginit(self, _StepBasic.new_StepBasic_HArray1OfNamedUnit(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_NamedUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_NamedUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfNamedUnit

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfNamedUnit

        """
        return _StepBasic.StepBasic_HArray1OfNamedUnit_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfNamedUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfNamedUnit
StepBasic_HArray1OfNamedUnit.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_Init, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_Length, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_Lower, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_Upper, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_SetValue, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_Value, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_ChangeValue, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_Array1, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfNamedUnit_ChangeArray1, None, StepBasic_HArray1OfNamedUnit)
StepBasic_HArray1OfNamedUnit_swigregister = _StepBasic.StepBasic_HArray1OfNamedUnit_swigregister
StepBasic_HArray1OfNamedUnit_swigregister(StepBasic_HArray1OfNamedUnit)

class Handle_StepBasic_HArray1OfNamedUnit(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfNamedUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfNamedUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfNamedUnit
Handle_StepBasic_HArray1OfNamedUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfNamedUnit_Nullify, None, Handle_StepBasic_HArray1OfNamedUnit)
Handle_StepBasic_HArray1OfNamedUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfNamedUnit_IsNull, None, Handle_StepBasic_HArray1OfNamedUnit)
Handle_StepBasic_HArray1OfNamedUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfNamedUnit_GetObject, None, Handle_StepBasic_HArray1OfNamedUnit)
Handle_StepBasic_HArray1OfNamedUnit_swigregister = _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_swigregister
Handle_StepBasic_HArray1OfNamedUnit_swigregister(Handle_StepBasic_HArray1OfNamedUnit)

def Handle_StepBasic_HArray1OfNamedUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_DownCast(AnObject)
Handle_StepBasic_HArray1OfNamedUnit_DownCast = _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_DownCast

class StepBasic_HArray1OfOrganization(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_Organization &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfOrganization_swiginit(self, _StepBasic.new_StepBasic_HArray1OfOrganization(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Organization &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Organization &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfOrganization

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfOrganization

        """
        return _StepBasic.StepBasic_HArray1OfOrganization_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfOrganization(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfOrganization
StepBasic_HArray1OfOrganization.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_Init, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_Length, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_Lower, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_Upper, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_SetValue, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_Value, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_ChangeValue, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_Array1, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfOrganization_ChangeArray1, None, StepBasic_HArray1OfOrganization)
StepBasic_HArray1OfOrganization_swigregister = _StepBasic.StepBasic_HArray1OfOrganization_swigregister
StepBasic_HArray1OfOrganization_swigregister(StepBasic_HArray1OfOrganization)

class Handle_StepBasic_HArray1OfOrganization(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfOrganization_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfOrganization(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfOrganization_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfOrganization
Handle_StepBasic_HArray1OfOrganization.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfOrganization_Nullify, None, Handle_StepBasic_HArray1OfOrganization)
Handle_StepBasic_HArray1OfOrganization.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfOrganization_IsNull, None, Handle_StepBasic_HArray1OfOrganization)
Handle_StepBasic_HArray1OfOrganization.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfOrganization_GetObject, None, Handle_StepBasic_HArray1OfOrganization)
Handle_StepBasic_HArray1OfOrganization_swigregister = _StepBasic.Handle_StepBasic_HArray1OfOrganization_swigregister
Handle_StepBasic_HArray1OfOrganization_swigregister(Handle_StepBasic_HArray1OfOrganization)

def Handle_StepBasic_HArray1OfOrganization_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfOrganization_DownCast(AnObject)
Handle_StepBasic_HArray1OfOrganization_DownCast = _StepBasic.Handle_StepBasic_HArray1OfOrganization_DownCast

class StepBasic_HArray1OfPerson(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_Person &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfPerson_swiginit(self, _StepBasic.new_StepBasic_HArray1OfPerson(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Person &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfPerson_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfPerson_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfPerson_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfPerson_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Person &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfPerson_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_HArray1OfPerson_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_HArray1OfPerson_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfPerson

        """
        return _StepBasic.StepBasic_HArray1OfPerson_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfPerson

        """
        return _StepBasic.StepBasic_HArray1OfPerson_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfPerson(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfPerson
StepBasic_HArray1OfPerson.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_Init, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_Length, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_Lower, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_Upper, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_SetValue, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_Value, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_ChangeValue, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_Array1, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfPerson_ChangeArray1, None, StepBasic_HArray1OfPerson)
StepBasic_HArray1OfPerson_swigregister = _StepBasic.StepBasic_HArray1OfPerson_swigregister
StepBasic_HArray1OfPerson_swigregister(StepBasic_HArray1OfPerson)

class Handle_StepBasic_HArray1OfPerson(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfPerson_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfPerson(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfPerson_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfPerson
Handle_StepBasic_HArray1OfPerson.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfPerson_Nullify, None, Handle_StepBasic_HArray1OfPerson)
Handle_StepBasic_HArray1OfPerson.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfPerson_IsNull, None, Handle_StepBasic_HArray1OfPerson)
Handle_StepBasic_HArray1OfPerson.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfPerson_GetObject, None, Handle_StepBasic_HArray1OfPerson)
Handle_StepBasic_HArray1OfPerson_swigregister = _StepBasic.Handle_StepBasic_HArray1OfPerson_swigregister
Handle_StepBasic_HArray1OfPerson_swigregister(Handle_StepBasic_HArray1OfPerson)

def Handle_StepBasic_HArray1OfPerson_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfPerson_DownCast(AnObject)
Handle_StepBasic_HArray1OfPerson_DownCast = _StepBasic.Handle_StepBasic_HArray1OfPerson_DownCast

class StepBasic_HArray1OfProduct(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_Product &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfProduct_swiginit(self, _StepBasic.new_StepBasic_HArray1OfProduct(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_Product &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfProduct_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProduct_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProduct_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProduct_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_Product &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfProduct_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_HArray1OfProduct_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_HArray1OfProduct_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfProduct

        """
        return _StepBasic.StepBasic_HArray1OfProduct_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfProduct

        """
        return _StepBasic.StepBasic_HArray1OfProduct_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfProduct(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfProduct
StepBasic_HArray1OfProduct.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_Init, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_Length, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_Lower, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_Upper, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_SetValue, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_Value, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_ChangeValue, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_Array1, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfProduct_ChangeArray1, None, StepBasic_HArray1OfProduct)
StepBasic_HArray1OfProduct_swigregister = _StepBasic.StepBasic_HArray1OfProduct_swigregister
StepBasic_HArray1OfProduct_swigregister(StepBasic_HArray1OfProduct)

class Handle_StepBasic_HArray1OfProduct(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfProduct_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfProduct(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfProduct_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfProduct
Handle_StepBasic_HArray1OfProduct.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProduct_Nullify, None, Handle_StepBasic_HArray1OfProduct)
Handle_StepBasic_HArray1OfProduct.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProduct_IsNull, None, Handle_StepBasic_HArray1OfProduct)
Handle_StepBasic_HArray1OfProduct.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProduct_GetObject, None, Handle_StepBasic_HArray1OfProduct)
Handle_StepBasic_HArray1OfProduct_swigregister = _StepBasic.Handle_StepBasic_HArray1OfProduct_swigregister
Handle_StepBasic_HArray1OfProduct_swigregister(Handle_StepBasic_HArray1OfProduct)

def Handle_StepBasic_HArray1OfProduct_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfProduct_DownCast(AnObject)
Handle_StepBasic_HArray1OfProduct_DownCast = _StepBasic.Handle_StepBasic_HArray1OfProduct_DownCast

class StepBasic_HArray1OfProductContext(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_ProductContext &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfProductContext_swiginit(self, _StepBasic.new_StepBasic_HArray1OfProductContext(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_ProductContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_ProductContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductContext

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductContext

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfProductContext

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfProductContext

        """
        return _StepBasic.StepBasic_HArray1OfProductContext_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfProductContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfProductContext
StepBasic_HArray1OfProductContext.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_Init, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_Length, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_Lower, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_Upper, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_SetValue, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_Value, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_ChangeValue, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_Array1, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductContext_ChangeArray1, None, StepBasic_HArray1OfProductContext)
StepBasic_HArray1OfProductContext_swigregister = _StepBasic.StepBasic_HArray1OfProductContext_swigregister
StepBasic_HArray1OfProductContext_swigregister(StepBasic_HArray1OfProductContext)

class Handle_StepBasic_HArray1OfProductContext(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfProductContext_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfProductContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfProductContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfProductContext
Handle_StepBasic_HArray1OfProductContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProductContext_Nullify, None, Handle_StepBasic_HArray1OfProductContext)
Handle_StepBasic_HArray1OfProductContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProductContext_IsNull, None, Handle_StepBasic_HArray1OfProductContext)
Handle_StepBasic_HArray1OfProductContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProductContext_GetObject, None, Handle_StepBasic_HArray1OfProductContext)
Handle_StepBasic_HArray1OfProductContext_swigregister = _StepBasic.Handle_StepBasic_HArray1OfProductContext_swigregister
Handle_StepBasic_HArray1OfProductContext_swigregister(Handle_StepBasic_HArray1OfProductContext)

def Handle_StepBasic_HArray1OfProductContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfProductContext_DownCast(AnObject)
Handle_StepBasic_HArray1OfProductContext_DownCast = _StepBasic.Handle_StepBasic_HArray1OfProductContext_DownCast

class StepBasic_HArray1OfProductDefinition(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfProductDefinition_swiginit(self, _StepBasic.new_StepBasic_HArray1OfProductDefinition(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfProductDefinition

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfProductDefinition

        """
        return _StepBasic.StepBasic_HArray1OfProductDefinition_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfProductDefinition(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfProductDefinition
StepBasic_HArray1OfProductDefinition.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_Init, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_Length, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_Lower, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_Upper, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_SetValue, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_Value, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_ChangeValue, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_Array1, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfProductDefinition_ChangeArray1, None, StepBasic_HArray1OfProductDefinition)
StepBasic_HArray1OfProductDefinition_swigregister = _StepBasic.StepBasic_HArray1OfProductDefinition_swigregister
StepBasic_HArray1OfProductDefinition_swigregister(StepBasic_HArray1OfProductDefinition)

class Handle_StepBasic_HArray1OfProductDefinition(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfProductDefinition(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfProductDefinition_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfProductDefinition
Handle_StepBasic_HArray1OfProductDefinition.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProductDefinition_Nullify, None, Handle_StepBasic_HArray1OfProductDefinition)
Handle_StepBasic_HArray1OfProductDefinition.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProductDefinition_IsNull, None, Handle_StepBasic_HArray1OfProductDefinition)
Handle_StepBasic_HArray1OfProductDefinition.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfProductDefinition_GetObject, None, Handle_StepBasic_HArray1OfProductDefinition)
Handle_StepBasic_HArray1OfProductDefinition_swigregister = _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_swigregister
Handle_StepBasic_HArray1OfProductDefinition_swigregister(Handle_StepBasic_HArray1OfProductDefinition)

def Handle_StepBasic_HArray1OfProductDefinition_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_DownCast(AnObject)
Handle_StepBasic_HArray1OfProductDefinition_DownCast = _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_DownCast

class StepBasic_HArray1OfUncertaintyMeasureWithUnit(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepBasic_UncertaintyMeasureWithUnit &
        :rtype: None

        """
        _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_HArray1OfUncertaintyMeasureWithUnit(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepBasic_UncertaintyMeasureWithUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepBasic_UncertaintyMeasureWithUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepBasic_Array1OfUncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepBasic_Array1OfUncertaintyMeasureWithUnit

        """
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfUncertaintyMeasureWithUnit
StepBasic_HArray1OfUncertaintyMeasureWithUnit.Init = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Init, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.Length = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Length, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.Lower = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Lower, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.Upper = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Upper, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.SetValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_SetValue, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.Value = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Value, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.ChangeValue = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_ChangeValue, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.Array1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Array1, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit.ChangeArray1 = new_instancemethod(_StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_ChangeArray1, None, StepBasic_HArray1OfUncertaintyMeasureWithUnit)
StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister = _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister
StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister(StepBasic_HArray1OfUncertaintyMeasureWithUnit)

class Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_Nullify, None, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit)
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_IsNull, None, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit)
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_GetObject, None, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit)
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister(Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit)

def Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast

class StepBasic_IdentificationAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_IdentificationAssignment_swiginit(self, _StepBasic.new_StepBasic_IdentificationAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedId:
        :type aAssignedId: Handle_TCollection_HAsciiString &
        :param aRole:
        :type aRole: Handle_StepBasic_IdentificationRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_IdentificationAssignment_Init(self, *args)


    def AssignedId(self, *args):
        """
        * Returns field AssignedId

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_IdentificationAssignment_AssignedId(self, *args)


    def SetAssignedId(self, *args):
        """
        * Set field AssignedId

        :param AssignedId:
        :type AssignedId: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_IdentificationAssignment_SetAssignedId(self, *args)


    def Role(self, *args):
        """
        * Returns field Role

        :rtype: Handle_StepBasic_IdentificationRole

        """
        return _StepBasic.StepBasic_IdentificationAssignment_Role(self, *args)


    def SetRole(self, *args):
        """
        * Set field Role

        :param Role:
        :type Role: Handle_StepBasic_IdentificationRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_IdentificationAssignment_SetRole(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_IdentificationAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_IdentificationAssignment
StepBasic_IdentificationAssignment.Init = new_instancemethod(_StepBasic.StepBasic_IdentificationAssignment_Init, None, StepBasic_IdentificationAssignment)
StepBasic_IdentificationAssignment.AssignedId = new_instancemethod(_StepBasic.StepBasic_IdentificationAssignment_AssignedId, None, StepBasic_IdentificationAssignment)
StepBasic_IdentificationAssignment.SetAssignedId = new_instancemethod(_StepBasic.StepBasic_IdentificationAssignment_SetAssignedId, None, StepBasic_IdentificationAssignment)
StepBasic_IdentificationAssignment.Role = new_instancemethod(_StepBasic.StepBasic_IdentificationAssignment_Role, None, StepBasic_IdentificationAssignment)
StepBasic_IdentificationAssignment.SetRole = new_instancemethod(_StepBasic.StepBasic_IdentificationAssignment_SetRole, None, StepBasic_IdentificationAssignment)
StepBasic_IdentificationAssignment_swigregister = _StepBasic.StepBasic_IdentificationAssignment_swigregister
StepBasic_IdentificationAssignment_swigregister(StepBasic_IdentificationAssignment)

class Handle_StepBasic_IdentificationAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_IdentificationAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_IdentificationAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_IdentificationAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_IdentificationAssignment
Handle_StepBasic_IdentificationAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_IdentificationAssignment_Nullify, None, Handle_StepBasic_IdentificationAssignment)
Handle_StepBasic_IdentificationAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_IdentificationAssignment_IsNull, None, Handle_StepBasic_IdentificationAssignment)
Handle_StepBasic_IdentificationAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_IdentificationAssignment_GetObject, None, Handle_StepBasic_IdentificationAssignment)
Handle_StepBasic_IdentificationAssignment_swigregister = _StepBasic.Handle_StepBasic_IdentificationAssignment_swigregister
Handle_StepBasic_IdentificationAssignment_swigregister(Handle_StepBasic_IdentificationAssignment)

def Handle_StepBasic_IdentificationAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_IdentificationAssignment_DownCast(AnObject)
Handle_StepBasic_IdentificationAssignment_DownCast = _StepBasic.Handle_StepBasic_IdentificationAssignment_DownCast

class StepBasic_IdentificationRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_IdentificationRole_swiginit(self, _StepBasic.new_StepBasic_IdentificationRole(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_IdentificationRole_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_IdentificationRole_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_IdentificationRole_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_IdentificationRole_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_IdentificationRole_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_IdentificationRole_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_IdentificationRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_IdentificationRole
StepBasic_IdentificationRole.Init = new_instancemethod(_StepBasic.StepBasic_IdentificationRole_Init, None, StepBasic_IdentificationRole)
StepBasic_IdentificationRole.Name = new_instancemethod(_StepBasic.StepBasic_IdentificationRole_Name, None, StepBasic_IdentificationRole)
StepBasic_IdentificationRole.SetName = new_instancemethod(_StepBasic.StepBasic_IdentificationRole_SetName, None, StepBasic_IdentificationRole)
StepBasic_IdentificationRole.Description = new_instancemethod(_StepBasic.StepBasic_IdentificationRole_Description, None, StepBasic_IdentificationRole)
StepBasic_IdentificationRole.SetDescription = new_instancemethod(_StepBasic.StepBasic_IdentificationRole_SetDescription, None, StepBasic_IdentificationRole)
StepBasic_IdentificationRole.HasDescription = new_instancemethod(_StepBasic.StepBasic_IdentificationRole_HasDescription, None, StepBasic_IdentificationRole)
StepBasic_IdentificationRole_swigregister = _StepBasic.StepBasic_IdentificationRole_swigregister
StepBasic_IdentificationRole_swigregister(StepBasic_IdentificationRole)

class Handle_StepBasic_IdentificationRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_IdentificationRole_swiginit(self, _StepBasic.new_Handle_StepBasic_IdentificationRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_IdentificationRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_IdentificationRole
Handle_StepBasic_IdentificationRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_IdentificationRole_Nullify, None, Handle_StepBasic_IdentificationRole)
Handle_StepBasic_IdentificationRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_IdentificationRole_IsNull, None, Handle_StepBasic_IdentificationRole)
Handle_StepBasic_IdentificationRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_IdentificationRole_GetObject, None, Handle_StepBasic_IdentificationRole)
Handle_StepBasic_IdentificationRole_swigregister = _StepBasic.Handle_StepBasic_IdentificationRole_swigregister
Handle_StepBasic_IdentificationRole_swigregister(Handle_StepBasic_IdentificationRole)

def Handle_StepBasic_IdentificationRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_IdentificationRole_DownCast(AnObject)
Handle_StepBasic_IdentificationRole_DownCast = _StepBasic.Handle_StepBasic_IdentificationRole_DownCast

class StepBasic_LocalTime(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a LocalTime

        :rtype: None

        """
        _StepBasic.StepBasic_LocalTime_swiginit(self, _StepBasic.new_StepBasic_LocalTime(*args))

    def Init(self, *args):
        """
        :param aHourComponent:
        :type aHourComponent: int
        :param hasAminuteComponent:
        :type hasAminuteComponent: bool
        :param aMinuteComponent:
        :type aMinuteComponent: int
        :param hasAsecondComponent:
        :type hasAsecondComponent: bool
        :param aSecondComponent:
        :type aSecondComponent: float
        :param aZone:
        :type aZone: Handle_StepBasic_CoordinatedUniversalTimeOffset &
        :rtype: void

        """
        return _StepBasic.StepBasic_LocalTime_Init(self, *args)


    def SetHourComponent(self, *args):
        """
        :param aHourComponent:
        :type aHourComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_LocalTime_SetHourComponent(self, *args)


    def HourComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_LocalTime_HourComponent(self, *args)


    def SetMinuteComponent(self, *args):
        """
        :param aMinuteComponent:
        :type aMinuteComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_LocalTime_SetMinuteComponent(self, *args)


    def UnSetMinuteComponent(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_LocalTime_UnSetMinuteComponent(self, *args)


    def MinuteComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_LocalTime_MinuteComponent(self, *args)


    def HasMinuteComponent(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_LocalTime_HasMinuteComponent(self, *args)


    def SetSecondComponent(self, *args):
        """
        :param aSecondComponent:
        :type aSecondComponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_LocalTime_SetSecondComponent(self, *args)


    def UnSetSecondComponent(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_LocalTime_UnSetSecondComponent(self, *args)


    def SecondComponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_LocalTime_SecondComponent(self, *args)


    def HasSecondComponent(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_LocalTime_HasSecondComponent(self, *args)


    def SetZone(self, *args):
        """
        :param aZone:
        :type aZone: Handle_StepBasic_CoordinatedUniversalTimeOffset &
        :rtype: None

        """
        return _StepBasic.StepBasic_LocalTime_SetZone(self, *args)


    def Zone(self, *args):
        """
        :rtype: Handle_StepBasic_CoordinatedUniversalTimeOffset

        """
        return _StepBasic.StepBasic_LocalTime_Zone(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_LocalTime(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_LocalTime
StepBasic_LocalTime.Init = new_instancemethod(_StepBasic.StepBasic_LocalTime_Init, None, StepBasic_LocalTime)
StepBasic_LocalTime.SetHourComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_SetHourComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.HourComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_HourComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.SetMinuteComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_SetMinuteComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.UnSetMinuteComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_UnSetMinuteComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.MinuteComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_MinuteComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.HasMinuteComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_HasMinuteComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.SetSecondComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_SetSecondComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.UnSetSecondComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_UnSetSecondComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.SecondComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_SecondComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.HasSecondComponent = new_instancemethod(_StepBasic.StepBasic_LocalTime_HasSecondComponent, None, StepBasic_LocalTime)
StepBasic_LocalTime.SetZone = new_instancemethod(_StepBasic.StepBasic_LocalTime_SetZone, None, StepBasic_LocalTime)
StepBasic_LocalTime.Zone = new_instancemethod(_StepBasic.StepBasic_LocalTime_Zone, None, StepBasic_LocalTime)
StepBasic_LocalTime_swigregister = _StepBasic.StepBasic_LocalTime_swigregister
StepBasic_LocalTime_swigregister(StepBasic_LocalTime)

class Handle_StepBasic_LocalTime(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_LocalTime_swiginit(self, _StepBasic.new_Handle_StepBasic_LocalTime(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_LocalTime_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_LocalTime
Handle_StepBasic_LocalTime.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_LocalTime_Nullify, None, Handle_StepBasic_LocalTime)
Handle_StepBasic_LocalTime.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_LocalTime_IsNull, None, Handle_StepBasic_LocalTime)
Handle_StepBasic_LocalTime.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_LocalTime_GetObject, None, Handle_StepBasic_LocalTime)
Handle_StepBasic_LocalTime_swigregister = _StepBasic.Handle_StepBasic_LocalTime_swigregister
Handle_StepBasic_LocalTime_swigregister(Handle_StepBasic_LocalTime)

def Handle_StepBasic_LocalTime_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_LocalTime_DownCast(AnObject)
Handle_StepBasic_LocalTime_DownCast = _StepBasic.Handle_StepBasic_LocalTime_DownCast

class StepBasic_MeasureValueMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_MeasureValueMember_swiginit(self, _StepBasic.new_StepBasic_MeasureValueMember(*args))

    def HasName(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_MeasureValueMember_HasName(self, *args)


    def Name(self, *args):
        """
        :rtype: char *

        """
        return _StepBasic.StepBasic_MeasureValueMember_Name(self, *args)


    def SetName(self, *args):
        """
        :param name:
        :type name: char *
        :rtype: bool

        """
        return _StepBasic.StepBasic_MeasureValueMember_SetName(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_MeasureValueMember(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_MeasureValueMember
StepBasic_MeasureValueMember.HasName = new_instancemethod(_StepBasic.StepBasic_MeasureValueMember_HasName, None, StepBasic_MeasureValueMember)
StepBasic_MeasureValueMember.Name = new_instancemethod(_StepBasic.StepBasic_MeasureValueMember_Name, None, StepBasic_MeasureValueMember)
StepBasic_MeasureValueMember.SetName = new_instancemethod(_StepBasic.StepBasic_MeasureValueMember_SetName, None, StepBasic_MeasureValueMember)
StepBasic_MeasureValueMember_swigregister = _StepBasic.StepBasic_MeasureValueMember_swigregister
StepBasic_MeasureValueMember_swigregister(StepBasic_MeasureValueMember)

class Handle_StepBasic_MeasureValueMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_MeasureValueMember_swiginit(self, _StepBasic.new_Handle_StepBasic_MeasureValueMember(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_MeasureValueMember_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_MeasureValueMember
Handle_StepBasic_MeasureValueMember.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_MeasureValueMember_Nullify, None, Handle_StepBasic_MeasureValueMember)
Handle_StepBasic_MeasureValueMember.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_MeasureValueMember_IsNull, None, Handle_StepBasic_MeasureValueMember)
Handle_StepBasic_MeasureValueMember.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_MeasureValueMember_GetObject, None, Handle_StepBasic_MeasureValueMember)
Handle_StepBasic_MeasureValueMember_swigregister = _StepBasic.Handle_StepBasic_MeasureValueMember_swigregister
Handle_StepBasic_MeasureValueMember_swigregister(Handle_StepBasic_MeasureValueMember)

def Handle_StepBasic_MeasureValueMember_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_MeasureValueMember_DownCast(AnObject)
Handle_StepBasic_MeasureValueMember_DownCast = _StepBasic.Handle_StepBasic_MeasureValueMember_DownCast

class StepBasic_MeasureWithUnit(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a MeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_MeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_MeasureWithUnit(*args))

    def Init(self, *args):
        """
        :param aValueComponent:
        :type aValueComponent: Handle_StepBasic_MeasureValueMember &
        :param aUnitComponent:
        :type aUnitComponent: StepBasic_Unit &
        :rtype: void

        """
        return _StepBasic.StepBasic_MeasureWithUnit_Init(self, *args)


    def SetValueComponent(self, *args):
        """
        :param aValueComponent:
        :type aValueComponent: float
        :rtype: None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_SetValueComponent(self, *args)


    def ValueComponent(self, *args):
        """
        :rtype: float

        """
        return _StepBasic.StepBasic_MeasureWithUnit_ValueComponent(self, *args)


    def ValueComponentMember(self, *args):
        """
        :rtype: Handle_StepBasic_MeasureValueMember

        """
        return _StepBasic.StepBasic_MeasureWithUnit_ValueComponentMember(self, *args)


    def SetValueComponentMember(self, *args):
        """
        :param val:
        :type val: Handle_StepBasic_MeasureValueMember &
        :rtype: None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_SetValueComponentMember(self, *args)


    def SetUnitComponent(self, *args):
        """
        :param aUnitComponent:
        :type aUnitComponent: StepBasic_Unit &
        :rtype: None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_SetUnitComponent(self, *args)


    def UnitComponent(self, *args):
        """
        :rtype: StepBasic_Unit

        """
        return _StepBasic.StepBasic_MeasureWithUnit_UnitComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_MeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_MeasureWithUnit
StepBasic_MeasureWithUnit.Init = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_Init, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit.SetValueComponent = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_SetValueComponent, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit.ValueComponent = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_ValueComponent, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit.ValueComponentMember = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_ValueComponentMember, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit.SetValueComponentMember = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_SetValueComponentMember, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit.SetUnitComponent = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_SetUnitComponent, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit.UnitComponent = new_instancemethod(_StepBasic.StepBasic_MeasureWithUnit_UnitComponent, None, StepBasic_MeasureWithUnit)
StepBasic_MeasureWithUnit_swigregister = _StepBasic.StepBasic_MeasureWithUnit_swigregister
StepBasic_MeasureWithUnit_swigregister(StepBasic_MeasureWithUnit)

class Handle_StepBasic_MeasureWithUnit(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_MeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_MeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_MeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_MeasureWithUnit
Handle_StepBasic_MeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_MeasureWithUnit_Nullify, None, Handle_StepBasic_MeasureWithUnit)
Handle_StepBasic_MeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_MeasureWithUnit_IsNull, None, Handle_StepBasic_MeasureWithUnit)
Handle_StepBasic_MeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_MeasureWithUnit_GetObject, None, Handle_StepBasic_MeasureWithUnit)
Handle_StepBasic_MeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_MeasureWithUnit_swigregister
Handle_StepBasic_MeasureWithUnit_swigregister(Handle_StepBasic_MeasureWithUnit)

def Handle_StepBasic_MeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_MeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_MeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_MeasureWithUnit_DownCast

class StepBasic_NameAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_NameAssignment_swiginit(self, _StepBasic.new_StepBasic_NameAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aAssignedName:
        :type aAssignedName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_NameAssignment_Init(self, *args)


    def AssignedName(self, *args):
        """
        * Returns field AssignedName

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_NameAssignment_AssignedName(self, *args)


    def SetAssignedName(self, *args):
        """
        * Set field AssignedName

        :param AssignedName:
        :type AssignedName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_NameAssignment_SetAssignedName(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_NameAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_NameAssignment
StepBasic_NameAssignment.Init = new_instancemethod(_StepBasic.StepBasic_NameAssignment_Init, None, StepBasic_NameAssignment)
StepBasic_NameAssignment.AssignedName = new_instancemethod(_StepBasic.StepBasic_NameAssignment_AssignedName, None, StepBasic_NameAssignment)
StepBasic_NameAssignment.SetAssignedName = new_instancemethod(_StepBasic.StepBasic_NameAssignment_SetAssignedName, None, StepBasic_NameAssignment)
StepBasic_NameAssignment_swigregister = _StepBasic.StepBasic_NameAssignment_swigregister
StepBasic_NameAssignment_swigregister(StepBasic_NameAssignment)

class Handle_StepBasic_NameAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_NameAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_NameAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_NameAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_NameAssignment
Handle_StepBasic_NameAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_NameAssignment_Nullify, None, Handle_StepBasic_NameAssignment)
Handle_StepBasic_NameAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_NameAssignment_IsNull, None, Handle_StepBasic_NameAssignment)
Handle_StepBasic_NameAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_NameAssignment_GetObject, None, Handle_StepBasic_NameAssignment)
Handle_StepBasic_NameAssignment_swigregister = _StepBasic.Handle_StepBasic_NameAssignment_swigregister
Handle_StepBasic_NameAssignment_swigregister(Handle_StepBasic_NameAssignment)

def Handle_StepBasic_NameAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_NameAssignment_DownCast(AnObject)
Handle_StepBasic_NameAssignment_DownCast = _StepBasic.Handle_StepBasic_NameAssignment_DownCast

class StepBasic_NamedUnit(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a NamedUnit

        :rtype: None

        """
        _StepBasic.StepBasic_NamedUnit_swiginit(self, _StepBasic.new_StepBasic_NamedUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        """
        return _StepBasic.StepBasic_NamedUnit_Init(self, *args)


    def SetDimensions(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        """
        return _StepBasic.StepBasic_NamedUnit_SetDimensions(self, *args)


    def Dimensions(self, *args):
        """
        :rtype: Handle_StepBasic_DimensionalExponents

        """
        return _StepBasic.StepBasic_NamedUnit_Dimensions(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_NamedUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_NamedUnit
StepBasic_NamedUnit.Init = new_instancemethod(_StepBasic.StepBasic_NamedUnit_Init, None, StepBasic_NamedUnit)
StepBasic_NamedUnit.SetDimensions = new_instancemethod(_StepBasic.StepBasic_NamedUnit_SetDimensions, None, StepBasic_NamedUnit)
StepBasic_NamedUnit.Dimensions = new_instancemethod(_StepBasic.StepBasic_NamedUnit_Dimensions, None, StepBasic_NamedUnit)
StepBasic_NamedUnit_swigregister = _StepBasic.StepBasic_NamedUnit_swigregister
StepBasic_NamedUnit_swigregister(StepBasic_NamedUnit)

class Handle_StepBasic_NamedUnit(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_NamedUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_NamedUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_NamedUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_NamedUnit
Handle_StepBasic_NamedUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_NamedUnit_Nullify, None, Handle_StepBasic_NamedUnit)
Handle_StepBasic_NamedUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_NamedUnit_IsNull, None, Handle_StepBasic_NamedUnit)
Handle_StepBasic_NamedUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_NamedUnit_GetObject, None, Handle_StepBasic_NamedUnit)
Handle_StepBasic_NamedUnit_swigregister = _StepBasic.Handle_StepBasic_NamedUnit_swigregister
Handle_StepBasic_NamedUnit_swigregister(Handle_StepBasic_NamedUnit)

def Handle_StepBasic_NamedUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_NamedUnit_DownCast(AnObject)
Handle_StepBasic_NamedUnit_DownCast = _StepBasic.Handle_StepBasic_NamedUnit_DownCast

class StepBasic_ObjectRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ObjectRole_swiginit(self, _StepBasic.new_StepBasic_ObjectRole(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ObjectRole_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ObjectRole_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ObjectRole_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ObjectRole_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ObjectRole_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_ObjectRole_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ObjectRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ObjectRole
StepBasic_ObjectRole.Init = new_instancemethod(_StepBasic.StepBasic_ObjectRole_Init, None, StepBasic_ObjectRole)
StepBasic_ObjectRole.Name = new_instancemethod(_StepBasic.StepBasic_ObjectRole_Name, None, StepBasic_ObjectRole)
StepBasic_ObjectRole.SetName = new_instancemethod(_StepBasic.StepBasic_ObjectRole_SetName, None, StepBasic_ObjectRole)
StepBasic_ObjectRole.Description = new_instancemethod(_StepBasic.StepBasic_ObjectRole_Description, None, StepBasic_ObjectRole)
StepBasic_ObjectRole.SetDescription = new_instancemethod(_StepBasic.StepBasic_ObjectRole_SetDescription, None, StepBasic_ObjectRole)
StepBasic_ObjectRole.HasDescription = new_instancemethod(_StepBasic.StepBasic_ObjectRole_HasDescription, None, StepBasic_ObjectRole)
StepBasic_ObjectRole_swigregister = _StepBasic.StepBasic_ObjectRole_swigregister
StepBasic_ObjectRole_swigregister(StepBasic_ObjectRole)

class Handle_StepBasic_ObjectRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ObjectRole_swiginit(self, _StepBasic.new_Handle_StepBasic_ObjectRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ObjectRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ObjectRole
Handle_StepBasic_ObjectRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ObjectRole_Nullify, None, Handle_StepBasic_ObjectRole)
Handle_StepBasic_ObjectRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ObjectRole_IsNull, None, Handle_StepBasic_ObjectRole)
Handle_StepBasic_ObjectRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ObjectRole_GetObject, None, Handle_StepBasic_ObjectRole)
Handle_StepBasic_ObjectRole_swigregister = _StepBasic.Handle_StepBasic_ObjectRole_swigregister
Handle_StepBasic_ObjectRole_swigregister(Handle_StepBasic_ObjectRole)

def Handle_StepBasic_ObjectRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ObjectRole_DownCast(AnObject)
Handle_StepBasic_ObjectRole_DownCast = _StepBasic.Handle_StepBasic_ObjectRole_DownCast

class StepBasic_Organization(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Organization

        :rtype: None

        """
        _StepBasic.StepBasic_Organization_swiginit(self, _StepBasic.new_StepBasic_Organization(*args))

    def Init(self, *args):
        """
        :param hasAid:
        :type hasAid: bool
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_Organization_Init(self, *args)


    def SetId(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Organization_SetId(self, *args)


    def UnSetId(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Organization_UnSetId(self, *args)


    def Id(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Organization_Id(self, *args)


    def HasId(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Organization_HasId(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Organization_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Organization_Name(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Organization_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Organization_Description(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Organization(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Organization
StepBasic_Organization.Init = new_instancemethod(_StepBasic.StepBasic_Organization_Init, None, StepBasic_Organization)
StepBasic_Organization.SetId = new_instancemethod(_StepBasic.StepBasic_Organization_SetId, None, StepBasic_Organization)
StepBasic_Organization.UnSetId = new_instancemethod(_StepBasic.StepBasic_Organization_UnSetId, None, StepBasic_Organization)
StepBasic_Organization.Id = new_instancemethod(_StepBasic.StepBasic_Organization_Id, None, StepBasic_Organization)
StepBasic_Organization.HasId = new_instancemethod(_StepBasic.StepBasic_Organization_HasId, None, StepBasic_Organization)
StepBasic_Organization.SetName = new_instancemethod(_StepBasic.StepBasic_Organization_SetName, None, StepBasic_Organization)
StepBasic_Organization.Name = new_instancemethod(_StepBasic.StepBasic_Organization_Name, None, StepBasic_Organization)
StepBasic_Organization.SetDescription = new_instancemethod(_StepBasic.StepBasic_Organization_SetDescription, None, StepBasic_Organization)
StepBasic_Organization.Description = new_instancemethod(_StepBasic.StepBasic_Organization_Description, None, StepBasic_Organization)
StepBasic_Organization_swigregister = _StepBasic.StepBasic_Organization_swigregister
StepBasic_Organization_swigregister(StepBasic_Organization)

class Handle_StepBasic_Organization(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Organization_swiginit(self, _StepBasic.new_Handle_StepBasic_Organization(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Organization_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Organization
Handle_StepBasic_Organization.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Organization_Nullify, None, Handle_StepBasic_Organization)
Handle_StepBasic_Organization.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Organization_IsNull, None, Handle_StepBasic_Organization)
Handle_StepBasic_Organization.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Organization_GetObject, None, Handle_StepBasic_Organization)
Handle_StepBasic_Organization_swigregister = _StepBasic.Handle_StepBasic_Organization_swigregister
Handle_StepBasic_Organization_swigregister(Handle_StepBasic_Organization)

def Handle_StepBasic_Organization_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Organization_DownCast(AnObject)
Handle_StepBasic_Organization_DownCast = _StepBasic.Handle_StepBasic_Organization_DownCast

class StepBasic_OrganizationAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        :param aAssignedOrganization:
        :type aAssignedOrganization: Handle_StepBasic_Organization &
        :param aRole:
        :type aRole: Handle_StepBasic_OrganizationRole &
        :rtype: void

        """
        return _StepBasic.StepBasic_OrganizationAssignment_Init(self, *args)


    def SetAssignedOrganization(self, *args):
        """
        :param aAssignedOrganization:
        :type aAssignedOrganization: Handle_StepBasic_Organization &
        :rtype: None

        """
        return _StepBasic.StepBasic_OrganizationAssignment_SetAssignedOrganization(self, *args)


    def AssignedOrganization(self, *args):
        """
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_OrganizationAssignment_AssignedOrganization(self, *args)


    def SetRole(self, *args):
        """
        :param aRole:
        :type aRole: Handle_StepBasic_OrganizationRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_OrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        :rtype: Handle_StepBasic_OrganizationRole

        """
        return _StepBasic.StepBasic_OrganizationAssignment_Role(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_OrganizationAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrganizationAssignment
StepBasic_OrganizationAssignment.Init = new_instancemethod(_StepBasic.StepBasic_OrganizationAssignment_Init, None, StepBasic_OrganizationAssignment)
StepBasic_OrganizationAssignment.SetAssignedOrganization = new_instancemethod(_StepBasic.StepBasic_OrganizationAssignment_SetAssignedOrganization, None, StepBasic_OrganizationAssignment)
StepBasic_OrganizationAssignment.AssignedOrganization = new_instancemethod(_StepBasic.StepBasic_OrganizationAssignment_AssignedOrganization, None, StepBasic_OrganizationAssignment)
StepBasic_OrganizationAssignment.SetRole = new_instancemethod(_StepBasic.StepBasic_OrganizationAssignment_SetRole, None, StepBasic_OrganizationAssignment)
StepBasic_OrganizationAssignment.Role = new_instancemethod(_StepBasic.StepBasic_OrganizationAssignment_Role, None, StepBasic_OrganizationAssignment)
StepBasic_OrganizationAssignment_swigregister = _StepBasic.StepBasic_OrganizationAssignment_swigregister
StepBasic_OrganizationAssignment_swigregister(StepBasic_OrganizationAssignment)

class Handle_StepBasic_OrganizationAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_OrganizationAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_OrganizationAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_OrganizationAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_OrganizationAssignment
Handle_StepBasic_OrganizationAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationAssignment_Nullify, None, Handle_StepBasic_OrganizationAssignment)
Handle_StepBasic_OrganizationAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationAssignment_IsNull, None, Handle_StepBasic_OrganizationAssignment)
Handle_StepBasic_OrganizationAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationAssignment_GetObject, None, Handle_StepBasic_OrganizationAssignment)
Handle_StepBasic_OrganizationAssignment_swigregister = _StepBasic.Handle_StepBasic_OrganizationAssignment_swigregister
Handle_StepBasic_OrganizationAssignment_swigregister(Handle_StepBasic_OrganizationAssignment)

def Handle_StepBasic_OrganizationAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_OrganizationAssignment_DownCast(AnObject)
Handle_StepBasic_OrganizationAssignment_DownCast = _StepBasic.Handle_StepBasic_OrganizationAssignment_DownCast

class StepBasic_OrganizationRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrganizationRole

        :rtype: None

        """
        _StepBasic.StepBasic_OrganizationRole_swiginit(self, _StepBasic.new_StepBasic_OrganizationRole(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_OrganizationRole_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_OrganizationRole_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_OrganizationRole_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_OrganizationRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrganizationRole
StepBasic_OrganizationRole.Init = new_instancemethod(_StepBasic.StepBasic_OrganizationRole_Init, None, StepBasic_OrganizationRole)
StepBasic_OrganizationRole.SetName = new_instancemethod(_StepBasic.StepBasic_OrganizationRole_SetName, None, StepBasic_OrganizationRole)
StepBasic_OrganizationRole.Name = new_instancemethod(_StepBasic.StepBasic_OrganizationRole_Name, None, StepBasic_OrganizationRole)
StepBasic_OrganizationRole_swigregister = _StepBasic.StepBasic_OrganizationRole_swigregister
StepBasic_OrganizationRole_swigregister(StepBasic_OrganizationRole)

class Handle_StepBasic_OrganizationRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_OrganizationRole_swiginit(self, _StepBasic.new_Handle_StepBasic_OrganizationRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_OrganizationRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_OrganizationRole
Handle_StepBasic_OrganizationRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationRole_Nullify, None, Handle_StepBasic_OrganizationRole)
Handle_StepBasic_OrganizationRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationRole_IsNull, None, Handle_StepBasic_OrganizationRole)
Handle_StepBasic_OrganizationRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationRole_GetObject, None, Handle_StepBasic_OrganizationRole)
Handle_StepBasic_OrganizationRole_swigregister = _StepBasic.Handle_StepBasic_OrganizationRole_swigregister
Handle_StepBasic_OrganizationRole_swigregister(Handle_StepBasic_OrganizationRole)

def Handle_StepBasic_OrganizationRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_OrganizationRole_DownCast(AnObject)
Handle_StepBasic_OrganizationRole_DownCast = _StepBasic.Handle_StepBasic_OrganizationRole_DownCast

class StepBasic_Person(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Person

        :rtype: None

        """
        _StepBasic.StepBasic_Person_swiginit(self, _StepBasic.new_StepBasic_Person(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param hasAlastName:
        :type hasAlastName: bool
        :param aLastName:
        :type aLastName: Handle_TCollection_HAsciiString &
        :param hasAfirstName:
        :type hasAfirstName: bool
        :param aFirstName:
        :type aFirstName: Handle_TCollection_HAsciiString &
        :param hasAmiddleNames:
        :type hasAmiddleNames: bool
        :param aMiddleNames:
        :type aMiddleNames: Handle_Interface_HArray1OfHAsciiString &
        :param hasAprefixTitles:
        :type hasAprefixTitles: bool
        :param aPrefixTitles:
        :type aPrefixTitles: Handle_Interface_HArray1OfHAsciiString &
        :param hasAsuffixTitles:
        :type hasAsuffixTitles: bool
        :param aSuffixTitles:
        :type aSuffixTitles: Handle_Interface_HArray1OfHAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_Person_Init(self, *args)


    def SetId(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_SetId(self, *args)


    def Id(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Person_Id(self, *args)


    def SetLastName(self, *args):
        """
        :param aLastName:
        :type aLastName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_SetLastName(self, *args)


    def UnSetLastName(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_UnSetLastName(self, *args)


    def LastName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Person_LastName(self, *args)


    def HasLastName(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Person_HasLastName(self, *args)


    def SetFirstName(self, *args):
        """
        :param aFirstName:
        :type aFirstName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_SetFirstName(self, *args)


    def UnSetFirstName(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_UnSetFirstName(self, *args)


    def FirstName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Person_FirstName(self, *args)


    def HasFirstName(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Person_HasFirstName(self, *args)


    def SetMiddleNames(self, *args):
        """
        :param aMiddleNames:
        :type aMiddleNames: Handle_Interface_HArray1OfHAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_SetMiddleNames(self, *args)


    def UnSetMiddleNames(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_UnSetMiddleNames(self, *args)


    def MiddleNames(self, *args):
        """
        :rtype: Handle_Interface_HArray1OfHAsciiString

        """
        return _StepBasic.StepBasic_Person_MiddleNames(self, *args)


    def HasMiddleNames(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Person_HasMiddleNames(self, *args)


    def MiddleNamesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Person_MiddleNamesValue(self, *args)


    def NbMiddleNames(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Person_NbMiddleNames(self, *args)


    def SetPrefixTitles(self, *args):
        """
        :param aPrefixTitles:
        :type aPrefixTitles: Handle_Interface_HArray1OfHAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_SetPrefixTitles(self, *args)


    def UnSetPrefixTitles(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_UnSetPrefixTitles(self, *args)


    def PrefixTitles(self, *args):
        """
        :rtype: Handle_Interface_HArray1OfHAsciiString

        """
        return _StepBasic.StepBasic_Person_PrefixTitles(self, *args)


    def HasPrefixTitles(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Person_HasPrefixTitles(self, *args)


    def PrefixTitlesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Person_PrefixTitlesValue(self, *args)


    def NbPrefixTitles(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Person_NbPrefixTitles(self, *args)


    def SetSuffixTitles(self, *args):
        """
        :param aSuffixTitles:
        :type aSuffixTitles: Handle_Interface_HArray1OfHAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_SetSuffixTitles(self, *args)


    def UnSetSuffixTitles(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_Person_UnSetSuffixTitles(self, *args)


    def SuffixTitles(self, *args):
        """
        :rtype: Handle_Interface_HArray1OfHAsciiString

        """
        return _StepBasic.StepBasic_Person_SuffixTitles(self, *args)


    def HasSuffixTitles(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_Person_HasSuffixTitles(self, *args)


    def SuffixTitlesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Person_SuffixTitlesValue(self, *args)


    def NbSuffixTitles(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Person_NbSuffixTitles(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Person(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Person
StepBasic_Person.Init = new_instancemethod(_StepBasic.StepBasic_Person_Init, None, StepBasic_Person)
StepBasic_Person.SetId = new_instancemethod(_StepBasic.StepBasic_Person_SetId, None, StepBasic_Person)
StepBasic_Person.Id = new_instancemethod(_StepBasic.StepBasic_Person_Id, None, StepBasic_Person)
StepBasic_Person.SetLastName = new_instancemethod(_StepBasic.StepBasic_Person_SetLastName, None, StepBasic_Person)
StepBasic_Person.UnSetLastName = new_instancemethod(_StepBasic.StepBasic_Person_UnSetLastName, None, StepBasic_Person)
StepBasic_Person.LastName = new_instancemethod(_StepBasic.StepBasic_Person_LastName, None, StepBasic_Person)
StepBasic_Person.HasLastName = new_instancemethod(_StepBasic.StepBasic_Person_HasLastName, None, StepBasic_Person)
StepBasic_Person.SetFirstName = new_instancemethod(_StepBasic.StepBasic_Person_SetFirstName, None, StepBasic_Person)
StepBasic_Person.UnSetFirstName = new_instancemethod(_StepBasic.StepBasic_Person_UnSetFirstName, None, StepBasic_Person)
StepBasic_Person.FirstName = new_instancemethod(_StepBasic.StepBasic_Person_FirstName, None, StepBasic_Person)
StepBasic_Person.HasFirstName = new_instancemethod(_StepBasic.StepBasic_Person_HasFirstName, None, StepBasic_Person)
StepBasic_Person.SetMiddleNames = new_instancemethod(_StepBasic.StepBasic_Person_SetMiddleNames, None, StepBasic_Person)
StepBasic_Person.UnSetMiddleNames = new_instancemethod(_StepBasic.StepBasic_Person_UnSetMiddleNames, None, StepBasic_Person)
StepBasic_Person.MiddleNames = new_instancemethod(_StepBasic.StepBasic_Person_MiddleNames, None, StepBasic_Person)
StepBasic_Person.HasMiddleNames = new_instancemethod(_StepBasic.StepBasic_Person_HasMiddleNames, None, StepBasic_Person)
StepBasic_Person.MiddleNamesValue = new_instancemethod(_StepBasic.StepBasic_Person_MiddleNamesValue, None, StepBasic_Person)
StepBasic_Person.NbMiddleNames = new_instancemethod(_StepBasic.StepBasic_Person_NbMiddleNames, None, StepBasic_Person)
StepBasic_Person.SetPrefixTitles = new_instancemethod(_StepBasic.StepBasic_Person_SetPrefixTitles, None, StepBasic_Person)
StepBasic_Person.UnSetPrefixTitles = new_instancemethod(_StepBasic.StepBasic_Person_UnSetPrefixTitles, None, StepBasic_Person)
StepBasic_Person.PrefixTitles = new_instancemethod(_StepBasic.StepBasic_Person_PrefixTitles, None, StepBasic_Person)
StepBasic_Person.HasPrefixTitles = new_instancemethod(_StepBasic.StepBasic_Person_HasPrefixTitles, None, StepBasic_Person)
StepBasic_Person.PrefixTitlesValue = new_instancemethod(_StepBasic.StepBasic_Person_PrefixTitlesValue, None, StepBasic_Person)
StepBasic_Person.NbPrefixTitles = new_instancemethod(_StepBasic.StepBasic_Person_NbPrefixTitles, None, StepBasic_Person)
StepBasic_Person.SetSuffixTitles = new_instancemethod(_StepBasic.StepBasic_Person_SetSuffixTitles, None, StepBasic_Person)
StepBasic_Person.UnSetSuffixTitles = new_instancemethod(_StepBasic.StepBasic_Person_UnSetSuffixTitles, None, StepBasic_Person)
StepBasic_Person.SuffixTitles = new_instancemethod(_StepBasic.StepBasic_Person_SuffixTitles, None, StepBasic_Person)
StepBasic_Person.HasSuffixTitles = new_instancemethod(_StepBasic.StepBasic_Person_HasSuffixTitles, None, StepBasic_Person)
StepBasic_Person.SuffixTitlesValue = new_instancemethod(_StepBasic.StepBasic_Person_SuffixTitlesValue, None, StepBasic_Person)
StepBasic_Person.NbSuffixTitles = new_instancemethod(_StepBasic.StepBasic_Person_NbSuffixTitles, None, StepBasic_Person)
StepBasic_Person_swigregister = _StepBasic.StepBasic_Person_swigregister
StepBasic_Person_swigregister(StepBasic_Person)

class Handle_StepBasic_Person(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Person_swiginit(self, _StepBasic.new_Handle_StepBasic_Person(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Person_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Person
Handle_StepBasic_Person.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Person_Nullify, None, Handle_StepBasic_Person)
Handle_StepBasic_Person.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Person_IsNull, None, Handle_StepBasic_Person)
Handle_StepBasic_Person.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Person_GetObject, None, Handle_StepBasic_Person)
Handle_StepBasic_Person_swigregister = _StepBasic.Handle_StepBasic_Person_swigregister
Handle_StepBasic_Person_swigregister(Handle_StepBasic_Person)

def Handle_StepBasic_Person_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Person_DownCast(AnObject)
Handle_StepBasic_Person_DownCast = _StepBasic.Handle_StepBasic_Person_DownCast

class StepBasic_PersonAndOrganization(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PersonAndOrganization

        :rtype: None

        """
        _StepBasic.StepBasic_PersonAndOrganization_swiginit(self, _StepBasic.new_StepBasic_PersonAndOrganization(*args))

    def Init(self, *args):
        """
        :param aThePerson:
        :type aThePerson: Handle_StepBasic_Person &
        :param aTheOrganization:
        :type aTheOrganization: Handle_StepBasic_Organization &
        :rtype: void

        """
        return _StepBasic.StepBasic_PersonAndOrganization_Init(self, *args)


    def SetThePerson(self, *args):
        """
        :param aThePerson:
        :type aThePerson: Handle_StepBasic_Person &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonAndOrganization_SetThePerson(self, *args)


    def ThePerson(self, *args):
        """
        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_PersonAndOrganization_ThePerson(self, *args)


    def SetTheOrganization(self, *args):
        """
        :param aTheOrganization:
        :type aTheOrganization: Handle_StepBasic_Organization &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonAndOrganization_SetTheOrganization(self, *args)


    def TheOrganization(self, *args):
        """
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_PersonAndOrganization_TheOrganization(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PersonAndOrganization(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonAndOrganization
StepBasic_PersonAndOrganization.Init = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganization_Init, None, StepBasic_PersonAndOrganization)
StepBasic_PersonAndOrganization.SetThePerson = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganization_SetThePerson, None, StepBasic_PersonAndOrganization)
StepBasic_PersonAndOrganization.ThePerson = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganization_ThePerson, None, StepBasic_PersonAndOrganization)
StepBasic_PersonAndOrganization.SetTheOrganization = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganization_SetTheOrganization, None, StepBasic_PersonAndOrganization)
StepBasic_PersonAndOrganization.TheOrganization = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganization_TheOrganization, None, StepBasic_PersonAndOrganization)
StepBasic_PersonAndOrganization_swigregister = _StepBasic.StepBasic_PersonAndOrganization_swigregister
StepBasic_PersonAndOrganization_swigregister(StepBasic_PersonAndOrganization)

class Handle_StepBasic_PersonAndOrganization(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PersonAndOrganization_swiginit(self, _StepBasic.new_Handle_StepBasic_PersonAndOrganization(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PersonAndOrganization_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PersonAndOrganization
Handle_StepBasic_PersonAndOrganization.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganization_Nullify, None, Handle_StepBasic_PersonAndOrganization)
Handle_StepBasic_PersonAndOrganization.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganization_IsNull, None, Handle_StepBasic_PersonAndOrganization)
Handle_StepBasic_PersonAndOrganization.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganization_GetObject, None, Handle_StepBasic_PersonAndOrganization)
Handle_StepBasic_PersonAndOrganization_swigregister = _StepBasic.Handle_StepBasic_PersonAndOrganization_swigregister
Handle_StepBasic_PersonAndOrganization_swigregister(Handle_StepBasic_PersonAndOrganization)

def Handle_StepBasic_PersonAndOrganization_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PersonAndOrganization_DownCast(AnObject)
Handle_StepBasic_PersonAndOrganization_DownCast = _StepBasic.Handle_StepBasic_PersonAndOrganization_DownCast

class StepBasic_PersonAndOrganizationAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        :param aAssignedPersonAndOrganization:
        :type aAssignedPersonAndOrganization: Handle_StepBasic_PersonAndOrganization &
        :param aRole:
        :type aRole: Handle_StepBasic_PersonAndOrganizationRole &
        :rtype: void

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_Init(self, *args)


    def SetAssignedPersonAndOrganization(self, *args):
        """
        :param aAssignedPersonAndOrganization:
        :type aAssignedPersonAndOrganization: Handle_StepBasic_PersonAndOrganization &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_SetAssignedPersonAndOrganization(self, *args)


    def AssignedPersonAndOrganization(self, *args):
        """
        :rtype: Handle_StepBasic_PersonAndOrganization

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_AssignedPersonAndOrganization(self, *args)


    def SetRole(self, *args):
        """
        :param aRole:
        :type aRole: Handle_StepBasic_PersonAndOrganizationRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        :rtype: Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_Role(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PersonAndOrganizationAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonAndOrganizationAssignment
StepBasic_PersonAndOrganizationAssignment.Init = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationAssignment_Init, None, StepBasic_PersonAndOrganizationAssignment)
StepBasic_PersonAndOrganizationAssignment.SetAssignedPersonAndOrganization = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationAssignment_SetAssignedPersonAndOrganization, None, StepBasic_PersonAndOrganizationAssignment)
StepBasic_PersonAndOrganizationAssignment.AssignedPersonAndOrganization = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationAssignment_AssignedPersonAndOrganization, None, StepBasic_PersonAndOrganizationAssignment)
StepBasic_PersonAndOrganizationAssignment.SetRole = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationAssignment_SetRole, None, StepBasic_PersonAndOrganizationAssignment)
StepBasic_PersonAndOrganizationAssignment.Role = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationAssignment_Role, None, StepBasic_PersonAndOrganizationAssignment)
StepBasic_PersonAndOrganizationAssignment_swigregister = _StepBasic.StepBasic_PersonAndOrganizationAssignment_swigregister
StepBasic_PersonAndOrganizationAssignment_swigregister(StepBasic_PersonAndOrganizationAssignment)

class Handle_StepBasic_PersonAndOrganizationAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_PersonAndOrganizationAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PersonAndOrganizationAssignment
Handle_StepBasic_PersonAndOrganizationAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_Nullify, None, Handle_StepBasic_PersonAndOrganizationAssignment)
Handle_StepBasic_PersonAndOrganizationAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_IsNull, None, Handle_StepBasic_PersonAndOrganizationAssignment)
Handle_StepBasic_PersonAndOrganizationAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_GetObject, None, Handle_StepBasic_PersonAndOrganizationAssignment)
Handle_StepBasic_PersonAndOrganizationAssignment_swigregister = _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_swigregister
Handle_StepBasic_PersonAndOrganizationAssignment_swigregister(Handle_StepBasic_PersonAndOrganizationAssignment)

def Handle_StepBasic_PersonAndOrganizationAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_DownCast(AnObject)
Handle_StepBasic_PersonAndOrganizationAssignment_DownCast = _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_DownCast

class StepBasic_PersonAndOrganizationRole(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PersonAndOrganizationRole

        :rtype: None

        """
        _StepBasic.StepBasic_PersonAndOrganizationRole_swiginit(self, _StepBasic.new_StepBasic_PersonAndOrganizationRole(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_PersonAndOrganizationRole_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationRole_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_PersonAndOrganizationRole_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PersonAndOrganizationRole(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonAndOrganizationRole
StepBasic_PersonAndOrganizationRole.Init = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationRole_Init, None, StepBasic_PersonAndOrganizationRole)
StepBasic_PersonAndOrganizationRole.SetName = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationRole_SetName, None, StepBasic_PersonAndOrganizationRole)
StepBasic_PersonAndOrganizationRole.Name = new_instancemethod(_StepBasic.StepBasic_PersonAndOrganizationRole_Name, None, StepBasic_PersonAndOrganizationRole)
StepBasic_PersonAndOrganizationRole_swigregister = _StepBasic.StepBasic_PersonAndOrganizationRole_swigregister
StepBasic_PersonAndOrganizationRole_swigregister(StepBasic_PersonAndOrganizationRole)

class Handle_StepBasic_PersonAndOrganizationRole(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_swiginit(self, _StepBasic.new_Handle_StepBasic_PersonAndOrganizationRole(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationRole_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PersonAndOrganizationRole
Handle_StepBasic_PersonAndOrganizationRole.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationRole_Nullify, None, Handle_StepBasic_PersonAndOrganizationRole)
Handle_StepBasic_PersonAndOrganizationRole.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationRole_IsNull, None, Handle_StepBasic_PersonAndOrganizationRole)
Handle_StepBasic_PersonAndOrganizationRole.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PersonAndOrganizationRole_GetObject, None, Handle_StepBasic_PersonAndOrganizationRole)
Handle_StepBasic_PersonAndOrganizationRole_swigregister = _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_swigregister
Handle_StepBasic_PersonAndOrganizationRole_swigregister(Handle_StepBasic_PersonAndOrganizationRole)

def Handle_StepBasic_PersonAndOrganizationRole_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_DownCast(AnObject)
Handle_StepBasic_PersonAndOrganizationRole_DownCast = _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_DownCast

class StepBasic_PersonOrganizationSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PersonOrganizationSelect SelectType

        :rtype: None

        """
        _StepBasic.StepBasic_PersonOrganizationSelect_swiginit(self, _StepBasic.new_StepBasic_PersonOrganizationSelect(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a PersonOrganizationSelect Kind Entity that is : 1 -> Person 2 -> Organization 3 -> PersonAndOrganization 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_CaseNum(self, *args)


    def Person(self, *args):
        """
        * returns Value as a Person (Null if another type)

        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_Person(self, *args)


    def Organization(self, *args):
        """
        * returns Value as a Organization (Null if another type)

        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_Organization(self, *args)


    def PersonAndOrganization(self, *args):
        """
        * returns Value as a PersonAndOrganization (Null if another type)

        :rtype: Handle_StepBasic_PersonAndOrganization

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_PersonAndOrganization(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonOrganizationSelect
StepBasic_PersonOrganizationSelect.CaseNum = new_instancemethod(_StepBasic.StepBasic_PersonOrganizationSelect_CaseNum, None, StepBasic_PersonOrganizationSelect)
StepBasic_PersonOrganizationSelect.Person = new_instancemethod(_StepBasic.StepBasic_PersonOrganizationSelect_Person, None, StepBasic_PersonOrganizationSelect)
StepBasic_PersonOrganizationSelect.Organization = new_instancemethod(_StepBasic.StepBasic_PersonOrganizationSelect_Organization, None, StepBasic_PersonOrganizationSelect)
StepBasic_PersonOrganizationSelect.PersonAndOrganization = new_instancemethod(_StepBasic.StepBasic_PersonOrganizationSelect_PersonAndOrganization, None, StepBasic_PersonOrganizationSelect)
StepBasic_PersonOrganizationSelect_swigregister = _StepBasic.StepBasic_PersonOrganizationSelect_swigregister
StepBasic_PersonOrganizationSelect_swigregister(StepBasic_PersonOrganizationSelect)

class StepBasic_Product(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Product

        :rtype: None

        """
        _StepBasic.StepBasic_Product_swiginit(self, _StepBasic.new_StepBasic_Product(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_HArray1OfProductContext &
        :rtype: void

        """
        return _StepBasic.StepBasic_Product_Init(self, *args)


    def SetId(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Product_SetId(self, *args)


    def Id(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Product_Id(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Product_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Product_Name(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_Product_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_Product_Description(self, *args)


    def SetFrameOfReference(self, *args):
        """
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_HArray1OfProductContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_Product_SetFrameOfReference(self, *args)


    def FrameOfReference(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfProductContext

        """
        return _StepBasic.StepBasic_Product_FrameOfReference(self, *args)


    def FrameOfReferenceValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_ProductContext

        """
        return _StepBasic.StepBasic_Product_FrameOfReferenceValue(self, *args)


    def NbFrameOfReference(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_Product_NbFrameOfReference(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_Product(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_Product
StepBasic_Product.Init = new_instancemethod(_StepBasic.StepBasic_Product_Init, None, StepBasic_Product)
StepBasic_Product.SetId = new_instancemethod(_StepBasic.StepBasic_Product_SetId, None, StepBasic_Product)
StepBasic_Product.Id = new_instancemethod(_StepBasic.StepBasic_Product_Id, None, StepBasic_Product)
StepBasic_Product.SetName = new_instancemethod(_StepBasic.StepBasic_Product_SetName, None, StepBasic_Product)
StepBasic_Product.Name = new_instancemethod(_StepBasic.StepBasic_Product_Name, None, StepBasic_Product)
StepBasic_Product.SetDescription = new_instancemethod(_StepBasic.StepBasic_Product_SetDescription, None, StepBasic_Product)
StepBasic_Product.Description = new_instancemethod(_StepBasic.StepBasic_Product_Description, None, StepBasic_Product)
StepBasic_Product.SetFrameOfReference = new_instancemethod(_StepBasic.StepBasic_Product_SetFrameOfReference, None, StepBasic_Product)
StepBasic_Product.FrameOfReference = new_instancemethod(_StepBasic.StepBasic_Product_FrameOfReference, None, StepBasic_Product)
StepBasic_Product.FrameOfReferenceValue = new_instancemethod(_StepBasic.StepBasic_Product_FrameOfReferenceValue, None, StepBasic_Product)
StepBasic_Product.NbFrameOfReference = new_instancemethod(_StepBasic.StepBasic_Product_NbFrameOfReference, None, StepBasic_Product)
StepBasic_Product_swigregister = _StepBasic.StepBasic_Product_swigregister
StepBasic_Product_swigregister(StepBasic_Product)

class Handle_StepBasic_Product(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_Product_swiginit(self, _StepBasic.new_Handle_StepBasic_Product(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_Product_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_Product
Handle_StepBasic_Product.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_Product_Nullify, None, Handle_StepBasic_Product)
Handle_StepBasic_Product.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_Product_IsNull, None, Handle_StepBasic_Product)
Handle_StepBasic_Product.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_Product_GetObject, None, Handle_StepBasic_Product)
Handle_StepBasic_Product_swigregister = _StepBasic.Handle_StepBasic_Product_swigregister
Handle_StepBasic_Product_swigregister(Handle_StepBasic_Product)

def Handle_StepBasic_Product_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_Product_DownCast(AnObject)
Handle_StepBasic_Product_DownCast = _StepBasic.Handle_StepBasic_Product_DownCast

class StepBasic_ProductCategory(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductCategory

        :rtype: None

        """
        _StepBasic.StepBasic_ProductCategory_swiginit(self, _StepBasic.new_StepBasic_ProductCategory(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasAdescription:
        :type hasAdescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductCategory_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategory_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductCategory_Name(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategory_SetDescription(self, *args)


    def UnSetDescription(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategory_UnSetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductCategory_Description(self, *args)


    def HasDescription(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_ProductCategory_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductCategory(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductCategory
StepBasic_ProductCategory.Init = new_instancemethod(_StepBasic.StepBasic_ProductCategory_Init, None, StepBasic_ProductCategory)
StepBasic_ProductCategory.SetName = new_instancemethod(_StepBasic.StepBasic_ProductCategory_SetName, None, StepBasic_ProductCategory)
StepBasic_ProductCategory.Name = new_instancemethod(_StepBasic.StepBasic_ProductCategory_Name, None, StepBasic_ProductCategory)
StepBasic_ProductCategory.SetDescription = new_instancemethod(_StepBasic.StepBasic_ProductCategory_SetDescription, None, StepBasic_ProductCategory)
StepBasic_ProductCategory.UnSetDescription = new_instancemethod(_StepBasic.StepBasic_ProductCategory_UnSetDescription, None, StepBasic_ProductCategory)
StepBasic_ProductCategory.Description = new_instancemethod(_StepBasic.StepBasic_ProductCategory_Description, None, StepBasic_ProductCategory)
StepBasic_ProductCategory.HasDescription = new_instancemethod(_StepBasic.StepBasic_ProductCategory_HasDescription, None, StepBasic_ProductCategory)
StepBasic_ProductCategory_swigregister = _StepBasic.StepBasic_ProductCategory_swigregister
StepBasic_ProductCategory_swigregister(StepBasic_ProductCategory)

class Handle_StepBasic_ProductCategory(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductCategory_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductCategory(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductCategory_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductCategory
Handle_StepBasic_ProductCategory.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductCategory_Nullify, None, Handle_StepBasic_ProductCategory)
Handle_StepBasic_ProductCategory.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductCategory_IsNull, None, Handle_StepBasic_ProductCategory)
Handle_StepBasic_ProductCategory.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductCategory_GetObject, None, Handle_StepBasic_ProductCategory)
Handle_StepBasic_ProductCategory_swigregister = _StepBasic.Handle_StepBasic_ProductCategory_swigregister
Handle_StepBasic_ProductCategory_swigregister(Handle_StepBasic_ProductCategory)

def Handle_StepBasic_ProductCategory_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductCategory_DownCast(AnObject)
Handle_StepBasic_ProductCategory_DownCast = _StepBasic.Handle_StepBasic_ProductCategory_DownCast

class StepBasic_ProductCategoryRelationship(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ProductCategoryRelationship_swiginit(self, _StepBasic.new_StepBasic_ProductCategoryRelationship(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aCategory:
        :type aCategory: Handle_StepBasic_ProductCategory &
        :param aSubCategory:
        :type aSubCategory: Handle_StepBasic_ProductCategory &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Init(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_HasDescription(self, *args)


    def Category(self, *args):
        """
        * Returns field Category

        :rtype: Handle_StepBasic_ProductCategory

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Category(self, *args)


    def SetCategory(self, *args):
        """
        * Set field Category

        :param Category:
        :type Category: Handle_StepBasic_ProductCategory &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetCategory(self, *args)


    def SubCategory(self, *args):
        """
        * Returns field SubCategory

        :rtype: Handle_StepBasic_ProductCategory

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SubCategory(self, *args)


    def SetSubCategory(self, *args):
        """
        * Set field SubCategory

        :param SubCategory:
        :type SubCategory: Handle_StepBasic_ProductCategory &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetSubCategory(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductCategoryRelationship(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductCategoryRelationship
StepBasic_ProductCategoryRelationship.Init = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_Init, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.Name = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_Name, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.SetName = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_SetName, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.Description = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_Description, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.SetDescription = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_SetDescription, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.HasDescription = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_HasDescription, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.Category = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_Category, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.SetCategory = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_SetCategory, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.SubCategory = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_SubCategory, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship.SetSubCategory = new_instancemethod(_StepBasic.StepBasic_ProductCategoryRelationship_SetSubCategory, None, StepBasic_ProductCategoryRelationship)
StepBasic_ProductCategoryRelationship_swigregister = _StepBasic.StepBasic_ProductCategoryRelationship_swigregister
StepBasic_ProductCategoryRelationship_swigregister(StepBasic_ProductCategoryRelationship)

class Handle_StepBasic_ProductCategoryRelationship(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductCategoryRelationship_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductCategoryRelationship(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductCategoryRelationship_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductCategoryRelationship
Handle_StepBasic_ProductCategoryRelationship.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductCategoryRelationship_Nullify, None, Handle_StepBasic_ProductCategoryRelationship)
Handle_StepBasic_ProductCategoryRelationship.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductCategoryRelationship_IsNull, None, Handle_StepBasic_ProductCategoryRelationship)
Handle_StepBasic_ProductCategoryRelationship.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductCategoryRelationship_GetObject, None, Handle_StepBasic_ProductCategoryRelationship)
Handle_StepBasic_ProductCategoryRelationship_swigregister = _StepBasic.Handle_StepBasic_ProductCategoryRelationship_swigregister
Handle_StepBasic_ProductCategoryRelationship_swigregister(Handle_StepBasic_ProductCategoryRelationship)

def Handle_StepBasic_ProductCategoryRelationship_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductCategoryRelationship_DownCast(AnObject)
Handle_StepBasic_ProductCategoryRelationship_DownCast = _StepBasic.Handle_StepBasic_ProductCategoryRelationship_DownCast

class StepBasic_ProductDefinition(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductDefinition

        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinition_swiginit(self, _StepBasic.new_StepBasic_ProductDefinition(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aFormation:
        :type aFormation: Handle_StepBasic_ProductDefinitionFormation &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ProductDefinitionContext &
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductDefinition_Init(self, *args)


    def SetId(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetId(self, *args)


    def Id(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinition_Id(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinition_Description(self, *args)


    def SetFormation(self, *args):
        """
        :param aFormation:
        :type aFormation: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetFormation(self, *args)


    def Formation(self, *args):
        """
        :rtype: Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepBasic.StepBasic_ProductDefinition_Formation(self, *args)


    def SetFrameOfReference(self, *args):
        """
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ProductDefinitionContext &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetFrameOfReference(self, *args)


    def FrameOfReference(self, *args):
        """
        :rtype: Handle_StepBasic_ProductDefinitionContext

        """
        return _StepBasic.StepBasic_ProductDefinition_FrameOfReference(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinition(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinition
StepBasic_ProductDefinition.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_Init, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.SetId = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_SetId, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.Id = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_Id, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.SetDescription = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_SetDescription, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.Description = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_Description, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.SetFormation = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_SetFormation, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.Formation = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_Formation, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.SetFrameOfReference = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_SetFrameOfReference, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition.FrameOfReference = new_instancemethod(_StepBasic.StepBasic_ProductDefinition_FrameOfReference, None, StepBasic_ProductDefinition)
StepBasic_ProductDefinition_swigregister = _StepBasic.StepBasic_ProductDefinition_swigregister
StepBasic_ProductDefinition_swigregister(StepBasic_ProductDefinition)

class Handle_StepBasic_ProductDefinition(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinition_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinition(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinition_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinition
Handle_StepBasic_ProductDefinition.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinition_Nullify, None, Handle_StepBasic_ProductDefinition)
Handle_StepBasic_ProductDefinition.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinition_IsNull, None, Handle_StepBasic_ProductDefinition)
Handle_StepBasic_ProductDefinition.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinition_GetObject, None, Handle_StepBasic_ProductDefinition)
Handle_StepBasic_ProductDefinition_swigregister = _StepBasic.Handle_StepBasic_ProductDefinition_swigregister
Handle_StepBasic_ProductDefinition_swigregister(Handle_StepBasic_ProductDefinition)

def Handle_StepBasic_ProductDefinition_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinition_DownCast(AnObject)
Handle_StepBasic_ProductDefinition_DownCast = _StepBasic.Handle_StepBasic_ProductDefinition_DownCast

class StepBasic_ProductDefinitionFormation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductDefinitionFormation

        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionFormation_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionFormation(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aOfProduct:
        :type aOfProduct: Handle_StepBasic_Product &
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_Init(self, *args)


    def SetId(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_SetId(self, *args)


    def Id(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_Id(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_Description(self, *args)


    def SetOfProduct(self, *args):
        """
        :param aOfProduct:
        :type aOfProduct: Handle_StepBasic_Product &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_SetOfProduct(self, *args)


    def OfProduct(self, *args):
        """
        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_OfProduct(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionFormation(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionFormation
StepBasic_ProductDefinitionFormation.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_Init, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation.SetId = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_SetId, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation.Id = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_Id, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation.SetDescription = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_SetDescription, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation.Description = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_Description, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation.SetOfProduct = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_SetOfProduct, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation.OfProduct = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormation_OfProduct, None, StepBasic_ProductDefinitionFormation)
StepBasic_ProductDefinitionFormation_swigregister = _StepBasic.StepBasic_ProductDefinitionFormation_swigregister
StepBasic_ProductDefinitionFormation_swigregister(StepBasic_ProductDefinitionFormation)

class Handle_StepBasic_ProductDefinitionFormation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionFormation_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionFormation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormation_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionFormation
Handle_StepBasic_ProductDefinitionFormation.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormation_Nullify, None, Handle_StepBasic_ProductDefinitionFormation)
Handle_StepBasic_ProductDefinitionFormation.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormation_IsNull, None, Handle_StepBasic_ProductDefinitionFormation)
Handle_StepBasic_ProductDefinitionFormation.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormation_GetObject, None, Handle_StepBasic_ProductDefinitionFormation)
Handle_StepBasic_ProductDefinitionFormation_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionFormation_swigregister
Handle_StepBasic_ProductDefinitionFormation_swigregister(Handle_StepBasic_ProductDefinitionFormation)

def Handle_StepBasic_ProductDefinitionFormation_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormation_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionFormation_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionFormation_DownCast

class StepBasic_ProductDefinitionFormationRelationship(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionFormationRelationship_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionFormationRelationship(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aRelatingProductDefinitionFormation:
        :type aRelatingProductDefinitionFormation: Handle_StepBasic_ProductDefinitionFormation &
        :param aRelatedProductDefinitionFormation:
        :type aRelatedProductDefinitionFormation: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Init(self, *args)


    def Id(self, *args):
        """
        * Returns field Id

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Id(self, *args)


    def SetId(self, *args):
        """
        * Set field Id

        :param Id:
        :type Id: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetId(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetDescription(self, *args)


    def RelatingProductDefinitionFormation(self, *args):
        """
        * Returns field RelatingProductDefinitionFormation

        :rtype: Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_RelatingProductDefinitionFormation(self, *args)


    def SetRelatingProductDefinitionFormation(self, *args):
        """
        * Set field RelatingProductDefinitionFormation

        :param RelatingProductDefinitionFormation:
        :type RelatingProductDefinitionFormation: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetRelatingProductDefinitionFormation(self, *args)


    def RelatedProductDefinitionFormation(self, *args):
        """
        * Returns field RelatedProductDefinitionFormation

        :rtype: Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_RelatedProductDefinitionFormation(self, *args)


    def SetRelatedProductDefinitionFormation(self, *args):
        """
        * Set field RelatedProductDefinitionFormation

        :param RelatedProductDefinitionFormation:
        :type RelatedProductDefinitionFormation: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetRelatedProductDefinitionFormation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionFormationRelationship(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionFormationRelationship
StepBasic_ProductDefinitionFormationRelationship.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_Init, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.Id = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_Id, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.SetId = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetId, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.Name = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_Name, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.SetName = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetName, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.Description = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_Description, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.SetDescription = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetDescription, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.RelatingProductDefinitionFormation = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_RelatingProductDefinitionFormation, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.SetRelatingProductDefinitionFormation = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetRelatingProductDefinitionFormation, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.RelatedProductDefinitionFormation = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_RelatedProductDefinitionFormation, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship.SetRelatedProductDefinitionFormation = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetRelatedProductDefinitionFormation, None, StepBasic_ProductDefinitionFormationRelationship)
StepBasic_ProductDefinitionFormationRelationship_swigregister = _StepBasic.StepBasic_ProductDefinitionFormationRelationship_swigregister
StepBasic_ProductDefinitionFormationRelationship_swigregister(StepBasic_ProductDefinitionFormationRelationship)

class Handle_StepBasic_ProductDefinitionFormationRelationship(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionFormationRelationship(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionFormationRelationship
Handle_StepBasic_ProductDefinitionFormationRelationship.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_Nullify, None, Handle_StepBasic_ProductDefinitionFormationRelationship)
Handle_StepBasic_ProductDefinitionFormationRelationship.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_IsNull, None, Handle_StepBasic_ProductDefinitionFormationRelationship)
Handle_StepBasic_ProductDefinitionFormationRelationship.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_GetObject, None, Handle_StepBasic_ProductDefinitionFormationRelationship)
Handle_StepBasic_ProductDefinitionFormationRelationship_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_swigregister
Handle_StepBasic_ProductDefinitionFormationRelationship_swigregister(Handle_StepBasic_ProductDefinitionFormationRelationship)

def Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast

class StepBasic_ProductDefinitionRelationship(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionRelationship_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionRelationship(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aRelatingProductDefinition:
        :type aRelatingProductDefinition: Handle_StepBasic_ProductDefinition &
        :param aRelatedProductDefinition:
        :type aRelatedProductDefinition: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Init(self, *args)


    def Id(self, *args):
        """
        * Returns field Id

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Id(self, *args)


    def SetId(self, *args):
        """
        * Set field Id

        :param Id:
        :type Id: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetId(self, *args)


    def Name(self, *args):
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        * Returns field RelatingProductDefinition

        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_RelatingProductDefinition(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        * Set field RelatingProductDefinition

        :param RelatingProductDefinition:
        :type RelatingProductDefinition: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        * Returns field RelatedProductDefinition

        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_RelatedProductDefinition(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        * Set field RelatedProductDefinition

        :param RelatedProductDefinition:
        :type RelatedProductDefinition: Handle_StepBasic_ProductDefinition &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetRelatedProductDefinition(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionRelationship(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionRelationship
StepBasic_ProductDefinitionRelationship.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_Init, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.Id = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_Id, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.SetId = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_SetId, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.Name = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_Name, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.SetName = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_SetName, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.Description = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_Description, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.SetDescription = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_SetDescription, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.HasDescription = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_HasDescription, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.RelatingProductDefinition = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_RelatingProductDefinition, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.SetRelatingProductDefinition = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_SetRelatingProductDefinition, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.RelatedProductDefinition = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_RelatedProductDefinition, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship.SetRelatedProductDefinition = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionRelationship_SetRelatedProductDefinition, None, StepBasic_ProductDefinitionRelationship)
StepBasic_ProductDefinitionRelationship_swigregister = _StepBasic.StepBasic_ProductDefinitionRelationship_swigregister
StepBasic_ProductDefinitionRelationship_swigregister(StepBasic_ProductDefinitionRelationship)

class Handle_StepBasic_ProductDefinitionRelationship(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionRelationship(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionRelationship_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionRelationship
Handle_StepBasic_ProductDefinitionRelationship.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionRelationship_Nullify, None, Handle_StepBasic_ProductDefinitionRelationship)
Handle_StepBasic_ProductDefinitionRelationship.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionRelationship_IsNull, None, Handle_StepBasic_ProductDefinitionRelationship)
Handle_StepBasic_ProductDefinitionRelationship.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionRelationship_GetObject, None, Handle_StepBasic_ProductDefinitionRelationship)
Handle_StepBasic_ProductDefinitionRelationship_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_swigregister
Handle_StepBasic_ProductDefinitionRelationship_swigregister(Handle_StepBasic_ProductDefinitionRelationship)

def Handle_StepBasic_ProductDefinitionRelationship_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionRelationship_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_DownCast

class StepBasic_ProductOrFormationOrDefinition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ProductOrFormationOrDefinition_swiginit(self, _StepBasic.new_StepBasic_ProductOrFormationOrDefinition(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a kind of ProductOrFormationOrDefinition select type 1 -> Product from StepBasic 2 -> ProductDefinitionFormation from StepBasic 3 -> ProductDefinition from StepBasic 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_CaseNum(self, *args)


    def Product(self, *args):
        """
        * Returns Value as Product (or Null if another type)

        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_Product(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        * Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_ProductDefinitionFormation(self, *args)


    def ProductDefinition(self, *args):
        """
        * Returns Value as ProductDefinition (or Null if another type)

        :rtype: Handle_StepBasic_ProductDefinition

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_ProductDefinition(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductOrFormationOrDefinition
StepBasic_ProductOrFormationOrDefinition.CaseNum = new_instancemethod(_StepBasic.StepBasic_ProductOrFormationOrDefinition_CaseNum, None, StepBasic_ProductOrFormationOrDefinition)
StepBasic_ProductOrFormationOrDefinition.Product = new_instancemethod(_StepBasic.StepBasic_ProductOrFormationOrDefinition_Product, None, StepBasic_ProductOrFormationOrDefinition)
StepBasic_ProductOrFormationOrDefinition.ProductDefinitionFormation = new_instancemethod(_StepBasic.StepBasic_ProductOrFormationOrDefinition_ProductDefinitionFormation, None, StepBasic_ProductOrFormationOrDefinition)
StepBasic_ProductOrFormationOrDefinition.ProductDefinition = new_instancemethod(_StepBasic.StepBasic_ProductOrFormationOrDefinition_ProductDefinition, None, StepBasic_ProductOrFormationOrDefinition)
StepBasic_ProductOrFormationOrDefinition_swigregister = _StepBasic.StepBasic_ProductOrFormationOrDefinition_swigregister
StepBasic_ProductOrFormationOrDefinition_swigregister(StepBasic_ProductOrFormationOrDefinition)

class StepBasic_RoleAssociation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_RoleAssociation_swiginit(self, _StepBasic.new_StepBasic_RoleAssociation(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aRole:
        :type aRole: Handle_StepBasic_ObjectRole &
        :param aItemWithRole:
        :type aItemWithRole: StepBasic_RoleSelect &
        :rtype: None

        """
        return _StepBasic.StepBasic_RoleAssociation_Init(self, *args)


    def Role(self, *args):
        """
        * Returns field Role

        :rtype: Handle_StepBasic_ObjectRole

        """
        return _StepBasic.StepBasic_RoleAssociation_Role(self, *args)


    def SetRole(self, *args):
        """
        * Set field Role

        :param Role:
        :type Role: Handle_StepBasic_ObjectRole &
        :rtype: None

        """
        return _StepBasic.StepBasic_RoleAssociation_SetRole(self, *args)


    def ItemWithRole(self, *args):
        """
        * Returns field ItemWithRole

        :rtype: StepBasic_RoleSelect

        """
        return _StepBasic.StepBasic_RoleAssociation_ItemWithRole(self, *args)


    def SetItemWithRole(self, *args):
        """
        * Set field ItemWithRole

        :param ItemWithRole:
        :type ItemWithRole: StepBasic_RoleSelect &
        :rtype: None

        """
        return _StepBasic.StepBasic_RoleAssociation_SetItemWithRole(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_RoleAssociation(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_RoleAssociation
StepBasic_RoleAssociation.Init = new_instancemethod(_StepBasic.StepBasic_RoleAssociation_Init, None, StepBasic_RoleAssociation)
StepBasic_RoleAssociation.Role = new_instancemethod(_StepBasic.StepBasic_RoleAssociation_Role, None, StepBasic_RoleAssociation)
StepBasic_RoleAssociation.SetRole = new_instancemethod(_StepBasic.StepBasic_RoleAssociation_SetRole, None, StepBasic_RoleAssociation)
StepBasic_RoleAssociation.ItemWithRole = new_instancemethod(_StepBasic.StepBasic_RoleAssociation_ItemWithRole, None, StepBasic_RoleAssociation)
StepBasic_RoleAssociation.SetItemWithRole = new_instancemethod(_StepBasic.StepBasic_RoleAssociation_SetItemWithRole, None, StepBasic_RoleAssociation)
StepBasic_RoleAssociation_swigregister = _StepBasic.StepBasic_RoleAssociation_swigregister
StepBasic_RoleAssociation_swigregister(StepBasic_RoleAssociation)

class Handle_StepBasic_RoleAssociation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_RoleAssociation_swiginit(self, _StepBasic.new_Handle_StepBasic_RoleAssociation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_RoleAssociation_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_RoleAssociation
Handle_StepBasic_RoleAssociation.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_RoleAssociation_Nullify, None, Handle_StepBasic_RoleAssociation)
Handle_StepBasic_RoleAssociation.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_RoleAssociation_IsNull, None, Handle_StepBasic_RoleAssociation)
Handle_StepBasic_RoleAssociation.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_RoleAssociation_GetObject, None, Handle_StepBasic_RoleAssociation)
Handle_StepBasic_RoleAssociation_swigregister = _StepBasic.Handle_StepBasic_RoleAssociation_swigregister
Handle_StepBasic_RoleAssociation_swigregister(Handle_StepBasic_RoleAssociation)

def Handle_StepBasic_RoleAssociation_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_RoleAssociation_DownCast(AnObject)
Handle_StepBasic_RoleAssociation_DownCast = _StepBasic.Handle_StepBasic_RoleAssociation_DownCast

class StepBasic_RoleSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_RoleSelect_swiginit(self, _StepBasic.new_StepBasic_RoleSelect(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a kind of RoleSelect select type 1 -> ActionAssignment from StepBasic 2 -> ActionRequestAssignment from StepBasic 3 -> ApprovalAssignment from StepBasic 4 -> ApprovalDateTime from StepBasic 5 -> CertificationAssignment from StepBasic 6 -> ContractAssignment from StepBasic 7 -> DocumentReference from StepBasic 8 -> EffectivityAssignment from StepBasic 9 -> GroupAssignment from StepBasic 10 -> NameAssignment from StepBasic 11 -> SecurityClassificationAssignment from StepBasic 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_RoleSelect_CaseNum(self, *args)


    def ActionAssignment(self, *args):
        """
        * Returns Value as ActionAssignment (or Null if another type)

        :rtype: Handle_StepBasic_ActionAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_ActionAssignment(self, *args)


    def ActionRequestAssignment(self, *args):
        """
        * Returns Value as ActionRequestAssignment (or Null if another type)

        :rtype: Handle_StepBasic_ActionRequestAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_ActionRequestAssignment(self, *args)


    def ApprovalAssignment(self, *args):
        """
        * Returns Value as ApprovalAssignment (or Null if another type)

        :rtype: Handle_StepBasic_ApprovalAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_ApprovalAssignment(self, *args)


    def ApprovalDateTime(self, *args):
        """
        * Returns Value as ApprovalDateTime (or Null if another type)

        :rtype: Handle_StepBasic_ApprovalDateTime

        """
        return _StepBasic.StepBasic_RoleSelect_ApprovalDateTime(self, *args)


    def CertificationAssignment(self, *args):
        """
        * Returns Value as CertificationAssignment (or Null if another type)

        :rtype: Handle_StepBasic_CertificationAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_CertificationAssignment(self, *args)


    def ContractAssignment(self, *args):
        """
        * Returns Value as ContractAssignment (or Null if another type)

        :rtype: Handle_StepBasic_ContractAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_ContractAssignment(self, *args)


    def DocumentReference(self, *args):
        """
        * Returns Value as DocumentReference (or Null if another type)

        :rtype: Handle_StepBasic_DocumentReference

        """
        return _StepBasic.StepBasic_RoleSelect_DocumentReference(self, *args)


    def EffectivityAssignment(self, *args):
        """
        * Returns Value as EffectivityAssignment (or Null if another type)

        :rtype: Handle_StepBasic_EffectivityAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_EffectivityAssignment(self, *args)


    def GroupAssignment(self, *args):
        """
        * Returns Value as GroupAssignment (or Null if another type)

        :rtype: Handle_StepBasic_GroupAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_GroupAssignment(self, *args)


    def NameAssignment(self, *args):
        """
        * Returns Value as NameAssignment (or Null if another type)

        :rtype: Handle_StepBasic_NameAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_NameAssignment(self, *args)


    def SecurityClassificationAssignment(self, *args):
        """
        * Returns Value as SecurityClassificationAssignment (or Null if another type)

        :rtype: Handle_StepBasic_SecurityClassificationAssignment

        """
        return _StepBasic.StepBasic_RoleSelect_SecurityClassificationAssignment(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_RoleSelect
StepBasic_RoleSelect.CaseNum = new_instancemethod(_StepBasic.StepBasic_RoleSelect_CaseNum, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.ActionAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_ActionAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.ActionRequestAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_ActionRequestAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.ApprovalAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_ApprovalAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.ApprovalDateTime = new_instancemethod(_StepBasic.StepBasic_RoleSelect_ApprovalDateTime, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.CertificationAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_CertificationAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.ContractAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_ContractAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.DocumentReference = new_instancemethod(_StepBasic.StepBasic_RoleSelect_DocumentReference, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.EffectivityAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_EffectivityAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.GroupAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_GroupAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.NameAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_NameAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect.SecurityClassificationAssignment = new_instancemethod(_StepBasic.StepBasic_RoleSelect_SecurityClassificationAssignment, None, StepBasic_RoleSelect)
StepBasic_RoleSelect_swigregister = _StepBasic.StepBasic_RoleSelect_swigregister
StepBasic_RoleSelect_swigregister(StepBasic_RoleSelect)

class StepBasic_SecurityClassification(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SecurityClassification

        :rtype: None

        """
        _StepBasic.StepBasic_SecurityClassification_swiginit(self, _StepBasic.new_StepBasic_SecurityClassification(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPurpose:
        :type aPurpose: Handle_TCollection_HAsciiString &
        :param aSecurityLevel:
        :type aSecurityLevel: Handle_StepBasic_SecurityClassificationLevel &
        :rtype: void

        """
        return _StepBasic.StepBasic_SecurityClassification_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_SecurityClassification_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_SecurityClassification_Name(self, *args)


    def SetPurpose(self, *args):
        """
        :param aPurpose:
        :type aPurpose: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_SecurityClassification_SetPurpose(self, *args)


    def Purpose(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_SecurityClassification_Purpose(self, *args)


    def SetSecurityLevel(self, *args):
        """
        :param aSecurityLevel:
        :type aSecurityLevel: Handle_StepBasic_SecurityClassificationLevel &
        :rtype: None

        """
        return _StepBasic.StepBasic_SecurityClassification_SetSecurityLevel(self, *args)


    def SecurityLevel(self, *args):
        """
        :rtype: Handle_StepBasic_SecurityClassificationLevel

        """
        return _StepBasic.StepBasic_SecurityClassification_SecurityLevel(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SecurityClassification(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SecurityClassification
StepBasic_SecurityClassification.Init = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_Init, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification.SetName = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_SetName, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification.Name = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_Name, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification.SetPurpose = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_SetPurpose, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification.Purpose = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_Purpose, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification.SetSecurityLevel = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_SetSecurityLevel, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification.SecurityLevel = new_instancemethod(_StepBasic.StepBasic_SecurityClassification_SecurityLevel, None, StepBasic_SecurityClassification)
StepBasic_SecurityClassification_swigregister = _StepBasic.StepBasic_SecurityClassification_swigregister
StepBasic_SecurityClassification_swigregister(StepBasic_SecurityClassification)

class Handle_StepBasic_SecurityClassification(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SecurityClassification_swiginit(self, _StepBasic.new_Handle_StepBasic_SecurityClassification(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SecurityClassification_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SecurityClassification
Handle_StepBasic_SecurityClassification.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassification_Nullify, None, Handle_StepBasic_SecurityClassification)
Handle_StepBasic_SecurityClassification.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassification_IsNull, None, Handle_StepBasic_SecurityClassification)
Handle_StepBasic_SecurityClassification.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassification_GetObject, None, Handle_StepBasic_SecurityClassification)
Handle_StepBasic_SecurityClassification_swigregister = _StepBasic.Handle_StepBasic_SecurityClassification_swigregister
Handle_StepBasic_SecurityClassification_swigregister(Handle_StepBasic_SecurityClassification)

def Handle_StepBasic_SecurityClassification_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SecurityClassification_DownCast(AnObject)
Handle_StepBasic_SecurityClassification_DownCast = _StepBasic.Handle_StepBasic_SecurityClassification_DownCast

class StepBasic_SecurityClassificationAssignment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        :param aAssignedSecurityClassification:
        :type aAssignedSecurityClassification: Handle_StepBasic_SecurityClassification &
        :rtype: void

        """
        return _StepBasic.StepBasic_SecurityClassificationAssignment_Init(self, *args)


    def SetAssignedSecurityClassification(self, *args):
        """
        :param aAssignedSecurityClassification:
        :type aAssignedSecurityClassification: Handle_StepBasic_SecurityClassification &
        :rtype: None

        """
        return _StepBasic.StepBasic_SecurityClassificationAssignment_SetAssignedSecurityClassification(self, *args)


    def AssignedSecurityClassification(self, *args):
        """
        :rtype: Handle_StepBasic_SecurityClassification

        """
        return _StepBasic.StepBasic_SecurityClassificationAssignment_AssignedSecurityClassification(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SecurityClassificationAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SecurityClassificationAssignment
StepBasic_SecurityClassificationAssignment.Init = new_instancemethod(_StepBasic.StepBasic_SecurityClassificationAssignment_Init, None, StepBasic_SecurityClassificationAssignment)
StepBasic_SecurityClassificationAssignment.SetAssignedSecurityClassification = new_instancemethod(_StepBasic.StepBasic_SecurityClassificationAssignment_SetAssignedSecurityClassification, None, StepBasic_SecurityClassificationAssignment)
StepBasic_SecurityClassificationAssignment.AssignedSecurityClassification = new_instancemethod(_StepBasic.StepBasic_SecurityClassificationAssignment_AssignedSecurityClassification, None, StepBasic_SecurityClassificationAssignment)
StepBasic_SecurityClassificationAssignment_swigregister = _StepBasic.StepBasic_SecurityClassificationAssignment_swigregister
StepBasic_SecurityClassificationAssignment_swigregister(StepBasic_SecurityClassificationAssignment)

class Handle_StepBasic_SecurityClassificationAssignment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_SecurityClassificationAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SecurityClassificationAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SecurityClassificationAssignment
Handle_StepBasic_SecurityClassificationAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassificationAssignment_Nullify, None, Handle_StepBasic_SecurityClassificationAssignment)
Handle_StepBasic_SecurityClassificationAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassificationAssignment_IsNull, None, Handle_StepBasic_SecurityClassificationAssignment)
Handle_StepBasic_SecurityClassificationAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassificationAssignment_GetObject, None, Handle_StepBasic_SecurityClassificationAssignment)
Handle_StepBasic_SecurityClassificationAssignment_swigregister = _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_swigregister
Handle_StepBasic_SecurityClassificationAssignment_swigregister(Handle_StepBasic_SecurityClassificationAssignment)

def Handle_StepBasic_SecurityClassificationAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_DownCast(AnObject)
Handle_StepBasic_SecurityClassificationAssignment_DownCast = _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_DownCast

class StepBasic_SecurityClassificationLevel(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SecurityClassificationLevel

        :rtype: None

        """
        _StepBasic.StepBasic_SecurityClassificationLevel_swiginit(self, _StepBasic.new_StepBasic_SecurityClassificationLevel(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_SecurityClassificationLevel_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_SecurityClassificationLevel_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_SecurityClassificationLevel_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SecurityClassificationLevel(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SecurityClassificationLevel
StepBasic_SecurityClassificationLevel.Init = new_instancemethod(_StepBasic.StepBasic_SecurityClassificationLevel_Init, None, StepBasic_SecurityClassificationLevel)
StepBasic_SecurityClassificationLevel.SetName = new_instancemethod(_StepBasic.StepBasic_SecurityClassificationLevel_SetName, None, StepBasic_SecurityClassificationLevel)
StepBasic_SecurityClassificationLevel.Name = new_instancemethod(_StepBasic.StepBasic_SecurityClassificationLevel_Name, None, StepBasic_SecurityClassificationLevel)
StepBasic_SecurityClassificationLevel_swigregister = _StepBasic.StepBasic_SecurityClassificationLevel_swigregister
StepBasic_SecurityClassificationLevel_swigregister(StepBasic_SecurityClassificationLevel)

class Handle_StepBasic_SecurityClassificationLevel(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SecurityClassificationLevel_swiginit(self, _StepBasic.new_Handle_StepBasic_SecurityClassificationLevel(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SecurityClassificationLevel_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SecurityClassificationLevel
Handle_StepBasic_SecurityClassificationLevel.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassificationLevel_Nullify, None, Handle_StepBasic_SecurityClassificationLevel)
Handle_StepBasic_SecurityClassificationLevel.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassificationLevel_IsNull, None, Handle_StepBasic_SecurityClassificationLevel)
Handle_StepBasic_SecurityClassificationLevel.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SecurityClassificationLevel_GetObject, None, Handle_StepBasic_SecurityClassificationLevel)
Handle_StepBasic_SecurityClassificationLevel_swigregister = _StepBasic.Handle_StepBasic_SecurityClassificationLevel_swigregister
Handle_StepBasic_SecurityClassificationLevel_swigregister(Handle_StepBasic_SecurityClassificationLevel)

def Handle_StepBasic_SecurityClassificationLevel_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SecurityClassificationLevel_DownCast(AnObject)
Handle_StepBasic_SecurityClassificationLevel_DownCast = _StepBasic.Handle_StepBasic_SecurityClassificationLevel_DownCast

class StepBasic_SizeMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_SizeMember_swiginit(self, _StepBasic.new_StepBasic_SizeMember(*args))

    def HasName(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_SizeMember_HasName(self, *args)


    def Name(self, *args):
        """
        :rtype: char *

        """
        return _StepBasic.StepBasic_SizeMember_Name(self, *args)


    def SetName(self, *args):
        """
        :param name:
        :type name: char *
        :rtype: bool

        """
        return _StepBasic.StepBasic_SizeMember_SetName(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SizeMember(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SizeMember
StepBasic_SizeMember.HasName = new_instancemethod(_StepBasic.StepBasic_SizeMember_HasName, None, StepBasic_SizeMember)
StepBasic_SizeMember.Name = new_instancemethod(_StepBasic.StepBasic_SizeMember_Name, None, StepBasic_SizeMember)
StepBasic_SizeMember.SetName = new_instancemethod(_StepBasic.StepBasic_SizeMember_SetName, None, StepBasic_SizeMember)
StepBasic_SizeMember_swigregister = _StepBasic.StepBasic_SizeMember_swigregister
StepBasic_SizeMember_swigregister(StepBasic_SizeMember)

class Handle_StepBasic_SizeMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SizeMember_swiginit(self, _StepBasic.new_Handle_StepBasic_SizeMember(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SizeMember_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SizeMember
Handle_StepBasic_SizeMember.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SizeMember_Nullify, None, Handle_StepBasic_SizeMember)
Handle_StepBasic_SizeMember.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SizeMember_IsNull, None, Handle_StepBasic_SizeMember)
Handle_StepBasic_SizeMember.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SizeMember_GetObject, None, Handle_StepBasic_SizeMember)
Handle_StepBasic_SizeMember_swigregister = _StepBasic.Handle_StepBasic_SizeMember_swigregister
Handle_StepBasic_SizeMember_swigregister(Handle_StepBasic_SizeMember)

def Handle_StepBasic_SizeMember_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SizeMember_DownCast(AnObject)
Handle_StepBasic_SizeMember_DownCast = _StepBasic.Handle_StepBasic_SizeMember_DownCast

class StepBasic_SizeSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SizeSelect SelectType

        :rtype: None

        """
        _StepBasic.StepBasic_SizeSelect_swiginit(self, _StepBasic.new_StepBasic_SizeSelect(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a TrimmingSelect Kind Entity that is : 1 -> SizeMember 0 else (i.e. Real)

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_SizeSelect_CaseNum(self, *args)


    def NewMember(self, *args):
        """
        * Returns a SizeMember (POSITIVE_LENGTH_MEASURE) as preferred

        :rtype: Handle_StepData_SelectMember

        """
        return _StepBasic.StepBasic_SizeSelect_NewMember(self, *args)


    def CaseMem(self, *args):
        """
        * Recognizes a SelectMember as Real, named as PARAMETER_VALUE  1 -> PositiveLengthMeasure i.e. Real  0 else (i.e. Entity)

        :param ent:
        :type ent: Handle_StepData_SelectMember &
        :rtype: int

        """
        return _StepBasic.StepBasic_SizeSelect_CaseMem(self, *args)


    def SetRealValue(self, *args):
        """
        :param aReal:
        :type aReal: float
        :rtype: None

        """
        return _StepBasic.StepBasic_SizeSelect_SetRealValue(self, *args)


    def RealValue(self, *args):
        """
        * returns Value as a Real (Null if another type)

        :rtype: float

        """
        return _StepBasic.StepBasic_SizeSelect_RealValue(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_SizeSelect
StepBasic_SizeSelect.CaseNum = new_instancemethod(_StepBasic.StepBasic_SizeSelect_CaseNum, None, StepBasic_SizeSelect)
StepBasic_SizeSelect.NewMember = new_instancemethod(_StepBasic.StepBasic_SizeSelect_NewMember, None, StepBasic_SizeSelect)
StepBasic_SizeSelect.CaseMem = new_instancemethod(_StepBasic.StepBasic_SizeSelect_CaseMem, None, StepBasic_SizeSelect)
StepBasic_SizeSelect.SetRealValue = new_instancemethod(_StepBasic.StepBasic_SizeSelect_SetRealValue, None, StepBasic_SizeSelect)
StepBasic_SizeSelect.RealValue = new_instancemethod(_StepBasic.StepBasic_SizeSelect_RealValue, None, StepBasic_SizeSelect)
StepBasic_SizeSelect_swigregister = _StepBasic.StepBasic_SizeSelect_swigregister
StepBasic_SizeSelect_swigregister(StepBasic_SizeSelect)

class StepBasic_SourceItem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_SourceItem_swiginit(self, _StepBasic.new_StepBasic_SourceItem(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a kind of SourceItem select type 1 -> HAsciiString from TCollection 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_SourceItem_CaseNum(self, *args)


    def NewMember(self, *args):
        """
        :rtype: Handle_StepData_SelectMember

        """
        return _StepBasic.StepBasic_SourceItem_NewMember(self, *args)


    def Identifier(self, *args):
        """
        * Returns Value as Identifier (or Null if another type)

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_SourceItem_Identifier(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_SourceItem
StepBasic_SourceItem.CaseNum = new_instancemethod(_StepBasic.StepBasic_SourceItem_CaseNum, None, StepBasic_SourceItem)
StepBasic_SourceItem.NewMember = new_instancemethod(_StepBasic.StepBasic_SourceItem_NewMember, None, StepBasic_SourceItem)
StepBasic_SourceItem.Identifier = new_instancemethod(_StepBasic.StepBasic_SourceItem_Identifier, None, StepBasic_SourceItem)
StepBasic_SourceItem_swigregister = _StepBasic.StepBasic_SourceItem_swigregister
StepBasic_SourceItem_swigregister(StepBasic_SourceItem)

class StepBasic_Unit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty object

        :rtype: None

        """
        _StepBasic.StepBasic_Unit_swiginit(self, _StepBasic.new_StepBasic_Unit(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a type of Unit Entity 1 -> NamedUnit 2 -> DerivedUnit

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepBasic.StepBasic_Unit_CaseNum(self, *args)


    def NamedUnit(self, *args):
        """
        * returns Value as a NamedUnit (Null if another type)

        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepBasic.StepBasic_Unit_NamedUnit(self, *args)


    def DerivedUnit(self, *args):
        """
        * returns Value as a DerivedUnit (Null if another type)

        :rtype: Handle_StepBasic_DerivedUnit

        """
        return _StepBasic.StepBasic_Unit_DerivedUnit(self, *args)

    __swig_destroy__ = _StepBasic.delete_StepBasic_Unit
StepBasic_Unit.CaseNum = new_instancemethod(_StepBasic.StepBasic_Unit_CaseNum, None, StepBasic_Unit)
StepBasic_Unit.NamedUnit = new_instancemethod(_StepBasic.StepBasic_Unit_NamedUnit, None, StepBasic_Unit)
StepBasic_Unit.DerivedUnit = new_instancemethod(_StepBasic.StepBasic_Unit_DerivedUnit, None, StepBasic_Unit)
StepBasic_Unit_swigregister = _StepBasic.StepBasic_Unit_swigregister
StepBasic_Unit_swigregister(StepBasic_Unit)

class StepBasic_VersionedActionRequest(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_VersionedActionRequest_swiginit(self, _StepBasic.new_StepBasic_VersionedActionRequest(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aVersion:
        :type aVersion: Handle_TCollection_HAsciiString &
        :param aPurpose:
        :type aPurpose: Handle_TCollection_HAsciiString &
        :param hasDescription:
        :type hasDescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Init(self, *args)


    def Id(self, *args):
        """
        * Returns field Id

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Id(self, *args)


    def SetId(self, *args):
        """
        * Set field Id

        :param Id:
        :type Id: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetId(self, *args)


    def Version(self, *args):
        """
        * Returns field Version

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Version(self, *args)


    def SetVersion(self, *args):
        """
        * Set field Version

        :param Version:
        :type Version: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetVersion(self, *args)


    def Purpose(self, *args):
        """
        * Returns field Purpose

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        * Set field Purpose

        :param Purpose:
        :type Purpose: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetPurpose(self, *args)


    def Description(self, *args):
        """
        * Returns field Description

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Description(self, *args)


    def SetDescription(self, *args):
        """
        * Set field Description

        :param Description:
        :type Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        * Returns True if optional field Description is defined

        :rtype: bool

        """
        return _StepBasic.StepBasic_VersionedActionRequest_HasDescription(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_VersionedActionRequest(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_VersionedActionRequest
StepBasic_VersionedActionRequest.Init = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_Init, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.Id = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_Id, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.SetId = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_SetId, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.Version = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_Version, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.SetVersion = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_SetVersion, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.Purpose = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_Purpose, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.SetPurpose = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_SetPurpose, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.Description = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_Description, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.SetDescription = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_SetDescription, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest.HasDescription = new_instancemethod(_StepBasic.StepBasic_VersionedActionRequest_HasDescription, None, StepBasic_VersionedActionRequest)
StepBasic_VersionedActionRequest_swigregister = _StepBasic.StepBasic_VersionedActionRequest_swigregister
StepBasic_VersionedActionRequest_swigregister(StepBasic_VersionedActionRequest)

class Handle_StepBasic_VersionedActionRequest(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_VersionedActionRequest_swiginit(self, _StepBasic.new_Handle_StepBasic_VersionedActionRequest(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_VersionedActionRequest_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_VersionedActionRequest
Handle_StepBasic_VersionedActionRequest.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_VersionedActionRequest_Nullify, None, Handle_StepBasic_VersionedActionRequest)
Handle_StepBasic_VersionedActionRequest.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_VersionedActionRequest_IsNull, None, Handle_StepBasic_VersionedActionRequest)
Handle_StepBasic_VersionedActionRequest.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_VersionedActionRequest_GetObject, None, Handle_StepBasic_VersionedActionRequest)
Handle_StepBasic_VersionedActionRequest_swigregister = _StepBasic.Handle_StepBasic_VersionedActionRequest_swigregister
Handle_StepBasic_VersionedActionRequest_swigregister(Handle_StepBasic_VersionedActionRequest)

def Handle_StepBasic_VersionedActionRequest_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_VersionedActionRequest_DownCast(AnObject)
Handle_StepBasic_VersionedActionRequest_DownCast = _StepBasic.Handle_StepBasic_VersionedActionRequest_DownCast

class StepBasic_AreaUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_AreaUnit_swiginit(self, _StepBasic.new_StepBasic_AreaUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_AreaUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_AreaUnit
StepBasic_AreaUnit_swigregister = _StepBasic.StepBasic_AreaUnit_swigregister
StepBasic_AreaUnit_swigregister(StepBasic_AreaUnit)

class Handle_StepBasic_AreaUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_AreaUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_AreaUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_AreaUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_AreaUnit
Handle_StepBasic_AreaUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_AreaUnit_Nullify, None, Handle_StepBasic_AreaUnit)
Handle_StepBasic_AreaUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_AreaUnit_IsNull, None, Handle_StepBasic_AreaUnit)
Handle_StepBasic_AreaUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_AreaUnit_GetObject, None, Handle_StepBasic_AreaUnit)
Handle_StepBasic_AreaUnit_swigregister = _StepBasic.Handle_StepBasic_AreaUnit_swigregister
Handle_StepBasic_AreaUnit_swigregister(Handle_StepBasic_AreaUnit)

def Handle_StepBasic_AreaUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_AreaUnit_DownCast(AnObject)
Handle_StepBasic_AreaUnit_DownCast = _StepBasic.Handle_StepBasic_AreaUnit_DownCast

class StepBasic_CalendarDate(StepBasic_Date):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CalendarDate

        :rtype: None

        """
        _StepBasic.StepBasic_CalendarDate_swiginit(self, _StepBasic.new_StepBasic_CalendarDate(*args))

    def Init(self, *args):
        """
        :param aYearComponent:
        :type aYearComponent: int
        :rtype: void

        :param aYearComponent:
        :type aYearComponent: int
        :param aDayComponent:
        :type aDayComponent: int
        :param aMonthComponent:
        :type aMonthComponent: int
        :rtype: void

        """
        return _StepBasic.StepBasic_CalendarDate_Init(self, *args)


    def SetDayComponent(self, *args):
        """
        :param aDayComponent:
        :type aDayComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_CalendarDate_SetDayComponent(self, *args)


    def DayComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_CalendarDate_DayComponent(self, *args)


    def SetMonthComponent(self, *args):
        """
        :param aMonthComponent:
        :type aMonthComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_CalendarDate_SetMonthComponent(self, *args)


    def MonthComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_CalendarDate_MonthComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_CalendarDate(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_CalendarDate
StepBasic_CalendarDate.Init = new_instancemethod(_StepBasic.StepBasic_CalendarDate_Init, None, StepBasic_CalendarDate)
StepBasic_CalendarDate.SetDayComponent = new_instancemethod(_StepBasic.StepBasic_CalendarDate_SetDayComponent, None, StepBasic_CalendarDate)
StepBasic_CalendarDate.DayComponent = new_instancemethod(_StepBasic.StepBasic_CalendarDate_DayComponent, None, StepBasic_CalendarDate)
StepBasic_CalendarDate.SetMonthComponent = new_instancemethod(_StepBasic.StepBasic_CalendarDate_SetMonthComponent, None, StepBasic_CalendarDate)
StepBasic_CalendarDate.MonthComponent = new_instancemethod(_StepBasic.StepBasic_CalendarDate_MonthComponent, None, StepBasic_CalendarDate)
StepBasic_CalendarDate_swigregister = _StepBasic.StepBasic_CalendarDate_swigregister
StepBasic_CalendarDate_swigregister(StepBasic_CalendarDate)

class Handle_StepBasic_CalendarDate(Handle_StepBasic_Date):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_CalendarDate_swiginit(self, _StepBasic.new_Handle_StepBasic_CalendarDate(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_CalendarDate_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_CalendarDate
Handle_StepBasic_CalendarDate.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_CalendarDate_Nullify, None, Handle_StepBasic_CalendarDate)
Handle_StepBasic_CalendarDate.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_CalendarDate_IsNull, None, Handle_StepBasic_CalendarDate)
Handle_StepBasic_CalendarDate.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_CalendarDate_GetObject, None, Handle_StepBasic_CalendarDate)
Handle_StepBasic_CalendarDate_swigregister = _StepBasic.Handle_StepBasic_CalendarDate_swigregister
Handle_StepBasic_CalendarDate_swigregister(Handle_StepBasic_CalendarDate)

def Handle_StepBasic_CalendarDate_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_CalendarDate_DownCast(AnObject)
Handle_StepBasic_CalendarDate_DownCast = _StepBasic.Handle_StepBasic_CalendarDate_DownCast

class StepBasic_ConversionBasedUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_Name(self, *args)


    def SetConversionFactor(self, *args):
        """
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_SetConversionFactor(self, *args)


    def ConversionFactor(self, *args):
        """
        :rtype: Handle_StepBasic_MeasureWithUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_ConversionFactor(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnit
StepBasic_ConversionBasedUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnit_Init, None, StepBasic_ConversionBasedUnit)
StepBasic_ConversionBasedUnit.SetName = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnit_SetName, None, StepBasic_ConversionBasedUnit)
StepBasic_ConversionBasedUnit.Name = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnit_Name, None, StepBasic_ConversionBasedUnit)
StepBasic_ConversionBasedUnit.SetConversionFactor = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnit_SetConversionFactor, None, StepBasic_ConversionBasedUnit)
StepBasic_ConversionBasedUnit.ConversionFactor = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnit_ConversionFactor, None, StepBasic_ConversionBasedUnit)
StepBasic_ConversionBasedUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnit_swigregister
StepBasic_ConversionBasedUnit_swigregister(StepBasic_ConversionBasedUnit)

class Handle_StepBasic_ConversionBasedUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnit
Handle_StepBasic_ConversionBasedUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnit)
Handle_StepBasic_ConversionBasedUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnit)
Handle_StepBasic_ConversionBasedUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnit)
Handle_StepBasic_ConversionBasedUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnit_swigregister
Handle_StepBasic_ConversionBasedUnit_swigregister(Handle_StepBasic_ConversionBasedUnit)

def Handle_StepBasic_ConversionBasedUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnit_DownCast

class StepBasic_DigitalDocument(StepBasic_Document):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DigitalDocument_swiginit(self, _StepBasic.new_StepBasic_DigitalDocument(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DigitalDocument(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DigitalDocument
StepBasic_DigitalDocument_swigregister = _StepBasic.StepBasic_DigitalDocument_swigregister
StepBasic_DigitalDocument_swigregister(StepBasic_DigitalDocument)

class Handle_StepBasic_DigitalDocument(Handle_StepBasic_Document):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DigitalDocument_swiginit(self, _StepBasic.new_Handle_StepBasic_DigitalDocument(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DigitalDocument_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DigitalDocument
Handle_StepBasic_DigitalDocument.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DigitalDocument_Nullify, None, Handle_StepBasic_DigitalDocument)
Handle_StepBasic_DigitalDocument.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DigitalDocument_IsNull, None, Handle_StepBasic_DigitalDocument)
Handle_StepBasic_DigitalDocument.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DigitalDocument_GetObject, None, Handle_StepBasic_DigitalDocument)
Handle_StepBasic_DigitalDocument_swigregister = _StepBasic.Handle_StepBasic_DigitalDocument_swigregister
Handle_StepBasic_DigitalDocument_swigregister(Handle_StepBasic_DigitalDocument)

def Handle_StepBasic_DigitalDocument_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DigitalDocument_DownCast(AnObject)
Handle_StepBasic_DigitalDocument_DownCast = _StepBasic.Handle_StepBasic_DigitalDocument_DownCast

class StepBasic_DocumentFile(StepBasic_Document):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_DocumentFile_swiginit(self, _StepBasic.new_StepBasic_DocumentFile(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aDocument_Id:
        :type aDocument_Id: Handle_TCollection_HAsciiString &
        :param aDocument_Name:
        :type aDocument_Name: Handle_TCollection_HAsciiString &
        :param hasDocument_Description:
        :type hasDocument_Description: bool
        :param aDocument_Description:
        :type aDocument_Description: Handle_TCollection_HAsciiString &
        :param aDocument_Kind:
        :type aDocument_Kind: Handle_StepBasic_DocumentType &
        :param aCharacterizedObject_Name:
        :type aCharacterizedObject_Name: Handle_TCollection_HAsciiString &
        :param hasCharacterizedObject_Description:
        :type hasCharacterizedObject_Description: bool
        :param aCharacterizedObject_Description:
        :type aCharacterizedObject_Description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentFile_Init(self, *args)


    def CharacterizedObject(self, *args):
        """
        * Returns data for supertype CharacterizedObject

        :rtype: Handle_StepBasic_CharacterizedObject

        """
        return _StepBasic.StepBasic_DocumentFile_CharacterizedObject(self, *args)


    def SetCharacterizedObject(self, *args):
        """
        * Set data for supertype CharacterizedObject

        :param CharacterizedObject:
        :type CharacterizedObject: Handle_StepBasic_CharacterizedObject &
        :rtype: None

        """
        return _StepBasic.StepBasic_DocumentFile_SetCharacterizedObject(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentFile(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentFile
StepBasic_DocumentFile.Init = new_instancemethod(_StepBasic.StepBasic_DocumentFile_Init, None, StepBasic_DocumentFile)
StepBasic_DocumentFile.CharacterizedObject = new_instancemethod(_StepBasic.StepBasic_DocumentFile_CharacterizedObject, None, StepBasic_DocumentFile)
StepBasic_DocumentFile.SetCharacterizedObject = new_instancemethod(_StepBasic.StepBasic_DocumentFile_SetCharacterizedObject, None, StepBasic_DocumentFile)
StepBasic_DocumentFile_swigregister = _StepBasic.StepBasic_DocumentFile_swigregister
StepBasic_DocumentFile_swigregister(StepBasic_DocumentFile)

class Handle_StepBasic_DocumentFile(Handle_StepBasic_Document):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentFile_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentFile(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentFile_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentFile
Handle_StepBasic_DocumentFile.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentFile_Nullify, None, Handle_StepBasic_DocumentFile)
Handle_StepBasic_DocumentFile.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentFile_IsNull, None, Handle_StepBasic_DocumentFile)
Handle_StepBasic_DocumentFile.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentFile_GetObject, None, Handle_StepBasic_DocumentFile)
Handle_StepBasic_DocumentFile_swigregister = _StepBasic.Handle_StepBasic_DocumentFile_swigregister
Handle_StepBasic_DocumentFile_swigregister(Handle_StepBasic_DocumentFile)

def Handle_StepBasic_DocumentFile_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentFile_DownCast(AnObject)
Handle_StepBasic_DocumentFile_DownCast = _StepBasic.Handle_StepBasic_DocumentFile_DownCast

class StepBasic_DocumentProductEquivalence(StepBasic_DocumentProductAssociation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_DocumentProductEquivalence_swiginit(self, _StepBasic.new_StepBasic_DocumentProductEquivalence(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DocumentProductEquivalence(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentProductEquivalence
StepBasic_DocumentProductEquivalence_swigregister = _StepBasic.StepBasic_DocumentProductEquivalence_swigregister
StepBasic_DocumentProductEquivalence_swigregister(StepBasic_DocumentProductEquivalence)

class Handle_StepBasic_DocumentProductEquivalence(Handle_StepBasic_DocumentProductAssociation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DocumentProductEquivalence_swiginit(self, _StepBasic.new_Handle_StepBasic_DocumentProductEquivalence(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DocumentProductEquivalence_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DocumentProductEquivalence
Handle_StepBasic_DocumentProductEquivalence.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentProductEquivalence_Nullify, None, Handle_StepBasic_DocumentProductEquivalence)
Handle_StepBasic_DocumentProductEquivalence.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentProductEquivalence_IsNull, None, Handle_StepBasic_DocumentProductEquivalence)
Handle_StepBasic_DocumentProductEquivalence.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DocumentProductEquivalence_GetObject, None, Handle_StepBasic_DocumentProductEquivalence)
Handle_StepBasic_DocumentProductEquivalence_swigregister = _StepBasic.Handle_StepBasic_DocumentProductEquivalence_swigregister
Handle_StepBasic_DocumentProductEquivalence_swigregister(Handle_StepBasic_DocumentProductEquivalence)

def Handle_StepBasic_DocumentProductEquivalence_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DocumentProductEquivalence_DownCast(AnObject)
Handle_StepBasic_DocumentProductEquivalence_DownCast = _StepBasic.Handle_StepBasic_DocumentProductEquivalence_DownCast

class StepBasic_ExternalIdentificationAssignment(StepBasic_IdentificationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ExternalIdentificationAssignment_swiginit(self, _StepBasic.new_StepBasic_ExternalIdentificationAssignment(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aIdentificationAssignment_AssignedId:
        :type aIdentificationAssignment_AssignedId: Handle_TCollection_HAsciiString &
        :param aIdentificationAssignment_Role:
        :type aIdentificationAssignment_Role: Handle_StepBasic_IdentificationRole &
        :param aSource:
        :type aSource: Handle_StepBasic_ExternalSource &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternalIdentificationAssignment_Init(self, *args)


    def Source(self, *args):
        """
        * Returns field Source

        :rtype: Handle_StepBasic_ExternalSource

        """
        return _StepBasic.StepBasic_ExternalIdentificationAssignment_Source(self, *args)


    def SetSource(self, *args):
        """
        * Set field Source

        :param Source:
        :type Source: Handle_StepBasic_ExternalSource &
        :rtype: None

        """
        return _StepBasic.StepBasic_ExternalIdentificationAssignment_SetSource(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ExternalIdentificationAssignment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ExternalIdentificationAssignment
StepBasic_ExternalIdentificationAssignment.Init = new_instancemethod(_StepBasic.StepBasic_ExternalIdentificationAssignment_Init, None, StepBasic_ExternalIdentificationAssignment)
StepBasic_ExternalIdentificationAssignment.Source = new_instancemethod(_StepBasic.StepBasic_ExternalIdentificationAssignment_Source, None, StepBasic_ExternalIdentificationAssignment)
StepBasic_ExternalIdentificationAssignment.SetSource = new_instancemethod(_StepBasic.StepBasic_ExternalIdentificationAssignment_SetSource, None, StepBasic_ExternalIdentificationAssignment)
StepBasic_ExternalIdentificationAssignment_swigregister = _StepBasic.StepBasic_ExternalIdentificationAssignment_swigregister
StepBasic_ExternalIdentificationAssignment_swigregister(StepBasic_ExternalIdentificationAssignment)

class Handle_StepBasic_ExternalIdentificationAssignment(Handle_StepBasic_IdentificationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_swiginit(self, _StepBasic.new_Handle_StepBasic_ExternalIdentificationAssignment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ExternalIdentificationAssignment
Handle_StepBasic_ExternalIdentificationAssignment.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_Nullify, None, Handle_StepBasic_ExternalIdentificationAssignment)
Handle_StepBasic_ExternalIdentificationAssignment.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_IsNull, None, Handle_StepBasic_ExternalIdentificationAssignment)
Handle_StepBasic_ExternalIdentificationAssignment.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_GetObject, None, Handle_StepBasic_ExternalIdentificationAssignment)
Handle_StepBasic_ExternalIdentificationAssignment_swigregister = _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_swigregister
Handle_StepBasic_ExternalIdentificationAssignment_swigregister(Handle_StepBasic_ExternalIdentificationAssignment)

def Handle_StepBasic_ExternalIdentificationAssignment_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_DownCast(AnObject)
Handle_StepBasic_ExternalIdentificationAssignment_DownCast = _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_DownCast

class StepBasic_LengthMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a LengthMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_LengthMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_LengthMeasureWithUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_LengthMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_LengthMeasureWithUnit
StepBasic_LengthMeasureWithUnit_swigregister = _StepBasic.StepBasic_LengthMeasureWithUnit_swigregister
StepBasic_LengthMeasureWithUnit_swigregister(StepBasic_LengthMeasureWithUnit)

class Handle_StepBasic_LengthMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_LengthMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_LengthMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_LengthMeasureWithUnit
Handle_StepBasic_LengthMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_LengthMeasureWithUnit_Nullify, None, Handle_StepBasic_LengthMeasureWithUnit)
Handle_StepBasic_LengthMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_LengthMeasureWithUnit_IsNull, None, Handle_StepBasic_LengthMeasureWithUnit)
Handle_StepBasic_LengthMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_LengthMeasureWithUnit_GetObject, None, Handle_StepBasic_LengthMeasureWithUnit)
Handle_StepBasic_LengthMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_swigregister
Handle_StepBasic_LengthMeasureWithUnit_swigregister(Handle_StepBasic_LengthMeasureWithUnit)

def Handle_StepBasic_LengthMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_LengthMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_DownCast

class StepBasic_LengthUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a LengthUnit

        :rtype: None

        """
        _StepBasic.StepBasic_LengthUnit_swiginit(self, _StepBasic.new_StepBasic_LengthUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_LengthUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_LengthUnit
StepBasic_LengthUnit_swigregister = _StepBasic.StepBasic_LengthUnit_swigregister
StepBasic_LengthUnit_swigregister(StepBasic_LengthUnit)

class Handle_StepBasic_LengthUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_LengthUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_LengthUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_LengthUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_LengthUnit
Handle_StepBasic_LengthUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_LengthUnit_Nullify, None, Handle_StepBasic_LengthUnit)
Handle_StepBasic_LengthUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_LengthUnit_IsNull, None, Handle_StepBasic_LengthUnit)
Handle_StepBasic_LengthUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_LengthUnit_GetObject, None, Handle_StepBasic_LengthUnit)
Handle_StepBasic_LengthUnit_swigregister = _StepBasic.Handle_StepBasic_LengthUnit_swigregister
Handle_StepBasic_LengthUnit_swigregister(Handle_StepBasic_LengthUnit)

def Handle_StepBasic_LengthUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_LengthUnit_DownCast(AnObject)
Handle_StepBasic_LengthUnit_DownCast = _StepBasic.Handle_StepBasic_LengthUnit_DownCast

class StepBasic_MassMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a MassMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_MassMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_MassMeasureWithUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_MassMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_MassMeasureWithUnit
StepBasic_MassMeasureWithUnit_swigregister = _StepBasic.StepBasic_MassMeasureWithUnit_swigregister
StepBasic_MassMeasureWithUnit_swigregister(StepBasic_MassMeasureWithUnit)

class Handle_StepBasic_MassMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_MassMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_MassMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_MassMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_MassMeasureWithUnit
Handle_StepBasic_MassMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_MassMeasureWithUnit_Nullify, None, Handle_StepBasic_MassMeasureWithUnit)
Handle_StepBasic_MassMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_MassMeasureWithUnit_IsNull, None, Handle_StepBasic_MassMeasureWithUnit)
Handle_StepBasic_MassMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_MassMeasureWithUnit_GetObject, None, Handle_StepBasic_MassMeasureWithUnit)
Handle_StepBasic_MassMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_MassMeasureWithUnit_swigregister
Handle_StepBasic_MassMeasureWithUnit_swigregister(Handle_StepBasic_MassMeasureWithUnit)

def Handle_StepBasic_MassMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_MassMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_MassMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_MassMeasureWithUnit_DownCast

class StepBasic_MassUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_MassUnit_swiginit(self, _StepBasic.new_StepBasic_MassUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_MassUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_MassUnit
StepBasic_MassUnit_swigregister = _StepBasic.StepBasic_MassUnit_swigregister
StepBasic_MassUnit_swigregister(StepBasic_MassUnit)

class Handle_StepBasic_MassUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_MassUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_MassUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_MassUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_MassUnit
Handle_StepBasic_MassUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_MassUnit_Nullify, None, Handle_StepBasic_MassUnit)
Handle_StepBasic_MassUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_MassUnit_IsNull, None, Handle_StepBasic_MassUnit)
Handle_StepBasic_MassUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_MassUnit_GetObject, None, Handle_StepBasic_MassUnit)
Handle_StepBasic_MassUnit_swigregister = _StepBasic.Handle_StepBasic_MassUnit_swigregister
Handle_StepBasic_MassUnit_swigregister(Handle_StepBasic_MassUnit)

def Handle_StepBasic_MassUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_MassUnit_DownCast(AnObject)
Handle_StepBasic_MassUnit_DownCast = _StepBasic.Handle_StepBasic_MassUnit_DownCast

class StepBasic_OrdinalDate(StepBasic_Date):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrdinalDate

        :rtype: None

        """
        _StepBasic.StepBasic_OrdinalDate_swiginit(self, _StepBasic.new_StepBasic_OrdinalDate(*args))

    def Init(self, *args):
        """
        :param aYearComponent:
        :type aYearComponent: int
        :rtype: void

        :param aYearComponent:
        :type aYearComponent: int
        :param aDayComponent:
        :type aDayComponent: int
        :rtype: void

        """
        return _StepBasic.StepBasic_OrdinalDate_Init(self, *args)


    def SetDayComponent(self, *args):
        """
        :param aDayComponent:
        :type aDayComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_OrdinalDate_SetDayComponent(self, *args)


    def DayComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_OrdinalDate_DayComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_OrdinalDate(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrdinalDate
StepBasic_OrdinalDate.Init = new_instancemethod(_StepBasic.StepBasic_OrdinalDate_Init, None, StepBasic_OrdinalDate)
StepBasic_OrdinalDate.SetDayComponent = new_instancemethod(_StepBasic.StepBasic_OrdinalDate_SetDayComponent, None, StepBasic_OrdinalDate)
StepBasic_OrdinalDate.DayComponent = new_instancemethod(_StepBasic.StepBasic_OrdinalDate_DayComponent, None, StepBasic_OrdinalDate)
StepBasic_OrdinalDate_swigregister = _StepBasic.StepBasic_OrdinalDate_swigregister
StepBasic_OrdinalDate_swigregister(StepBasic_OrdinalDate)

class Handle_StepBasic_OrdinalDate(Handle_StepBasic_Date):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_OrdinalDate_swiginit(self, _StepBasic.new_Handle_StepBasic_OrdinalDate(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_OrdinalDate_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_OrdinalDate
Handle_StepBasic_OrdinalDate.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_OrdinalDate_Nullify, None, Handle_StepBasic_OrdinalDate)
Handle_StepBasic_OrdinalDate.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_OrdinalDate_IsNull, None, Handle_StepBasic_OrdinalDate)
Handle_StepBasic_OrdinalDate.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_OrdinalDate_GetObject, None, Handle_StepBasic_OrdinalDate)
Handle_StepBasic_OrdinalDate_swigregister = _StepBasic.Handle_StepBasic_OrdinalDate_swigregister
Handle_StepBasic_OrdinalDate_swigregister(Handle_StepBasic_OrdinalDate)

def Handle_StepBasic_OrdinalDate_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_OrdinalDate_DownCast(AnObject)
Handle_StepBasic_OrdinalDate_DownCast = _StepBasic.Handle_StepBasic_OrdinalDate_DownCast

class StepBasic_OrganizationalAddress(StepBasic_Address):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrganizationalAddress

        :rtype: None

        """
        _StepBasic.StepBasic_OrganizationalAddress_swiginit(self, _StepBasic.new_StepBasic_OrganizationalAddress(*args))

    def Init(self, *args):
        """
        :param hasAinternalLocation:
        :type hasAinternalLocation: bool
        :param aInternalLocation:
        :type aInternalLocation: Handle_TCollection_HAsciiString &
        :param hasAstreetNumber:
        :type hasAstreetNumber: bool
        :param aStreetNumber:
        :type aStreetNumber: Handle_TCollection_HAsciiString &
        :param hasAstreet:
        :type hasAstreet: bool
        :param aStreet:
        :type aStreet: Handle_TCollection_HAsciiString &
        :param hasApostalBox:
        :type hasApostalBox: bool
        :param aPostalBox:
        :type aPostalBox: Handle_TCollection_HAsciiString &
        :param hasAtown:
        :type hasAtown: bool
        :param aTown:
        :type aTown: Handle_TCollection_HAsciiString &
        :param hasAregion:
        :type hasAregion: bool
        :param aRegion:
        :type aRegion: Handle_TCollection_HAsciiString &
        :param hasApostalCode:
        :type hasApostalCode: bool
        :param aPostalCode:
        :type aPostalCode: Handle_TCollection_HAsciiString &
        :param hasAcountry:
        :type hasAcountry: bool
        :param aCountry:
        :type aCountry: Handle_TCollection_HAsciiString &
        :param hasAfacsimileNumber:
        :type hasAfacsimileNumber: bool
        :param aFacsimileNumber:
        :type aFacsimileNumber: Handle_TCollection_HAsciiString &
        :param hasAtelephoneNumber:
        :type hasAtelephoneNumber: bool
        :param aTelephoneNumber:
        :type aTelephoneNumber: Handle_TCollection_HAsciiString &
        :param hasAelectronicMailAddress:
        :type hasAelectronicMailAddress: bool
        :param aElectronicMailAddress:
        :type aElectronicMailAddress: Handle_TCollection_HAsciiString &
        :param hasAtelexNumber:
        :type hasAtelexNumber: bool
        :param aTelexNumber:
        :type aTelexNumber: Handle_TCollection_HAsciiString &
        :rtype: void

        :param hasAinternalLocation:
        :type hasAinternalLocation: bool
        :param aInternalLocation:
        :type aInternalLocation: Handle_TCollection_HAsciiString &
        :param hasAstreetNumber:
        :type hasAstreetNumber: bool
        :param aStreetNumber:
        :type aStreetNumber: Handle_TCollection_HAsciiString &
        :param hasAstreet:
        :type hasAstreet: bool
        :param aStreet:
        :type aStreet: Handle_TCollection_HAsciiString &
        :param hasApostalBox:
        :type hasApostalBox: bool
        :param aPostalBox:
        :type aPostalBox: Handle_TCollection_HAsciiString &
        :param hasAtown:
        :type hasAtown: bool
        :param aTown:
        :type aTown: Handle_TCollection_HAsciiString &
        :param hasAregion:
        :type hasAregion: bool
        :param aRegion:
        :type aRegion: Handle_TCollection_HAsciiString &
        :param hasApostalCode:
        :type hasApostalCode: bool
        :param aPostalCode:
        :type aPostalCode: Handle_TCollection_HAsciiString &
        :param hasAcountry:
        :type hasAcountry: bool
        :param aCountry:
        :type aCountry: Handle_TCollection_HAsciiString &
        :param hasAfacsimileNumber:
        :type hasAfacsimileNumber: bool
        :param aFacsimileNumber:
        :type aFacsimileNumber: Handle_TCollection_HAsciiString &
        :param hasAtelephoneNumber:
        :type hasAtelephoneNumber: bool
        :param aTelephoneNumber:
        :type aTelephoneNumber: Handle_TCollection_HAsciiString &
        :param hasAelectronicMailAddress:
        :type hasAelectronicMailAddress: bool
        :param aElectronicMailAddress:
        :type aElectronicMailAddress: Handle_TCollection_HAsciiString &
        :param hasAtelexNumber:
        :type hasAtelexNumber: bool
        :param aTelexNumber:
        :type aTelexNumber: Handle_TCollection_HAsciiString &
        :param aOrganizations:
        :type aOrganizations: Handle_StepBasic_HArray1OfOrganization &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_OrganizationalAddress_Init(self, *args)


    def SetOrganizations(self, *args):
        """
        :param aOrganizations:
        :type aOrganizations: Handle_StepBasic_HArray1OfOrganization &
        :rtype: None

        """
        return _StepBasic.StepBasic_OrganizationalAddress_SetOrganizations(self, *args)


    def Organizations(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfOrganization

        """
        return _StepBasic.StepBasic_OrganizationalAddress_Organizations(self, *args)


    def OrganizationsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_Organization

        """
        return _StepBasic.StepBasic_OrganizationalAddress_OrganizationsValue(self, *args)


    def NbOrganizations(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_OrganizationalAddress_NbOrganizations(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_OrganizationalAddress_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_OrganizationalAddress_Description(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_OrganizationalAddress(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrganizationalAddress
StepBasic_OrganizationalAddress.Init = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_Init, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress.SetOrganizations = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_SetOrganizations, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress.Organizations = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_Organizations, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress.OrganizationsValue = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_OrganizationsValue, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress.NbOrganizations = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_NbOrganizations, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress.SetDescription = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_SetDescription, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress.Description = new_instancemethod(_StepBasic.StepBasic_OrganizationalAddress_Description, None, StepBasic_OrganizationalAddress)
StepBasic_OrganizationalAddress_swigregister = _StepBasic.StepBasic_OrganizationalAddress_swigregister
StepBasic_OrganizationalAddress_swigregister(StepBasic_OrganizationalAddress)

class Handle_StepBasic_OrganizationalAddress(Handle_StepBasic_Address):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_OrganizationalAddress_swiginit(self, _StepBasic.new_Handle_StepBasic_OrganizationalAddress(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_OrganizationalAddress_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_OrganizationalAddress
Handle_StepBasic_OrganizationalAddress.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationalAddress_Nullify, None, Handle_StepBasic_OrganizationalAddress)
Handle_StepBasic_OrganizationalAddress.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationalAddress_IsNull, None, Handle_StepBasic_OrganizationalAddress)
Handle_StepBasic_OrganizationalAddress.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_OrganizationalAddress_GetObject, None, Handle_StepBasic_OrganizationalAddress)
Handle_StepBasic_OrganizationalAddress_swigregister = _StepBasic.Handle_StepBasic_OrganizationalAddress_swigregister
Handle_StepBasic_OrganizationalAddress_swigregister(Handle_StepBasic_OrganizationalAddress)

def Handle_StepBasic_OrganizationalAddress_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_OrganizationalAddress_DownCast(AnObject)
Handle_StepBasic_OrganizationalAddress_DownCast = _StepBasic.Handle_StepBasic_OrganizationalAddress_DownCast

class StepBasic_PersonalAddress(StepBasic_Address):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PersonalAddress

        :rtype: None

        """
        _StepBasic.StepBasic_PersonalAddress_swiginit(self, _StepBasic.new_StepBasic_PersonalAddress(*args))

    def Init(self, *args):
        """
        :param hasAinternalLocation:
        :type hasAinternalLocation: bool
        :param aInternalLocation:
        :type aInternalLocation: Handle_TCollection_HAsciiString &
        :param hasAstreetNumber:
        :type hasAstreetNumber: bool
        :param aStreetNumber:
        :type aStreetNumber: Handle_TCollection_HAsciiString &
        :param hasAstreet:
        :type hasAstreet: bool
        :param aStreet:
        :type aStreet: Handle_TCollection_HAsciiString &
        :param hasApostalBox:
        :type hasApostalBox: bool
        :param aPostalBox:
        :type aPostalBox: Handle_TCollection_HAsciiString &
        :param hasAtown:
        :type hasAtown: bool
        :param aTown:
        :type aTown: Handle_TCollection_HAsciiString &
        :param hasAregion:
        :type hasAregion: bool
        :param aRegion:
        :type aRegion: Handle_TCollection_HAsciiString &
        :param hasApostalCode:
        :type hasApostalCode: bool
        :param aPostalCode:
        :type aPostalCode: Handle_TCollection_HAsciiString &
        :param hasAcountry:
        :type hasAcountry: bool
        :param aCountry:
        :type aCountry: Handle_TCollection_HAsciiString &
        :param hasAfacsimileNumber:
        :type hasAfacsimileNumber: bool
        :param aFacsimileNumber:
        :type aFacsimileNumber: Handle_TCollection_HAsciiString &
        :param hasAtelephoneNumber:
        :type hasAtelephoneNumber: bool
        :param aTelephoneNumber:
        :type aTelephoneNumber: Handle_TCollection_HAsciiString &
        :param hasAelectronicMailAddress:
        :type hasAelectronicMailAddress: bool
        :param aElectronicMailAddress:
        :type aElectronicMailAddress: Handle_TCollection_HAsciiString &
        :param hasAtelexNumber:
        :type hasAtelexNumber: bool
        :param aTelexNumber:
        :type aTelexNumber: Handle_TCollection_HAsciiString &
        :rtype: void

        :param hasAinternalLocation:
        :type hasAinternalLocation: bool
        :param aInternalLocation:
        :type aInternalLocation: Handle_TCollection_HAsciiString &
        :param hasAstreetNumber:
        :type hasAstreetNumber: bool
        :param aStreetNumber:
        :type aStreetNumber: Handle_TCollection_HAsciiString &
        :param hasAstreet:
        :type hasAstreet: bool
        :param aStreet:
        :type aStreet: Handle_TCollection_HAsciiString &
        :param hasApostalBox:
        :type hasApostalBox: bool
        :param aPostalBox:
        :type aPostalBox: Handle_TCollection_HAsciiString &
        :param hasAtown:
        :type hasAtown: bool
        :param aTown:
        :type aTown: Handle_TCollection_HAsciiString &
        :param hasAregion:
        :type hasAregion: bool
        :param aRegion:
        :type aRegion: Handle_TCollection_HAsciiString &
        :param hasApostalCode:
        :type hasApostalCode: bool
        :param aPostalCode:
        :type aPostalCode: Handle_TCollection_HAsciiString &
        :param hasAcountry:
        :type hasAcountry: bool
        :param aCountry:
        :type aCountry: Handle_TCollection_HAsciiString &
        :param hasAfacsimileNumber:
        :type hasAfacsimileNumber: bool
        :param aFacsimileNumber:
        :type aFacsimileNumber: Handle_TCollection_HAsciiString &
        :param hasAtelephoneNumber:
        :type hasAtelephoneNumber: bool
        :param aTelephoneNumber:
        :type aTelephoneNumber: Handle_TCollection_HAsciiString &
        :param hasAelectronicMailAddress:
        :type hasAelectronicMailAddress: bool
        :param aElectronicMailAddress:
        :type aElectronicMailAddress: Handle_TCollection_HAsciiString &
        :param hasAtelexNumber:
        :type hasAtelexNumber: bool
        :param aTelexNumber:
        :type aTelexNumber: Handle_TCollection_HAsciiString &
        :param aPeople:
        :type aPeople: Handle_StepBasic_HArray1OfPerson &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_PersonalAddress_Init(self, *args)


    def SetPeople(self, *args):
        """
        :param aPeople:
        :type aPeople: Handle_StepBasic_HArray1OfPerson &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonalAddress_SetPeople(self, *args)


    def People(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfPerson

        """
        return _StepBasic.StepBasic_PersonalAddress_People(self, *args)


    def PeopleValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_Person

        """
        return _StepBasic.StepBasic_PersonalAddress_PeopleValue(self, *args)


    def NbPeople(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_PersonalAddress_NbPeople(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_PersonalAddress_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_PersonalAddress_Description(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PersonalAddress(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonalAddress
StepBasic_PersonalAddress.Init = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_Init, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress.SetPeople = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_SetPeople, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress.People = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_People, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress.PeopleValue = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_PeopleValue, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress.NbPeople = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_NbPeople, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress.SetDescription = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_SetDescription, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress.Description = new_instancemethod(_StepBasic.StepBasic_PersonalAddress_Description, None, StepBasic_PersonalAddress)
StepBasic_PersonalAddress_swigregister = _StepBasic.StepBasic_PersonalAddress_swigregister
StepBasic_PersonalAddress_swigregister(StepBasic_PersonalAddress)

class Handle_StepBasic_PersonalAddress(Handle_StepBasic_Address):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PersonalAddress_swiginit(self, _StepBasic.new_Handle_StepBasic_PersonalAddress(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PersonalAddress_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PersonalAddress
Handle_StepBasic_PersonalAddress.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PersonalAddress_Nullify, None, Handle_StepBasic_PersonalAddress)
Handle_StepBasic_PersonalAddress.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PersonalAddress_IsNull, None, Handle_StepBasic_PersonalAddress)
Handle_StepBasic_PersonalAddress.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PersonalAddress_GetObject, None, Handle_StepBasic_PersonalAddress)
Handle_StepBasic_PersonalAddress_swigregister = _StepBasic.Handle_StepBasic_PersonalAddress_swigregister
Handle_StepBasic_PersonalAddress_swigregister(Handle_StepBasic_PersonalAddress)

def Handle_StepBasic_PersonalAddress_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PersonalAddress_DownCast(AnObject)
Handle_StepBasic_PersonalAddress_DownCast = _StepBasic.Handle_StepBasic_PersonalAddress_DownCast

class StepBasic_PhysicallyModeledProductDefinition(StepBasic_ProductDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_PhysicallyModeledProductDefinition_swiginit(self, _StepBasic.new_StepBasic_PhysicallyModeledProductDefinition(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PhysicallyModeledProductDefinition(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PhysicallyModeledProductDefinition
StepBasic_PhysicallyModeledProductDefinition_swigregister = _StepBasic.StepBasic_PhysicallyModeledProductDefinition_swigregister
StepBasic_PhysicallyModeledProductDefinition_swigregister(StepBasic_PhysicallyModeledProductDefinition)

class Handle_StepBasic_PhysicallyModeledProductDefinition(Handle_StepBasic_ProductDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_swiginit(self, _StepBasic.new_Handle_StepBasic_PhysicallyModeledProductDefinition(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PhysicallyModeledProductDefinition
Handle_StepBasic_PhysicallyModeledProductDefinition.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_Nullify, None, Handle_StepBasic_PhysicallyModeledProductDefinition)
Handle_StepBasic_PhysicallyModeledProductDefinition.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_IsNull, None, Handle_StepBasic_PhysicallyModeledProductDefinition)
Handle_StepBasic_PhysicallyModeledProductDefinition.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_GetObject, None, Handle_StepBasic_PhysicallyModeledProductDefinition)
Handle_StepBasic_PhysicallyModeledProductDefinition_swigregister = _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_swigregister
Handle_StepBasic_PhysicallyModeledProductDefinition_swigregister(Handle_StepBasic_PhysicallyModeledProductDefinition)

def Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast(AnObject)
Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast = _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast

class StepBasic_PlaneAngleMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PlaneAngleMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_PlaneAngleMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_PlaneAngleMeasureWithUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PlaneAngleMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PlaneAngleMeasureWithUnit
StepBasic_PlaneAngleMeasureWithUnit_swigregister = _StepBasic.StepBasic_PlaneAngleMeasureWithUnit_swigregister
StepBasic_PlaneAngleMeasureWithUnit_swigregister(StepBasic_PlaneAngleMeasureWithUnit)

class Handle_StepBasic_PlaneAngleMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_PlaneAngleMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PlaneAngleMeasureWithUnit
Handle_StepBasic_PlaneAngleMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_Nullify, None, Handle_StepBasic_PlaneAngleMeasureWithUnit)
Handle_StepBasic_PlaneAngleMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_IsNull, None, Handle_StepBasic_PlaneAngleMeasureWithUnit)
Handle_StepBasic_PlaneAngleMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_GetObject, None, Handle_StepBasic_PlaneAngleMeasureWithUnit)
Handle_StepBasic_PlaneAngleMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_swigregister
Handle_StepBasic_PlaneAngleMeasureWithUnit_swigregister(Handle_StepBasic_PlaneAngleMeasureWithUnit)

def Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast

class StepBasic_PlaneAngleUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PlaneAngleUnit

        :rtype: None

        """
        _StepBasic.StepBasic_PlaneAngleUnit_swiginit(self, _StepBasic.new_StepBasic_PlaneAngleUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_PlaneAngleUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_PlaneAngleUnit
StepBasic_PlaneAngleUnit_swigregister = _StepBasic.StepBasic_PlaneAngleUnit_swigregister
StepBasic_PlaneAngleUnit_swigregister(StepBasic_PlaneAngleUnit)

class Handle_StepBasic_PlaneAngleUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_PlaneAngleUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_PlaneAngleUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_PlaneAngleUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_PlaneAngleUnit
Handle_StepBasic_PlaneAngleUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_PlaneAngleUnit_Nullify, None, Handle_StepBasic_PlaneAngleUnit)
Handle_StepBasic_PlaneAngleUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_PlaneAngleUnit_IsNull, None, Handle_StepBasic_PlaneAngleUnit)
Handle_StepBasic_PlaneAngleUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_PlaneAngleUnit_GetObject, None, Handle_StepBasic_PlaneAngleUnit)
Handle_StepBasic_PlaneAngleUnit_swigregister = _StepBasic.Handle_StepBasic_PlaneAngleUnit_swigregister
Handle_StepBasic_PlaneAngleUnit_swigregister(Handle_StepBasic_PlaneAngleUnit)

def Handle_StepBasic_PlaneAngleUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_PlaneAngleUnit_DownCast(AnObject)
Handle_StepBasic_PlaneAngleUnit_DownCast = _StepBasic.Handle_StepBasic_PlaneAngleUnit_DownCast

class StepBasic_ProductConceptContext(StepBasic_ApplicationContextElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ProductConceptContext_swiginit(self, _StepBasic.new_StepBasic_ProductConceptContext(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aApplicationContextElement_Name:
        :type aApplicationContextElement_Name: Handle_TCollection_HAsciiString &
        :param aApplicationContextElement_FrameOfReference:
        :type aApplicationContextElement_FrameOfReference: Handle_StepBasic_ApplicationContext &
        :param aMarketSegmentType:
        :type aMarketSegmentType: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductConceptContext_Init(self, *args)


    def MarketSegmentType(self, *args):
        """
        * Returns field MarketSegmentType

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductConceptContext_MarketSegmentType(self, *args)


    def SetMarketSegmentType(self, *args):
        """
        * Set field MarketSegmentType

        :param MarketSegmentType:
        :type MarketSegmentType: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductConceptContext_SetMarketSegmentType(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductConceptContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductConceptContext
StepBasic_ProductConceptContext.Init = new_instancemethod(_StepBasic.StepBasic_ProductConceptContext_Init, None, StepBasic_ProductConceptContext)
StepBasic_ProductConceptContext.MarketSegmentType = new_instancemethod(_StepBasic.StepBasic_ProductConceptContext_MarketSegmentType, None, StepBasic_ProductConceptContext)
StepBasic_ProductConceptContext.SetMarketSegmentType = new_instancemethod(_StepBasic.StepBasic_ProductConceptContext_SetMarketSegmentType, None, StepBasic_ProductConceptContext)
StepBasic_ProductConceptContext_swigregister = _StepBasic.StepBasic_ProductConceptContext_swigregister
StepBasic_ProductConceptContext_swigregister(StepBasic_ProductConceptContext)

class Handle_StepBasic_ProductConceptContext(Handle_StepBasic_ApplicationContextElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductConceptContext_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductConceptContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductConceptContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductConceptContext
Handle_StepBasic_ProductConceptContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductConceptContext_Nullify, None, Handle_StepBasic_ProductConceptContext)
Handle_StepBasic_ProductConceptContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductConceptContext_IsNull, None, Handle_StepBasic_ProductConceptContext)
Handle_StepBasic_ProductConceptContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductConceptContext_GetObject, None, Handle_StepBasic_ProductConceptContext)
Handle_StepBasic_ProductConceptContext_swigregister = _StepBasic.Handle_StepBasic_ProductConceptContext_swigregister
Handle_StepBasic_ProductConceptContext_swigregister(Handle_StepBasic_ProductConceptContext)

def Handle_StepBasic_ProductConceptContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductConceptContext_DownCast(AnObject)
Handle_StepBasic_ProductConceptContext_DownCast = _StepBasic.Handle_StepBasic_ProductConceptContext_DownCast

class StepBasic_ProductContext(StepBasic_ApplicationContextElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductContext

        :rtype: None

        """
        _StepBasic.StepBasic_ProductContext_swiginit(self, _StepBasic.new_StepBasic_ProductContext(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ApplicationContext &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ApplicationContext &
        :param aDisciplineType:
        :type aDisciplineType: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductContext_Init(self, *args)


    def SetDisciplineType(self, *args):
        """
        :param aDisciplineType:
        :type aDisciplineType: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductContext_SetDisciplineType(self, *args)


    def DisciplineType(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductContext_DisciplineType(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductContext
StepBasic_ProductContext.Init = new_instancemethod(_StepBasic.StepBasic_ProductContext_Init, None, StepBasic_ProductContext)
StepBasic_ProductContext.SetDisciplineType = new_instancemethod(_StepBasic.StepBasic_ProductContext_SetDisciplineType, None, StepBasic_ProductContext)
StepBasic_ProductContext.DisciplineType = new_instancemethod(_StepBasic.StepBasic_ProductContext_DisciplineType, None, StepBasic_ProductContext)
StepBasic_ProductContext_swigregister = _StepBasic.StepBasic_ProductContext_swigregister
StepBasic_ProductContext_swigregister(StepBasic_ProductContext)

class Handle_StepBasic_ProductContext(Handle_StepBasic_ApplicationContextElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductContext_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductContext
Handle_StepBasic_ProductContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductContext_Nullify, None, Handle_StepBasic_ProductContext)
Handle_StepBasic_ProductContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductContext_IsNull, None, Handle_StepBasic_ProductContext)
Handle_StepBasic_ProductContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductContext_GetObject, None, Handle_StepBasic_ProductContext)
Handle_StepBasic_ProductContext_swigregister = _StepBasic.Handle_StepBasic_ProductContext_swigregister
Handle_StepBasic_ProductContext_swigregister(Handle_StepBasic_ProductContext)

def Handle_StepBasic_ProductContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductContext_DownCast(AnObject)
Handle_StepBasic_ProductContext_DownCast = _StepBasic.Handle_StepBasic_ProductContext_DownCast

class StepBasic_ProductDefinitionContext(StepBasic_ApplicationContextElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductDefinitionContext

        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionContext_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionContext(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ApplicationContext &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aFrameOfReference:
        :type aFrameOfReference: Handle_StepBasic_ApplicationContext &
        :param aLifeCycleStage:
        :type aLifeCycleStage: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductDefinitionContext_Init(self, *args)


    def SetLifeCycleStage(self, *args):
        """
        :param aLifeCycleStage:
        :type aLifeCycleStage: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionContext_SetLifeCycleStage(self, *args)


    def LifeCycleStage(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_ProductDefinitionContext_LifeCycleStage(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionContext
StepBasic_ProductDefinitionContext.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionContext_Init, None, StepBasic_ProductDefinitionContext)
StepBasic_ProductDefinitionContext.SetLifeCycleStage = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionContext_SetLifeCycleStage, None, StepBasic_ProductDefinitionContext)
StepBasic_ProductDefinitionContext.LifeCycleStage = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionContext_LifeCycleStage, None, StepBasic_ProductDefinitionContext)
StepBasic_ProductDefinitionContext_swigregister = _StepBasic.StepBasic_ProductDefinitionContext_swigregister
StepBasic_ProductDefinitionContext_swigregister(StepBasic_ProductDefinitionContext)

class Handle_StepBasic_ProductDefinitionContext(Handle_StepBasic_ApplicationContextElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionContext_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionContext
Handle_StepBasic_ProductDefinitionContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionContext_Nullify, None, Handle_StepBasic_ProductDefinitionContext)
Handle_StepBasic_ProductDefinitionContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionContext_IsNull, None, Handle_StepBasic_ProductDefinitionContext)
Handle_StepBasic_ProductDefinitionContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionContext_GetObject, None, Handle_StepBasic_ProductDefinitionContext)
Handle_StepBasic_ProductDefinitionContext_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionContext_swigregister
Handle_StepBasic_ProductDefinitionContext_swigregister(Handle_StepBasic_ProductDefinitionContext)

def Handle_StepBasic_ProductDefinitionContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionContext_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionContext_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionContext_DownCast

class StepBasic_ProductDefinitionEffectivity(StepBasic_Effectivity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionEffectivity_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionEffectivity(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aUsage:
        :type aUsage: Handle_StepBasic_ProductDefinitionRelationship &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionEffectivity_Init(self, *args)


    def Usage(self, *args):
        """
        :rtype: Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepBasic.StepBasic_ProductDefinitionEffectivity_Usage(self, *args)


    def SetUsage(self, *args):
        """
        :param aUsage:
        :type aUsage: Handle_StepBasic_ProductDefinitionRelationship &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionEffectivity_SetUsage(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionEffectivity(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionEffectivity
StepBasic_ProductDefinitionEffectivity.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionEffectivity_Init, None, StepBasic_ProductDefinitionEffectivity)
StepBasic_ProductDefinitionEffectivity.Usage = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionEffectivity_Usage, None, StepBasic_ProductDefinitionEffectivity)
StepBasic_ProductDefinitionEffectivity.SetUsage = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionEffectivity_SetUsage, None, StepBasic_ProductDefinitionEffectivity)
StepBasic_ProductDefinitionEffectivity_swigregister = _StepBasic.StepBasic_ProductDefinitionEffectivity_swigregister
StepBasic_ProductDefinitionEffectivity_swigregister(StepBasic_ProductDefinitionEffectivity)

class Handle_StepBasic_ProductDefinitionEffectivity(Handle_StepBasic_Effectivity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionEffectivity(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionEffectivity
Handle_StepBasic_ProductDefinitionEffectivity.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_Nullify, None, Handle_StepBasic_ProductDefinitionEffectivity)
Handle_StepBasic_ProductDefinitionEffectivity.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_IsNull, None, Handle_StepBasic_ProductDefinitionEffectivity)
Handle_StepBasic_ProductDefinitionEffectivity.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_GetObject, None, Handle_StepBasic_ProductDefinitionEffectivity)
Handle_StepBasic_ProductDefinitionEffectivity_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_swigregister
Handle_StepBasic_ProductDefinitionEffectivity_swigregister(Handle_StepBasic_ProductDefinitionEffectivity)

def Handle_StepBasic_ProductDefinitionEffectivity_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionEffectivity_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_DownCast

class StepBasic_ProductDefinitionFormationWithSpecifiedSource(StepBasic_ProductDefinitionFormation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductDefinitionFormationWithSpecifiedSource

        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionFormationWithSpecifiedSource(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aOfProduct:
        :type aOfProduct: Handle_StepBasic_Product &
        :rtype: void

        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aOfProduct:
        :type aOfProduct: Handle_StepBasic_Product &
        :param aMakeOrBuy:
        :type aMakeOrBuy: StepBasic_Source
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_Init(self, *args)


    def SetMakeOrBuy(self, *args):
        """
        :param aMakeOrBuy:
        :type aMakeOrBuy: StepBasic_Source
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_SetMakeOrBuy(self, *args)


    def MakeOrBuy(self, *args):
        """
        :rtype: StepBasic_Source

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_MakeOrBuy(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionFormationWithSpecifiedSource
StepBasic_ProductDefinitionFormationWithSpecifiedSource.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_Init, None, StepBasic_ProductDefinitionFormationWithSpecifiedSource)
StepBasic_ProductDefinitionFormationWithSpecifiedSource.SetMakeOrBuy = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_SetMakeOrBuy, None, StepBasic_ProductDefinitionFormationWithSpecifiedSource)
StepBasic_ProductDefinitionFormationWithSpecifiedSource.MakeOrBuy = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_MakeOrBuy, None, StepBasic_ProductDefinitionFormationWithSpecifiedSource)
StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister = _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister
StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister(StepBasic_ProductDefinitionFormationWithSpecifiedSource)

class Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource(Handle_StepBasic_ProductDefinitionFormation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_Nullify, None, Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource)
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_IsNull, None, Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource)
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_GetObject, None, Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource)
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister(Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource)

def Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast

class StepBasic_ProductDefinitionWithAssociatedDocuments(StepBasic_ProductDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_swiginit(self, _StepBasic.new_StepBasic_ProductDefinitionWithAssociatedDocuments(*args))

    def Init(self, *args):
        """
        :param aId:
        :type aId: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aFormation:
        :type aFormation: Handle_StepBasic_ProductDefinitionFormation &
        :param aFrame:
        :type aFrame: Handle_StepBasic_ProductDefinitionContext &
        :param aDocIds:
        :type aDocIds: Handle_StepBasic_HArray1OfDocument &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_Init(self, *args)


    def DocIds(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfDocument

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_DocIds(self, *args)


    def SetDocIds(self, *args):
        """
        :param DocIds:
        :type DocIds: Handle_StepBasic_HArray1OfDocument &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_SetDocIds(self, *args)


    def NbDocIds(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_NbDocIds(self, *args)


    def DocIdsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_Document

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_DocIdsValue(self, *args)


    def SetDocIdsValue(self, *args):
        """
        :param num:
        :type num: int
        :param adoc:
        :type adoc: Handle_StepBasic_Document &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_SetDocIdsValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductDefinitionWithAssociatedDocuments(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionWithAssociatedDocuments
StepBasic_ProductDefinitionWithAssociatedDocuments.Init = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_Init, None, StepBasic_ProductDefinitionWithAssociatedDocuments)
StepBasic_ProductDefinitionWithAssociatedDocuments.DocIds = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_DocIds, None, StepBasic_ProductDefinitionWithAssociatedDocuments)
StepBasic_ProductDefinitionWithAssociatedDocuments.SetDocIds = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_SetDocIds, None, StepBasic_ProductDefinitionWithAssociatedDocuments)
StepBasic_ProductDefinitionWithAssociatedDocuments.NbDocIds = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_NbDocIds, None, StepBasic_ProductDefinitionWithAssociatedDocuments)
StepBasic_ProductDefinitionWithAssociatedDocuments.DocIdsValue = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_DocIdsValue, None, StepBasic_ProductDefinitionWithAssociatedDocuments)
StepBasic_ProductDefinitionWithAssociatedDocuments.SetDocIdsValue = new_instancemethod(_StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_SetDocIdsValue, None, StepBasic_ProductDefinitionWithAssociatedDocuments)
StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister = _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister
StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister(StepBasic_ProductDefinitionWithAssociatedDocuments)

class Handle_StepBasic_ProductDefinitionWithAssociatedDocuments(Handle_StepBasic_ProductDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductDefinitionWithAssociatedDocuments(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductDefinitionWithAssociatedDocuments
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_Nullify, None, Handle_StepBasic_ProductDefinitionWithAssociatedDocuments)
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_IsNull, None, Handle_StepBasic_ProductDefinitionWithAssociatedDocuments)
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_GetObject, None, Handle_StepBasic_ProductDefinitionWithAssociatedDocuments)
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister = _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister(Handle_StepBasic_ProductDefinitionWithAssociatedDocuments)

def Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast(AnObject)
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast

class StepBasic_ProductRelatedProductCategory(StepBasic_ProductCategory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductRelatedProductCategory

        :rtype: None

        """
        _StepBasic.StepBasic_ProductRelatedProductCategory_swiginit(self, _StepBasic.new_StepBasic_ProductRelatedProductCategory(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasAdescription:
        :type hasAdescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasAdescription:
        :type hasAdescription: bool
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aProducts:
        :type aProducts: Handle_StepBasic_HArray1OfProduct &
        :rtype: void

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_Init(self, *args)


    def SetProducts(self, *args):
        """
        :param aProducts:
        :type aProducts: Handle_StepBasic_HArray1OfProduct &
        :rtype: None

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_SetProducts(self, *args)


    def Products(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfProduct

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_Products(self, *args)


    def ProductsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_Product

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_ProductsValue(self, *args)


    def NbProducts(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_NbProducts(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductRelatedProductCategory(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductRelatedProductCategory
StepBasic_ProductRelatedProductCategory.Init = new_instancemethod(_StepBasic.StepBasic_ProductRelatedProductCategory_Init, None, StepBasic_ProductRelatedProductCategory)
StepBasic_ProductRelatedProductCategory.SetProducts = new_instancemethod(_StepBasic.StepBasic_ProductRelatedProductCategory_SetProducts, None, StepBasic_ProductRelatedProductCategory)
StepBasic_ProductRelatedProductCategory.Products = new_instancemethod(_StepBasic.StepBasic_ProductRelatedProductCategory_Products, None, StepBasic_ProductRelatedProductCategory)
StepBasic_ProductRelatedProductCategory.ProductsValue = new_instancemethod(_StepBasic.StepBasic_ProductRelatedProductCategory_ProductsValue, None, StepBasic_ProductRelatedProductCategory)
StepBasic_ProductRelatedProductCategory.NbProducts = new_instancemethod(_StepBasic.StepBasic_ProductRelatedProductCategory_NbProducts, None, StepBasic_ProductRelatedProductCategory)
StepBasic_ProductRelatedProductCategory_swigregister = _StepBasic.StepBasic_ProductRelatedProductCategory_swigregister
StepBasic_ProductRelatedProductCategory_swigregister(StepBasic_ProductRelatedProductCategory)

class Handle_StepBasic_ProductRelatedProductCategory(Handle_StepBasic_ProductCategory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductRelatedProductCategory(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductRelatedProductCategory_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductRelatedProductCategory
Handle_StepBasic_ProductRelatedProductCategory.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductRelatedProductCategory_Nullify, None, Handle_StepBasic_ProductRelatedProductCategory)
Handle_StepBasic_ProductRelatedProductCategory.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductRelatedProductCategory_IsNull, None, Handle_StepBasic_ProductRelatedProductCategory)
Handle_StepBasic_ProductRelatedProductCategory.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductRelatedProductCategory_GetObject, None, Handle_StepBasic_ProductRelatedProductCategory)
Handle_StepBasic_ProductRelatedProductCategory_swigregister = _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_swigregister
Handle_StepBasic_ProductRelatedProductCategory_swigregister(Handle_StepBasic_ProductRelatedProductCategory)

def Handle_StepBasic_ProductRelatedProductCategory_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_DownCast(AnObject)
Handle_StepBasic_ProductRelatedProductCategory_DownCast = _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_DownCast

class StepBasic_RatioMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RatioMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_RatioMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_RatioMeasureWithUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_RatioMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_RatioMeasureWithUnit
StepBasic_RatioMeasureWithUnit_swigregister = _StepBasic.StepBasic_RatioMeasureWithUnit_swigregister
StepBasic_RatioMeasureWithUnit_swigregister(StepBasic_RatioMeasureWithUnit)

class Handle_StepBasic_RatioMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_RatioMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_RatioMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_RatioMeasureWithUnit
Handle_StepBasic_RatioMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_RatioMeasureWithUnit_Nullify, None, Handle_StepBasic_RatioMeasureWithUnit)
Handle_StepBasic_RatioMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_RatioMeasureWithUnit_IsNull, None, Handle_StepBasic_RatioMeasureWithUnit)
Handle_StepBasic_RatioMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_RatioMeasureWithUnit_GetObject, None, Handle_StepBasic_RatioMeasureWithUnit)
Handle_StepBasic_RatioMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_swigregister
Handle_StepBasic_RatioMeasureWithUnit_swigregister(Handle_StepBasic_RatioMeasureWithUnit)

def Handle_StepBasic_RatioMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_RatioMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_DownCast

class StepBasic_RatioUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RatioUnit

        :rtype: None

        """
        _StepBasic.StepBasic_RatioUnit_swiginit(self, _StepBasic.new_StepBasic_RatioUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_RatioUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_RatioUnit
StepBasic_RatioUnit_swigregister = _StepBasic.StepBasic_RatioUnit_swigregister
StepBasic_RatioUnit_swigregister(StepBasic_RatioUnit)

class Handle_StepBasic_RatioUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_RatioUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_RatioUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_RatioUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_RatioUnit
Handle_StepBasic_RatioUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_RatioUnit_Nullify, None, Handle_StepBasic_RatioUnit)
Handle_StepBasic_RatioUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_RatioUnit_IsNull, None, Handle_StepBasic_RatioUnit)
Handle_StepBasic_RatioUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_RatioUnit_GetObject, None, Handle_StepBasic_RatioUnit)
Handle_StepBasic_RatioUnit_swigregister = _StepBasic.Handle_StepBasic_RatioUnit_swigregister
Handle_StepBasic_RatioUnit_swigregister(Handle_StepBasic_RatioUnit)

def Handle_StepBasic_RatioUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_RatioUnit_DownCast(AnObject)
Handle_StepBasic_RatioUnit_DownCast = _StepBasic.Handle_StepBasic_RatioUnit_DownCast

class StepBasic_SiUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnit_Init(self, *args)


    def SetPrefix(self, *args):
        """
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnit_SetPrefix(self, *args)


    def UnSetPrefix(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnit_UnSetPrefix(self, *args)


    def Prefix(self, *args):
        """
        :rtype: StepBasic_SiPrefix

        """
        return _StepBasic.StepBasic_SiUnit_Prefix(self, *args)


    def HasPrefix(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_SiUnit_HasPrefix(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnit_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: StepBasic_SiUnitName

        """
        return _StepBasic.StepBasic_SiUnit_Name(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnit
StepBasic_SiUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnit_Init, None, StepBasic_SiUnit)
StepBasic_SiUnit.SetPrefix = new_instancemethod(_StepBasic.StepBasic_SiUnit_SetPrefix, None, StepBasic_SiUnit)
StepBasic_SiUnit.UnSetPrefix = new_instancemethod(_StepBasic.StepBasic_SiUnit_UnSetPrefix, None, StepBasic_SiUnit)
StepBasic_SiUnit.Prefix = new_instancemethod(_StepBasic.StepBasic_SiUnit_Prefix, None, StepBasic_SiUnit)
StepBasic_SiUnit.HasPrefix = new_instancemethod(_StepBasic.StepBasic_SiUnit_HasPrefix, None, StepBasic_SiUnit)
StepBasic_SiUnit.SetName = new_instancemethod(_StepBasic.StepBasic_SiUnit_SetName, None, StepBasic_SiUnit)
StepBasic_SiUnit.Name = new_instancemethod(_StepBasic.StepBasic_SiUnit_Name, None, StepBasic_SiUnit)
StepBasic_SiUnit_swigregister = _StepBasic.StepBasic_SiUnit_swigregister
StepBasic_SiUnit_swigregister(StepBasic_SiUnit)

class Handle_StepBasic_SiUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnit
Handle_StepBasic_SiUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnit_Nullify, None, Handle_StepBasic_SiUnit)
Handle_StepBasic_SiUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnit_IsNull, None, Handle_StepBasic_SiUnit)
Handle_StepBasic_SiUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnit_GetObject, None, Handle_StepBasic_SiUnit)
Handle_StepBasic_SiUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnit_swigregister
Handle_StepBasic_SiUnit_swigregister(Handle_StepBasic_SiUnit)

def Handle_StepBasic_SiUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnit_DownCast(AnObject)
Handle_StepBasic_SiUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnit_DownCast

class StepBasic_SolidAngleMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SolidAngleMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SolidAngleMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_SolidAngleMeasureWithUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SolidAngleMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SolidAngleMeasureWithUnit
StepBasic_SolidAngleMeasureWithUnit_swigregister = _StepBasic.StepBasic_SolidAngleMeasureWithUnit_swigregister
StepBasic_SolidAngleMeasureWithUnit_swigregister(StepBasic_SolidAngleMeasureWithUnit)

class Handle_StepBasic_SolidAngleMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SolidAngleMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SolidAngleMeasureWithUnit
Handle_StepBasic_SolidAngleMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_Nullify, None, Handle_StepBasic_SolidAngleMeasureWithUnit)
Handle_StepBasic_SolidAngleMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_IsNull, None, Handle_StepBasic_SolidAngleMeasureWithUnit)
Handle_StepBasic_SolidAngleMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_GetObject, None, Handle_StepBasic_SolidAngleMeasureWithUnit)
Handle_StepBasic_SolidAngleMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_swigregister
Handle_StepBasic_SolidAngleMeasureWithUnit_swigregister(Handle_StepBasic_SolidAngleMeasureWithUnit)

def Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast

class StepBasic_SolidAngleUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SolidAngleUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SolidAngleUnit_swiginit(self, _StepBasic.new_StepBasic_SolidAngleUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SolidAngleUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SolidAngleUnit
StepBasic_SolidAngleUnit_swigregister = _StepBasic.StepBasic_SolidAngleUnit_swigregister
StepBasic_SolidAngleUnit_swigregister(StepBasic_SolidAngleUnit)

class Handle_StepBasic_SolidAngleUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SolidAngleUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SolidAngleUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SolidAngleUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SolidAngleUnit
Handle_StepBasic_SolidAngleUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SolidAngleUnit_Nullify, None, Handle_StepBasic_SolidAngleUnit)
Handle_StepBasic_SolidAngleUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SolidAngleUnit_IsNull, None, Handle_StepBasic_SolidAngleUnit)
Handle_StepBasic_SolidAngleUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SolidAngleUnit_GetObject, None, Handle_StepBasic_SolidAngleUnit)
Handle_StepBasic_SolidAngleUnit_swigregister = _StepBasic.Handle_StepBasic_SolidAngleUnit_swigregister
Handle_StepBasic_SolidAngleUnit_swigregister(Handle_StepBasic_SolidAngleUnit)

def Handle_StepBasic_SolidAngleUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SolidAngleUnit_DownCast(AnObject)
Handle_StepBasic_SolidAngleUnit_DownCast = _StepBasic.Handle_StepBasic_SolidAngleUnit_DownCast

class StepBasic_ThermodynamicTemperatureUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepBasic.StepBasic_ThermodynamicTemperatureUnit_swiginit(self, _StepBasic.new_StepBasic_ThermodynamicTemperatureUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ThermodynamicTemperatureUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ThermodynamicTemperatureUnit
StepBasic_ThermodynamicTemperatureUnit_swigregister = _StepBasic.StepBasic_ThermodynamicTemperatureUnit_swigregister
StepBasic_ThermodynamicTemperatureUnit_swigregister(StepBasic_ThermodynamicTemperatureUnit)

class Handle_StepBasic_ThermodynamicTemperatureUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ThermodynamicTemperatureUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ThermodynamicTemperatureUnit
Handle_StepBasic_ThermodynamicTemperatureUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_Nullify, None, Handle_StepBasic_ThermodynamicTemperatureUnit)
Handle_StepBasic_ThermodynamicTemperatureUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_IsNull, None, Handle_StepBasic_ThermodynamicTemperatureUnit)
Handle_StepBasic_ThermodynamicTemperatureUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_GetObject, None, Handle_StepBasic_ThermodynamicTemperatureUnit)
Handle_StepBasic_ThermodynamicTemperatureUnit_swigregister = _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_swigregister
Handle_StepBasic_ThermodynamicTemperatureUnit_swigregister(Handle_StepBasic_ThermodynamicTemperatureUnit)

def Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast(AnObject)
Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast = _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast

class StepBasic_TimeMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a TimeMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_TimeMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_TimeMeasureWithUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_TimeMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_TimeMeasureWithUnit
StepBasic_TimeMeasureWithUnit_swigregister = _StepBasic.StepBasic_TimeMeasureWithUnit_swigregister
StepBasic_TimeMeasureWithUnit_swigregister(StepBasic_TimeMeasureWithUnit)

class Handle_StepBasic_TimeMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_TimeMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_TimeMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_TimeMeasureWithUnit
Handle_StepBasic_TimeMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_TimeMeasureWithUnit_Nullify, None, Handle_StepBasic_TimeMeasureWithUnit)
Handle_StepBasic_TimeMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_TimeMeasureWithUnit_IsNull, None, Handle_StepBasic_TimeMeasureWithUnit)
Handle_StepBasic_TimeMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_TimeMeasureWithUnit_GetObject, None, Handle_StepBasic_TimeMeasureWithUnit)
Handle_StepBasic_TimeMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_swigregister
Handle_StepBasic_TimeMeasureWithUnit_swigregister(Handle_StepBasic_TimeMeasureWithUnit)

def Handle_StepBasic_TimeMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_TimeMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_DownCast

class StepBasic_TimeUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a TimeUnit

        :rtype: None

        """
        _StepBasic.StepBasic_TimeUnit_swiginit(self, _StepBasic.new_StepBasic_TimeUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_TimeUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_TimeUnit
StepBasic_TimeUnit_swigregister = _StepBasic.StepBasic_TimeUnit_swigregister
StepBasic_TimeUnit_swigregister(StepBasic_TimeUnit)

class Handle_StepBasic_TimeUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_TimeUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_TimeUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_TimeUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_TimeUnit
Handle_StepBasic_TimeUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_TimeUnit_Nullify, None, Handle_StepBasic_TimeUnit)
Handle_StepBasic_TimeUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_TimeUnit_IsNull, None, Handle_StepBasic_TimeUnit)
Handle_StepBasic_TimeUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_TimeUnit_GetObject, None, Handle_StepBasic_TimeUnit)
Handle_StepBasic_TimeUnit_swigregister = _StepBasic.Handle_StepBasic_TimeUnit_swigregister
Handle_StepBasic_TimeUnit_swigregister(Handle_StepBasic_TimeUnit)

def Handle_StepBasic_TimeUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_TimeUnit_DownCast(AnObject)
Handle_StepBasic_TimeUnit_DownCast = _StepBasic.Handle_StepBasic_TimeUnit_DownCast

class StepBasic_UncertaintyMeasureWithUnit(StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a UncertaintyMeasureWithUnit

        :rtype: None

        """
        _StepBasic.StepBasic_UncertaintyMeasureWithUnit_swiginit(self, _StepBasic.new_StepBasic_UncertaintyMeasureWithUnit(*args))

    def Init(self, *args):
        """
        :param aValueComponent:
        :type aValueComponent: Handle_StepBasic_MeasureValueMember &
        :param aUnitComponent:
        :type aUnitComponent: StepBasic_Unit &
        :rtype: void

        :param aValueComponent:
        :type aValueComponent: Handle_StepBasic_MeasureValueMember &
        :param aUnitComponent:
        :type aUnitComponent: StepBasic_Unit &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: void

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_Init(self, *args)


    def SetName(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_Name(self, *args)


    def SetDescription(self, *args):
        """
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_SetDescription(self, *args)


    def Description(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_Description(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_UncertaintyMeasureWithUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_UncertaintyMeasureWithUnit
StepBasic_UncertaintyMeasureWithUnit.Init = new_instancemethod(_StepBasic.StepBasic_UncertaintyMeasureWithUnit_Init, None, StepBasic_UncertaintyMeasureWithUnit)
StepBasic_UncertaintyMeasureWithUnit.SetName = new_instancemethod(_StepBasic.StepBasic_UncertaintyMeasureWithUnit_SetName, None, StepBasic_UncertaintyMeasureWithUnit)
StepBasic_UncertaintyMeasureWithUnit.Name = new_instancemethod(_StepBasic.StepBasic_UncertaintyMeasureWithUnit_Name, None, StepBasic_UncertaintyMeasureWithUnit)
StepBasic_UncertaintyMeasureWithUnit.SetDescription = new_instancemethod(_StepBasic.StepBasic_UncertaintyMeasureWithUnit_SetDescription, None, StepBasic_UncertaintyMeasureWithUnit)
StepBasic_UncertaintyMeasureWithUnit.Description = new_instancemethod(_StepBasic.StepBasic_UncertaintyMeasureWithUnit_Description, None, StepBasic_UncertaintyMeasureWithUnit)
StepBasic_UncertaintyMeasureWithUnit_swigregister = _StepBasic.StepBasic_UncertaintyMeasureWithUnit_swigregister
StepBasic_UncertaintyMeasureWithUnit_swigregister(StepBasic_UncertaintyMeasureWithUnit)

class Handle_StepBasic_UncertaintyMeasureWithUnit(Handle_StepBasic_MeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_UncertaintyMeasureWithUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_UncertaintyMeasureWithUnit
Handle_StepBasic_UncertaintyMeasureWithUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_Nullify, None, Handle_StepBasic_UncertaintyMeasureWithUnit)
Handle_StepBasic_UncertaintyMeasureWithUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_IsNull, None, Handle_StepBasic_UncertaintyMeasureWithUnit)
Handle_StepBasic_UncertaintyMeasureWithUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_GetObject, None, Handle_StepBasic_UncertaintyMeasureWithUnit)
Handle_StepBasic_UncertaintyMeasureWithUnit_swigregister = _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_swigregister
Handle_StepBasic_UncertaintyMeasureWithUnit_swigregister(Handle_StepBasic_UncertaintyMeasureWithUnit)

def Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast(AnObject)
Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast

class StepBasic_VolumeUnit(StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_VolumeUnit_swiginit(self, _StepBasic.new_StepBasic_VolumeUnit(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_VolumeUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_VolumeUnit
StepBasic_VolumeUnit_swigregister = _StepBasic.StepBasic_VolumeUnit_swigregister
StepBasic_VolumeUnit_swigregister(StepBasic_VolumeUnit)

class Handle_StepBasic_VolumeUnit(Handle_StepBasic_NamedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_VolumeUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_VolumeUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_VolumeUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_VolumeUnit
Handle_StepBasic_VolumeUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_VolumeUnit_Nullify, None, Handle_StepBasic_VolumeUnit)
Handle_StepBasic_VolumeUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_VolumeUnit_IsNull, None, Handle_StepBasic_VolumeUnit)
Handle_StepBasic_VolumeUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_VolumeUnit_GetObject, None, Handle_StepBasic_VolumeUnit)
Handle_StepBasic_VolumeUnit_swigregister = _StepBasic.Handle_StepBasic_VolumeUnit_swigregister
Handle_StepBasic_VolumeUnit_swigregister(Handle_StepBasic_VolumeUnit)

def Handle_StepBasic_VolumeUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_VolumeUnit_DownCast(AnObject)
Handle_StepBasic_VolumeUnit_DownCast = _StepBasic.Handle_StepBasic_VolumeUnit_DownCast

class StepBasic_WeekOfYearAndDayDate(StepBasic_Date):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a WeekOfYearAndDayDate

        :rtype: None

        """
        _StepBasic.StepBasic_WeekOfYearAndDayDate_swiginit(self, _StepBasic.new_StepBasic_WeekOfYearAndDayDate(*args))

    def Init(self, *args):
        """
        :param aYearComponent:
        :type aYearComponent: int
        :rtype: void

        :param aYearComponent:
        :type aYearComponent: int
        :param aWeekComponent:
        :type aWeekComponent: int
        :param hasAdayComponent:
        :type hasAdayComponent: bool
        :param aDayComponent:
        :type aDayComponent: int
        :rtype: void

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_Init(self, *args)


    def SetWeekComponent(self, *args):
        """
        :param aWeekComponent:
        :type aWeekComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_SetWeekComponent(self, *args)


    def WeekComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_WeekComponent(self, *args)


    def SetDayComponent(self, *args):
        """
        :param aDayComponent:
        :type aDayComponent: int
        :rtype: None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_SetDayComponent(self, *args)


    def UnSetDayComponent(self, *args):
        """
        :rtype: None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_UnSetDayComponent(self, *args)


    def DayComponent(self, *args):
        """
        :rtype: int

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_DayComponent(self, *args)


    def HasDayComponent(self, *args):
        """
        :rtype: bool

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_HasDayComponent(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_WeekOfYearAndDayDate(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_WeekOfYearAndDayDate
StepBasic_WeekOfYearAndDayDate.Init = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_Init, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate.SetWeekComponent = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_SetWeekComponent, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate.WeekComponent = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_WeekComponent, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate.SetDayComponent = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_SetDayComponent, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate.UnSetDayComponent = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_UnSetDayComponent, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate.DayComponent = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_DayComponent, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate.HasDayComponent = new_instancemethod(_StepBasic.StepBasic_WeekOfYearAndDayDate_HasDayComponent, None, StepBasic_WeekOfYearAndDayDate)
StepBasic_WeekOfYearAndDayDate_swigregister = _StepBasic.StepBasic_WeekOfYearAndDayDate_swigregister
StepBasic_WeekOfYearAndDayDate_swigregister(StepBasic_WeekOfYearAndDayDate)

class Handle_StepBasic_WeekOfYearAndDayDate(Handle_StepBasic_Date):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_swiginit(self, _StepBasic.new_Handle_StepBasic_WeekOfYearAndDayDate(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_WeekOfYearAndDayDate
Handle_StepBasic_WeekOfYearAndDayDate.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_Nullify, None, Handle_StepBasic_WeekOfYearAndDayDate)
Handle_StepBasic_WeekOfYearAndDayDate.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_IsNull, None, Handle_StepBasic_WeekOfYearAndDayDate)
Handle_StepBasic_WeekOfYearAndDayDate.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_GetObject, None, Handle_StepBasic_WeekOfYearAndDayDate)
Handle_StepBasic_WeekOfYearAndDayDate_swigregister = _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_swigregister
Handle_StepBasic_WeekOfYearAndDayDate_swigregister(Handle_StepBasic_WeekOfYearAndDayDate)

def Handle_StepBasic_WeekOfYearAndDayDate_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_DownCast(AnObject)
Handle_StepBasic_WeekOfYearAndDayDate_DownCast = _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_DownCast

class StepBasic_ConversionBasedUnitAndAreaUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndAreaUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndAreaUnit(*args))

    def SetAreaUnit(self, *args):
        """
        :param anAreaUnit:
        :type anAreaUnit: Handle_StepBasic_AreaUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_SetAreaUnit(self, *args)


    def AreaUnit(self, *args):
        """
        :rtype: Handle_StepBasic_AreaUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_AreaUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndAreaUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndAreaUnit
StepBasic_ConversionBasedUnitAndAreaUnit.SetAreaUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_SetAreaUnit, None, StepBasic_ConversionBasedUnitAndAreaUnit)
StepBasic_ConversionBasedUnitAndAreaUnit.AreaUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_AreaUnit, None, StepBasic_ConversionBasedUnitAndAreaUnit)
StepBasic_ConversionBasedUnitAndAreaUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_swigregister
StepBasic_ConversionBasedUnitAndAreaUnit_swigregister(StepBasic_ConversionBasedUnitAndAreaUnit)

class Handle_StepBasic_ConversionBasedUnitAndAreaUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndAreaUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndAreaUnit
Handle_StepBasic_ConversionBasedUnitAndAreaUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndAreaUnit)
Handle_StepBasic_ConversionBasedUnitAndAreaUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndAreaUnit)
Handle_StepBasic_ConversionBasedUnitAndAreaUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndAreaUnit)
Handle_StepBasic_ConversionBasedUnitAndAreaUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndAreaUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndAreaUnit)

def Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast

class StepBasic_ConversionBasedUnitAndLengthUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndLengthUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndLengthUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_Init(self, *args)


    def SetLengthUnit(self, *args):
        """
        :param aLengthUnit:
        :type aLengthUnit: Handle_StepBasic_LengthUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_SetLengthUnit(self, *args)


    def LengthUnit(self, *args):
        """
        :rtype: Handle_StepBasic_LengthUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_LengthUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndLengthUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndLengthUnit
StepBasic_ConversionBasedUnitAndLengthUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_Init, None, StepBasic_ConversionBasedUnitAndLengthUnit)
StepBasic_ConversionBasedUnitAndLengthUnit.SetLengthUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_SetLengthUnit, None, StepBasic_ConversionBasedUnitAndLengthUnit)
StepBasic_ConversionBasedUnitAndLengthUnit.LengthUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_LengthUnit, None, StepBasic_ConversionBasedUnitAndLengthUnit)
StepBasic_ConversionBasedUnitAndLengthUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_swigregister
StepBasic_ConversionBasedUnitAndLengthUnit_swigregister(StepBasic_ConversionBasedUnitAndLengthUnit)

class Handle_StepBasic_ConversionBasedUnitAndLengthUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndLengthUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndLengthUnit
Handle_StepBasic_ConversionBasedUnitAndLengthUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndLengthUnit)
Handle_StepBasic_ConversionBasedUnitAndLengthUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndLengthUnit)
Handle_StepBasic_ConversionBasedUnitAndLengthUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndLengthUnit)
Handle_StepBasic_ConversionBasedUnitAndLengthUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndLengthUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndLengthUnit)

def Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast

class StepBasic_ConversionBasedUnitAndMassUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndLengthUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndMassUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_Init(self, *args)


    def SetMassUnit(self, *args):
        """
        :param aMassUnit:
        :type aMassUnit: Handle_StepBasic_MassUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_SetMassUnit(self, *args)


    def MassUnit(self, *args):
        """
        :rtype: Handle_StepBasic_MassUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_MassUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndMassUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndMassUnit
StepBasic_ConversionBasedUnitAndMassUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_Init, None, StepBasic_ConversionBasedUnitAndMassUnit)
StepBasic_ConversionBasedUnitAndMassUnit.SetMassUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_SetMassUnit, None, StepBasic_ConversionBasedUnitAndMassUnit)
StepBasic_ConversionBasedUnitAndMassUnit.MassUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_MassUnit, None, StepBasic_ConversionBasedUnitAndMassUnit)
StepBasic_ConversionBasedUnitAndMassUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_swigregister
StepBasic_ConversionBasedUnitAndMassUnit_swigregister(StepBasic_ConversionBasedUnitAndMassUnit)

class Handle_StepBasic_ConversionBasedUnitAndMassUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndMassUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndMassUnit
Handle_StepBasic_ConversionBasedUnitAndMassUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndMassUnit)
Handle_StepBasic_ConversionBasedUnitAndMassUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndMassUnit)
Handle_StepBasic_ConversionBasedUnitAndMassUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndMassUnit)
Handle_StepBasic_ConversionBasedUnitAndMassUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndMassUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndMassUnit)

def Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast

class StepBasic_ConversionBasedUnitAndPlaneAngleUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndPlaneAngleUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndPlaneAngleUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Init(self, *args)


    def SetPlaneAngleUnit(self, *args):
        """
        :param aPlaneAngleUnit:
        :type aPlaneAngleUnit: Handle_StepBasic_PlaneAngleUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_SetPlaneAngleUnit(self, *args)


    def PlaneAngleUnit(self, *args):
        """
        :rtype: Handle_StepBasic_PlaneAngleUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_PlaneAngleUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndPlaneAngleUnit
StepBasic_ConversionBasedUnitAndPlaneAngleUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Init, None, StepBasic_ConversionBasedUnitAndPlaneAngleUnit)
StepBasic_ConversionBasedUnitAndPlaneAngleUnit.SetPlaneAngleUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_SetPlaneAngleUnit, None, StepBasic_ConversionBasedUnitAndPlaneAngleUnit)
StepBasic_ConversionBasedUnitAndPlaneAngleUnit.PlaneAngleUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_PlaneAngleUnit, None, StepBasic_ConversionBasedUnitAndPlaneAngleUnit)
StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister
StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister(StepBasic_ConversionBasedUnitAndPlaneAngleUnit)

class Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit)
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit)
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit)
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit)

def Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast

class StepBasic_ConversionBasedUnitAndRatioUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndRatioUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndRatioUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_Init(self, *args)


    def SetRatioUnit(self, *args):
        """
        :param aRatioUnit:
        :type aRatioUnit: Handle_StepBasic_RatioUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_SetRatioUnit(self, *args)


    def RatioUnit(self, *args):
        """
        :rtype: Handle_StepBasic_RatioUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_RatioUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndRatioUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndRatioUnit
StepBasic_ConversionBasedUnitAndRatioUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_Init, None, StepBasic_ConversionBasedUnitAndRatioUnit)
StepBasic_ConversionBasedUnitAndRatioUnit.SetRatioUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_SetRatioUnit, None, StepBasic_ConversionBasedUnitAndRatioUnit)
StepBasic_ConversionBasedUnitAndRatioUnit.RatioUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_RatioUnit, None, StepBasic_ConversionBasedUnitAndRatioUnit)
StepBasic_ConversionBasedUnitAndRatioUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_swigregister
StepBasic_ConversionBasedUnitAndRatioUnit_swigregister(StepBasic_ConversionBasedUnitAndRatioUnit)

class Handle_StepBasic_ConversionBasedUnitAndRatioUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndRatioUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndRatioUnit
Handle_StepBasic_ConversionBasedUnitAndRatioUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndRatioUnit)
Handle_StepBasic_ConversionBasedUnitAndRatioUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndRatioUnit)
Handle_StepBasic_ConversionBasedUnitAndRatioUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndRatioUnit)
Handle_StepBasic_ConversionBasedUnitAndRatioUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndRatioUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndRatioUnit)

def Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast

class StepBasic_ConversionBasedUnitAndSolidAngleUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndSolidAngleUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndSolidAngleUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_Init(self, *args)


    def SetSolidAngleUnit(self, *args):
        """
        :param aSolidAngleUnit:
        :type aSolidAngleUnit: Handle_StepBasic_SolidAngleUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_SetSolidAngleUnit(self, *args)


    def SolidAngleUnit(self, *args):
        """
        :rtype: Handle_StepBasic_SolidAngleUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_SolidAngleUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndSolidAngleUnit
StepBasic_ConversionBasedUnitAndSolidAngleUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_Init, None, StepBasic_ConversionBasedUnitAndSolidAngleUnit)
StepBasic_ConversionBasedUnitAndSolidAngleUnit.SetSolidAngleUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_SetSolidAngleUnit, None, StepBasic_ConversionBasedUnitAndSolidAngleUnit)
StepBasic_ConversionBasedUnitAndSolidAngleUnit.SolidAngleUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_SolidAngleUnit, None, StepBasic_ConversionBasedUnitAndSolidAngleUnit)
StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister
StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister(StepBasic_ConversionBasedUnitAndSolidAngleUnit)

class Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit)
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit)
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit)
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit)

def Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast

class StepBasic_ConversionBasedUnitAndTimeUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndTimeUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndTimeUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aConversionFactor:
        :type aConversionFactor: Handle_StepBasic_MeasureWithUnit &
        :rtype: void

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_Init(self, *args)


    def SetTimeUnit(self, *args):
        """
        :param aTimeUnit:
        :type aTimeUnit: Handle_StepBasic_TimeUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_SetTimeUnit(self, *args)


    def TimeUnit(self, *args):
        """
        :rtype: Handle_StepBasic_TimeUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_TimeUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndTimeUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndTimeUnit
StepBasic_ConversionBasedUnitAndTimeUnit.Init = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_Init, None, StepBasic_ConversionBasedUnitAndTimeUnit)
StepBasic_ConversionBasedUnitAndTimeUnit.SetTimeUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_SetTimeUnit, None, StepBasic_ConversionBasedUnitAndTimeUnit)
StepBasic_ConversionBasedUnitAndTimeUnit.TimeUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_TimeUnit, None, StepBasic_ConversionBasedUnitAndTimeUnit)
StepBasic_ConversionBasedUnitAndTimeUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_swigregister
StepBasic_ConversionBasedUnitAndTimeUnit_swigregister(StepBasic_ConversionBasedUnitAndTimeUnit)

class Handle_StepBasic_ConversionBasedUnitAndTimeUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndTimeUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndTimeUnit
Handle_StepBasic_ConversionBasedUnitAndTimeUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndTimeUnit)
Handle_StepBasic_ConversionBasedUnitAndTimeUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndTimeUnit)
Handle_StepBasic_ConversionBasedUnitAndTimeUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndTimeUnit)
Handle_StepBasic_ConversionBasedUnitAndTimeUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndTimeUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndTimeUnit)

def Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast

class StepBasic_ConversionBasedUnitAndVolumeUnit(StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConversionBasedUnitAndVolumeUnit

        :rtype: None

        """
        _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_swiginit(self, _StepBasic.new_StepBasic_ConversionBasedUnitAndVolumeUnit(*args))

    def SetVolumeUnit(self, *args):
        """
        :param aVolumeUnit:
        :type aVolumeUnit: Handle_StepBasic_VolumeUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_SetVolumeUnit(self, *args)


    def VolumeUnit(self, *args):
        """
        :rtype: Handle_StepBasic_VolumeUnit

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_VolumeUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ConversionBasedUnitAndVolumeUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndVolumeUnit
StepBasic_ConversionBasedUnitAndVolumeUnit.SetVolumeUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_SetVolumeUnit, None, StepBasic_ConversionBasedUnitAndVolumeUnit)
StepBasic_ConversionBasedUnitAndVolumeUnit.VolumeUnit = new_instancemethod(_StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_VolumeUnit, None, StepBasic_ConversionBasedUnitAndVolumeUnit)
StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister
StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister(StepBasic_ConversionBasedUnitAndVolumeUnit)

class Handle_StepBasic_ConversionBasedUnitAndVolumeUnit(Handle_StepBasic_ConversionBasedUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_ConversionBasedUnitAndVolumeUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ConversionBasedUnitAndVolumeUnit
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_Nullify, None, Handle_StepBasic_ConversionBasedUnitAndVolumeUnit)
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_IsNull, None, Handle_StepBasic_ConversionBasedUnitAndVolumeUnit)
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_GetObject, None, Handle_StepBasic_ConversionBasedUnitAndVolumeUnit)
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister(Handle_StepBasic_ConversionBasedUnitAndVolumeUnit)

def Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast(AnObject)
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast

class StepBasic_DesignContext(StepBasic_ProductDefinitionContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepBasic.StepBasic_DesignContext_swiginit(self, _StepBasic.new_StepBasic_DesignContext(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_DesignContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_DesignContext
StepBasic_DesignContext_swigregister = _StepBasic.StepBasic_DesignContext_swigregister
StepBasic_DesignContext_swigregister(StepBasic_DesignContext)

class Handle_StepBasic_DesignContext(Handle_StepBasic_ProductDefinitionContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_DesignContext_swiginit(self, _StepBasic.new_Handle_StepBasic_DesignContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_DesignContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_DesignContext
Handle_StepBasic_DesignContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_DesignContext_Nullify, None, Handle_StepBasic_DesignContext)
Handle_StepBasic_DesignContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_DesignContext_IsNull, None, Handle_StepBasic_DesignContext)
Handle_StepBasic_DesignContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_DesignContext_GetObject, None, Handle_StepBasic_DesignContext)
Handle_StepBasic_DesignContext_swigregister = _StepBasic.Handle_StepBasic_DesignContext_swigregister
Handle_StepBasic_DesignContext_swigregister(Handle_StepBasic_DesignContext)

def Handle_StepBasic_DesignContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_DesignContext_DownCast(AnObject)
Handle_StepBasic_DesignContext_DownCast = _StepBasic.Handle_StepBasic_DesignContext_DownCast

class StepBasic_MechanicalContext(StepBasic_ProductContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a MechanicalContext

        :rtype: None

        """
        _StepBasic.StepBasic_MechanicalContext_swiginit(self, _StepBasic.new_StepBasic_MechanicalContext(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_MechanicalContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_MechanicalContext
StepBasic_MechanicalContext_swigregister = _StepBasic.StepBasic_MechanicalContext_swigregister
StepBasic_MechanicalContext_swigregister(StepBasic_MechanicalContext)

class Handle_StepBasic_MechanicalContext(Handle_StepBasic_ProductContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_MechanicalContext_swiginit(self, _StepBasic.new_Handle_StepBasic_MechanicalContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_MechanicalContext_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_MechanicalContext
Handle_StepBasic_MechanicalContext.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_MechanicalContext_Nullify, None, Handle_StepBasic_MechanicalContext)
Handle_StepBasic_MechanicalContext.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_MechanicalContext_IsNull, None, Handle_StepBasic_MechanicalContext)
Handle_StepBasic_MechanicalContext.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_MechanicalContext_GetObject, None, Handle_StepBasic_MechanicalContext)
Handle_StepBasic_MechanicalContext_swigregister = _StepBasic.Handle_StepBasic_MechanicalContext_swigregister
Handle_StepBasic_MechanicalContext_swigregister(Handle_StepBasic_MechanicalContext)

def Handle_StepBasic_MechanicalContext_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_MechanicalContext_DownCast(AnObject)
Handle_StepBasic_MechanicalContext_DownCast = _StepBasic.Handle_StepBasic_MechanicalContext_DownCast

class StepBasic_ProductType(StepBasic_ProductRelatedProductCategory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ProductType

        :rtype: None

        """
        _StepBasic.StepBasic_ProductType_swiginit(self, _StepBasic.new_StepBasic_ProductType(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_ProductType(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductType
StepBasic_ProductType_swigregister = _StepBasic.StepBasic_ProductType_swigregister
StepBasic_ProductType_swigregister(StepBasic_ProductType)

class Handle_StepBasic_ProductType(Handle_StepBasic_ProductRelatedProductCategory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_ProductType_swiginit(self, _StepBasic.new_Handle_StepBasic_ProductType(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_ProductType_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_ProductType
Handle_StepBasic_ProductType.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_ProductType_Nullify, None, Handle_StepBasic_ProductType)
Handle_StepBasic_ProductType.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_ProductType_IsNull, None, Handle_StepBasic_ProductType)
Handle_StepBasic_ProductType.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_ProductType_GetObject, None, Handle_StepBasic_ProductType)
Handle_StepBasic_ProductType_swigregister = _StepBasic.Handle_StepBasic_ProductType_swigregister
Handle_StepBasic_ProductType_swigregister(Handle_StepBasic_ProductType)

def Handle_StepBasic_ProductType_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_ProductType_DownCast(AnObject)
Handle_StepBasic_ProductType_DownCast = _StepBasic.Handle_StepBasic_ProductType_DownCast

class StepBasic_SiUnitAndAreaUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndAreaUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndAreaUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndAreaUnit(*args))

    def SetAreaUnit(self, *args):
        """
        :param anAreaUnit:
        :type anAreaUnit: Handle_StepBasic_AreaUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndAreaUnit_SetAreaUnit(self, *args)


    def AreaUnit(self, *args):
        """
        :rtype: Handle_StepBasic_AreaUnit

        """
        return _StepBasic.StepBasic_SiUnitAndAreaUnit_AreaUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndAreaUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndAreaUnit
StepBasic_SiUnitAndAreaUnit.SetAreaUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndAreaUnit_SetAreaUnit, None, StepBasic_SiUnitAndAreaUnit)
StepBasic_SiUnitAndAreaUnit.AreaUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndAreaUnit_AreaUnit, None, StepBasic_SiUnitAndAreaUnit)
StepBasic_SiUnitAndAreaUnit_swigregister = _StepBasic.StepBasic_SiUnitAndAreaUnit_swigregister
StepBasic_SiUnitAndAreaUnit_swigregister(StepBasic_SiUnitAndAreaUnit)

class Handle_StepBasic_SiUnitAndAreaUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndAreaUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndAreaUnit
Handle_StepBasic_SiUnitAndAreaUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_Nullify, None, Handle_StepBasic_SiUnitAndAreaUnit)
Handle_StepBasic_SiUnitAndAreaUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_IsNull, None, Handle_StepBasic_SiUnitAndAreaUnit)
Handle_StepBasic_SiUnitAndAreaUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_GetObject, None, Handle_StepBasic_SiUnitAndAreaUnit)
Handle_StepBasic_SiUnitAndAreaUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_swigregister
Handle_StepBasic_SiUnitAndAreaUnit_swigregister(Handle_StepBasic_SiUnitAndAreaUnit)

def Handle_StepBasic_SiUnitAndAreaUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndAreaUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_DownCast

class StepBasic_SiUnitAndLengthUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndLengthUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndLengthUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndLengthUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndLengthUnit_Init(self, *args)


    def SetLengthUnit(self, *args):
        """
        :param aLengthUnit:
        :type aLengthUnit: Handle_StepBasic_LengthUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndLengthUnit_SetLengthUnit(self, *args)


    def LengthUnit(self, *args):
        """
        :rtype: Handle_StepBasic_LengthUnit

        """
        return _StepBasic.StepBasic_SiUnitAndLengthUnit_LengthUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndLengthUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndLengthUnit
StepBasic_SiUnitAndLengthUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndLengthUnit_Init, None, StepBasic_SiUnitAndLengthUnit)
StepBasic_SiUnitAndLengthUnit.SetLengthUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndLengthUnit_SetLengthUnit, None, StepBasic_SiUnitAndLengthUnit)
StepBasic_SiUnitAndLengthUnit.LengthUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndLengthUnit_LengthUnit, None, StepBasic_SiUnitAndLengthUnit)
StepBasic_SiUnitAndLengthUnit_swigregister = _StepBasic.StepBasic_SiUnitAndLengthUnit_swigregister
StepBasic_SiUnitAndLengthUnit_swigregister(StepBasic_SiUnitAndLengthUnit)

class Handle_StepBasic_SiUnitAndLengthUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndLengthUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndLengthUnit
Handle_StepBasic_SiUnitAndLengthUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_Nullify, None, Handle_StepBasic_SiUnitAndLengthUnit)
Handle_StepBasic_SiUnitAndLengthUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_IsNull, None, Handle_StepBasic_SiUnitAndLengthUnit)
Handle_StepBasic_SiUnitAndLengthUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_GetObject, None, Handle_StepBasic_SiUnitAndLengthUnit)
Handle_StepBasic_SiUnitAndLengthUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_swigregister
Handle_StepBasic_SiUnitAndLengthUnit_swigregister(Handle_StepBasic_SiUnitAndLengthUnit)

def Handle_StepBasic_SiUnitAndLengthUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndLengthUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_DownCast

class StepBasic_SiUnitAndMassUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndMassUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndMassUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndMassUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndMassUnit_Init(self, *args)


    def SetMassUnit(self, *args):
        """
        :param aMassUnit:
        :type aMassUnit: Handle_StepBasic_MassUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndMassUnit_SetMassUnit(self, *args)


    def MassUnit(self, *args):
        """
        :rtype: Handle_StepBasic_MassUnit

        """
        return _StepBasic.StepBasic_SiUnitAndMassUnit_MassUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndMassUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndMassUnit
StepBasic_SiUnitAndMassUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndMassUnit_Init, None, StepBasic_SiUnitAndMassUnit)
StepBasic_SiUnitAndMassUnit.SetMassUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndMassUnit_SetMassUnit, None, StepBasic_SiUnitAndMassUnit)
StepBasic_SiUnitAndMassUnit.MassUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndMassUnit_MassUnit, None, StepBasic_SiUnitAndMassUnit)
StepBasic_SiUnitAndMassUnit_swigregister = _StepBasic.StepBasic_SiUnitAndMassUnit_swigregister
StepBasic_SiUnitAndMassUnit_swigregister(StepBasic_SiUnitAndMassUnit)

class Handle_StepBasic_SiUnitAndMassUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndMassUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndMassUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndMassUnit
Handle_StepBasic_SiUnitAndMassUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndMassUnit_Nullify, None, Handle_StepBasic_SiUnitAndMassUnit)
Handle_StepBasic_SiUnitAndMassUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndMassUnit_IsNull, None, Handle_StepBasic_SiUnitAndMassUnit)
Handle_StepBasic_SiUnitAndMassUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndMassUnit_GetObject, None, Handle_StepBasic_SiUnitAndMassUnit)
Handle_StepBasic_SiUnitAndMassUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_swigregister
Handle_StepBasic_SiUnitAndMassUnit_swigregister(Handle_StepBasic_SiUnitAndMassUnit)

def Handle_StepBasic_SiUnitAndMassUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndMassUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_DownCast

class StepBasic_SiUnitAndPlaneAngleUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndPlaneAngleUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndPlaneAngleUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_Init(self, *args)


    def SetPlaneAngleUnit(self, *args):
        """
        :param aPlaneAngleUnit:
        :type aPlaneAngleUnit: Handle_StepBasic_PlaneAngleUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_SetPlaneAngleUnit(self, *args)


    def PlaneAngleUnit(self, *args):
        """
        :rtype: Handle_StepBasic_PlaneAngleUnit

        """
        return _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_PlaneAngleUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndPlaneAngleUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndPlaneAngleUnit
StepBasic_SiUnitAndPlaneAngleUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_Init, None, StepBasic_SiUnitAndPlaneAngleUnit)
StepBasic_SiUnitAndPlaneAngleUnit.SetPlaneAngleUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_SetPlaneAngleUnit, None, StepBasic_SiUnitAndPlaneAngleUnit)
StepBasic_SiUnitAndPlaneAngleUnit.PlaneAngleUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_PlaneAngleUnit, None, StepBasic_SiUnitAndPlaneAngleUnit)
StepBasic_SiUnitAndPlaneAngleUnit_swigregister = _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_swigregister
StepBasic_SiUnitAndPlaneAngleUnit_swigregister(StepBasic_SiUnitAndPlaneAngleUnit)

class Handle_StepBasic_SiUnitAndPlaneAngleUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndPlaneAngleUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndPlaneAngleUnit
Handle_StepBasic_SiUnitAndPlaneAngleUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_Nullify, None, Handle_StepBasic_SiUnitAndPlaneAngleUnit)
Handle_StepBasic_SiUnitAndPlaneAngleUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_IsNull, None, Handle_StepBasic_SiUnitAndPlaneAngleUnit)
Handle_StepBasic_SiUnitAndPlaneAngleUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_GetObject, None, Handle_StepBasic_SiUnitAndPlaneAngleUnit)
Handle_StepBasic_SiUnitAndPlaneAngleUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_swigregister
Handle_StepBasic_SiUnitAndPlaneAngleUnit_swigregister(Handle_StepBasic_SiUnitAndPlaneAngleUnit)

def Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast

class StepBasic_SiUnitAndRatioUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndRatioUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndRatioUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndRatioUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndRatioUnit_Init(self, *args)


    def SetRatioUnit(self, *args):
        """
        :param aRatioUnit:
        :type aRatioUnit: Handle_StepBasic_RatioUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndRatioUnit_SetRatioUnit(self, *args)


    def RatioUnit(self, *args):
        """
        :rtype: Handle_StepBasic_RatioUnit

        """
        return _StepBasic.StepBasic_SiUnitAndRatioUnit_RatioUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndRatioUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndRatioUnit
StepBasic_SiUnitAndRatioUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndRatioUnit_Init, None, StepBasic_SiUnitAndRatioUnit)
StepBasic_SiUnitAndRatioUnit.SetRatioUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndRatioUnit_SetRatioUnit, None, StepBasic_SiUnitAndRatioUnit)
StepBasic_SiUnitAndRatioUnit.RatioUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndRatioUnit_RatioUnit, None, StepBasic_SiUnitAndRatioUnit)
StepBasic_SiUnitAndRatioUnit_swigregister = _StepBasic.StepBasic_SiUnitAndRatioUnit_swigregister
StepBasic_SiUnitAndRatioUnit_swigregister(StepBasic_SiUnitAndRatioUnit)

class Handle_StepBasic_SiUnitAndRatioUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndRatioUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndRatioUnit
Handle_StepBasic_SiUnitAndRatioUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_Nullify, None, Handle_StepBasic_SiUnitAndRatioUnit)
Handle_StepBasic_SiUnitAndRatioUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_IsNull, None, Handle_StepBasic_SiUnitAndRatioUnit)
Handle_StepBasic_SiUnitAndRatioUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_GetObject, None, Handle_StepBasic_SiUnitAndRatioUnit)
Handle_StepBasic_SiUnitAndRatioUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_swigregister
Handle_StepBasic_SiUnitAndRatioUnit_swigregister(Handle_StepBasic_SiUnitAndRatioUnit)

def Handle_StepBasic_SiUnitAndRatioUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndRatioUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_DownCast

class StepBasic_SiUnitAndSolidAngleUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndSolidAngleUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndSolidAngleUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_Init(self, *args)


    def SetSolidAngleUnit(self, *args):
        """
        :param aSolidAngleUnit:
        :type aSolidAngleUnit: Handle_StepBasic_SolidAngleUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_SetSolidAngleUnit(self, *args)


    def SolidAngleUnit(self, *args):
        """
        :rtype: Handle_StepBasic_SolidAngleUnit

        """
        return _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_SolidAngleUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndSolidAngleUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndSolidAngleUnit
StepBasic_SiUnitAndSolidAngleUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndSolidAngleUnit_Init, None, StepBasic_SiUnitAndSolidAngleUnit)
StepBasic_SiUnitAndSolidAngleUnit.SetSolidAngleUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndSolidAngleUnit_SetSolidAngleUnit, None, StepBasic_SiUnitAndSolidAngleUnit)
StepBasic_SiUnitAndSolidAngleUnit.SolidAngleUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndSolidAngleUnit_SolidAngleUnit, None, StepBasic_SiUnitAndSolidAngleUnit)
StepBasic_SiUnitAndSolidAngleUnit_swigregister = _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_swigregister
StepBasic_SiUnitAndSolidAngleUnit_swigregister(StepBasic_SiUnitAndSolidAngleUnit)

class Handle_StepBasic_SiUnitAndSolidAngleUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndSolidAngleUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndSolidAngleUnit
Handle_StepBasic_SiUnitAndSolidAngleUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_Nullify, None, Handle_StepBasic_SiUnitAndSolidAngleUnit)
Handle_StepBasic_SiUnitAndSolidAngleUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_IsNull, None, Handle_StepBasic_SiUnitAndSolidAngleUnit)
Handle_StepBasic_SiUnitAndSolidAngleUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_GetObject, None, Handle_StepBasic_SiUnitAndSolidAngleUnit)
Handle_StepBasic_SiUnitAndSolidAngleUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_swigregister
Handle_StepBasic_SiUnitAndSolidAngleUnit_swigregister(Handle_StepBasic_SiUnitAndSolidAngleUnit)

def Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast

class StepBasic_SiUnitAndThermodynamicTemperatureUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndThermodynamicTemperatureUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndThermodynamicTemperatureUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_Init(self, *args)


    def SetThermodynamicTemperatureUnit(self, *args):
        """
        :param aThermodynamicTemperatureUnit:
        :type aThermodynamicTemperatureUnit: Handle_StepBasic_ThermodynamicTemperatureUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_SetThermodynamicTemperatureUnit(self, *args)


    def ThermodynamicTemperatureUnit(self, *args):
        """
        :rtype: Handle_StepBasic_ThermodynamicTemperatureUnit

        """
        return _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_ThermodynamicTemperatureUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndThermodynamicTemperatureUnit
StepBasic_SiUnitAndThermodynamicTemperatureUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_Init, None, StepBasic_SiUnitAndThermodynamicTemperatureUnit)
StepBasic_SiUnitAndThermodynamicTemperatureUnit.SetThermodynamicTemperatureUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_SetThermodynamicTemperatureUnit, None, StepBasic_SiUnitAndThermodynamicTemperatureUnit)
StepBasic_SiUnitAndThermodynamicTemperatureUnit.ThermodynamicTemperatureUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_ThermodynamicTemperatureUnit, None, StepBasic_SiUnitAndThermodynamicTemperatureUnit)
StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister = _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister
StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister(StepBasic_SiUnitAndThermodynamicTemperatureUnit)

class Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_Nullify, None, Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit)
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_IsNull, None, Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit)
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_GetObject, None, Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit)
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister(Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit)

def Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast

class StepBasic_SiUnitAndTimeUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndTimeUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndTimeUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndTimeUnit(*args))

    def Init(self, *args):
        """
        :param aDimensions:
        :type aDimensions: Handle_StepBasic_DimensionalExponents &
        :rtype: void

        :param hasAprefix:
        :type hasAprefix: bool
        :param aPrefix:
        :type aPrefix: StepBasic_SiPrefix
        :param aName:
        :type aName: StepBasic_SiUnitName
        :rtype: void

        """
        return _StepBasic.StepBasic_SiUnitAndTimeUnit_Init(self, *args)


    def SetTimeUnit(self, *args):
        """
        :param aTimeUnit:
        :type aTimeUnit: Handle_StepBasic_TimeUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndTimeUnit_SetTimeUnit(self, *args)


    def TimeUnit(self, *args):
        """
        :rtype: Handle_StepBasic_TimeUnit

        """
        return _StepBasic.StepBasic_SiUnitAndTimeUnit_TimeUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndTimeUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndTimeUnit
StepBasic_SiUnitAndTimeUnit.Init = new_instancemethod(_StepBasic.StepBasic_SiUnitAndTimeUnit_Init, None, StepBasic_SiUnitAndTimeUnit)
StepBasic_SiUnitAndTimeUnit.SetTimeUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndTimeUnit_SetTimeUnit, None, StepBasic_SiUnitAndTimeUnit)
StepBasic_SiUnitAndTimeUnit.TimeUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndTimeUnit_TimeUnit, None, StepBasic_SiUnitAndTimeUnit)
StepBasic_SiUnitAndTimeUnit_swigregister = _StepBasic.StepBasic_SiUnitAndTimeUnit_swigregister
StepBasic_SiUnitAndTimeUnit_swigregister(StepBasic_SiUnitAndTimeUnit)

class Handle_StepBasic_SiUnitAndTimeUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndTimeUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndTimeUnit
Handle_StepBasic_SiUnitAndTimeUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_Nullify, None, Handle_StepBasic_SiUnitAndTimeUnit)
Handle_StepBasic_SiUnitAndTimeUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_IsNull, None, Handle_StepBasic_SiUnitAndTimeUnit)
Handle_StepBasic_SiUnitAndTimeUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_GetObject, None, Handle_StepBasic_SiUnitAndTimeUnit)
Handle_StepBasic_SiUnitAndTimeUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_swigregister
Handle_StepBasic_SiUnitAndTimeUnit_swigregister(Handle_StepBasic_SiUnitAndTimeUnit)

def Handle_StepBasic_SiUnitAndTimeUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndTimeUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_DownCast

class StepBasic_SiUnitAndVolumeUnit(StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SiUnitAndVolumeUnit

        :rtype: None

        """
        _StepBasic.StepBasic_SiUnitAndVolumeUnit_swiginit(self, _StepBasic.new_StepBasic_SiUnitAndVolumeUnit(*args))

    def SetVolumeUnit(self, *args):
        """
        :param aVolumeUnit:
        :type aVolumeUnit: Handle_StepBasic_VolumeUnit &
        :rtype: None

        """
        return _StepBasic.StepBasic_SiUnitAndVolumeUnit_SetVolumeUnit(self, *args)


    def VolumeUnit(self, *args):
        """
        :rtype: Handle_StepBasic_VolumeUnit

        """
        return _StepBasic.StepBasic_SiUnitAndVolumeUnit_VolumeUnit(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepBasic_SiUnitAndVolumeUnit(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndVolumeUnit
StepBasic_SiUnitAndVolumeUnit.SetVolumeUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndVolumeUnit_SetVolumeUnit, None, StepBasic_SiUnitAndVolumeUnit)
StepBasic_SiUnitAndVolumeUnit.VolumeUnit = new_instancemethod(_StepBasic.StepBasic_SiUnitAndVolumeUnit_VolumeUnit, None, StepBasic_SiUnitAndVolumeUnit)
StepBasic_SiUnitAndVolumeUnit_swigregister = _StepBasic.StepBasic_SiUnitAndVolumeUnit_swigregister
StepBasic_SiUnitAndVolumeUnit_swigregister(StepBasic_SiUnitAndVolumeUnit)

class Handle_StepBasic_SiUnitAndVolumeUnit(Handle_StepBasic_SiUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_swiginit(self, _StepBasic.new_Handle_StepBasic_SiUnitAndVolumeUnit(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_DownCast)
    __swig_destroy__ = _StepBasic.delete_Handle_StepBasic_SiUnitAndVolumeUnit
Handle_StepBasic_SiUnitAndVolumeUnit.Nullify = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_Nullify, None, Handle_StepBasic_SiUnitAndVolumeUnit)
Handle_StepBasic_SiUnitAndVolumeUnit.IsNull = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_IsNull, None, Handle_StepBasic_SiUnitAndVolumeUnit)
Handle_StepBasic_SiUnitAndVolumeUnit.GetObject = new_instancemethod(_StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_GetObject, None, Handle_StepBasic_SiUnitAndVolumeUnit)
Handle_StepBasic_SiUnitAndVolumeUnit_swigregister = _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_swigregister
Handle_StepBasic_SiUnitAndVolumeUnit_swigregister(Handle_StepBasic_SiUnitAndVolumeUnit)

def Handle_StepBasic_SiUnitAndVolumeUnit_DownCast(AnObject):
    return _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_DownCast(AnObject)
Handle_StepBasic_SiUnitAndVolumeUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_DownCast



