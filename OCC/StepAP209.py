# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepAP209.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP209', [dirname(__file__)])
        except ImportError:
            import _StepAP209
            return _StepAP209
        if fp is not None:
            try:
                _mod = imp.load_module('_StepAP209', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StepAP209 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP209
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP209.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepAP209.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepAP209.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepAP209.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepAP209.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepAP209.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepAP209.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepAP209.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepAP209.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepAP209.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepAP209.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepAP209.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepAP209.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepAP209.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepAP209.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepAP209.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepAP209.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepAP209.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.STEPConstruct
import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.StepRepr
import OCC.StepBasic
import OCC.TColStd
import OCC.Interface
import OCC.Message
import OCC.StepShape
import OCC.StepGeom
import OCC.StepAP203
import OCC.XSControl
import OCC.IFSelect
import OCC.Dico
import OCC.TopTools
import OCC.Quantity

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class StepAP209_Construct(OCC.STEPConstruct.STEPConstruct_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty tool

        :rtype: None

        * Creates a tool and initializes it

        :param WS:
        :type WS: Handle_XSControl_WorkSession &
        :rtype: None

        """
        _StepAP209.StepAP209_Construct_swiginit(self, _StepAP209.new_StepAP209_Construct(*args))

    def Init(self, *args):
        """
        * Initializes tool; returns True if succeeded

        :param WS:
        :type WS: Handle_XSControl_WorkSession &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_Init(self, *args)


    def IsDesing(self, *args):
        """
        :param PD:
        :type PD: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_IsDesing(self, *args)


    def IsAnalys(self, *args):
        """
        :param PD:
        :type PD: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_IsAnalys(self, *args)


    def GetFeaAxis2Placement3d(self, *args):
        """
        :param theFeaModel:
        :type theFeaModel: Handle_StepFEA_FeaModel &
        :rtype: Handle_StepFEA_FeaAxis2Placement3d

        """
        return _StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d(self, *args)


    def NominShape(self, *args):
        """
        :param Prod:
        :type Prod: Handle_StepBasic_Product &
        :rtype: Handle_StepShape_ShapeRepresentation

        :param PDF:
        :type PDF: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: Handle_StepShape_ShapeRepresentation

        """
        return _StepAP209.StepAP209_Construct_NominShape(self, *args)


    def GetElementMaterial(self, *args):
        """
        :rtype: Handle_StepElement_HSequenceOfElementMaterial

        """
        return _StepAP209.StepAP209_Construct_GetElementMaterial(self, *args)


    def GetElemGeomRelat(self, *args):
        """
        :rtype: Handle_StepFEA_HSequenceOfElementGeometricRelationship

        """
        return _StepAP209.StepAP209_Construct_GetElemGeomRelat(self, *args)


    def GetElements1D(self, *args):
        """
        :param theFeaModel:
        :type theFeaModel: Handle_StepFEA_FeaModel &
        :rtype: Handle_StepFEA_HSequenceOfElementRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetElements1D(self, *args)


    def GetElements2D(self, *args):
        """
        :param theFEAModel:
        :type theFEAModel: Handle_StepFEA_FeaModel &
        :rtype: Handle_StepFEA_HSequenceOfElementRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetElements2D(self, *args)


    def GetElements3D(self, *args):
        """
        :param theFEAModel:
        :type theFEAModel: Handle_StepFEA_FeaModel &
        :rtype: Handle_StepFEA_HSequenceOfElementRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetElements3D(self, *args)


    def GetCurElemSection(self, *args):
        """
        * Getting list of curve_element_section_definitions for given element_representation

        :param ElemRepr:
        :type ElemRepr: Handle_StepFEA_Curve3dElementRepresentation &
        :rtype: Handle_StepElement_HSequenceOfCurveElementSectionDefinition

        """
        return _StepAP209.StepAP209_Construct_GetCurElemSection(self, *args)


    def GetShReprForElem(self, *args):
        """
        :param ElemRepr:
        :type ElemRepr: Handle_StepFEA_ElementRepresentation &
        :rtype: Handle_StepShape_ShapeRepresentation

        """
        return _StepAP209.StepAP209_Construct_GetShReprForElem(self, *args)


    def CreateAnalysStructure(self, *args):
        """
        * Create empty structure for idealized_analysis_shape

        :param Prod:
        :type Prod: Handle_StepBasic_Product &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_CreateAnalysStructure(self, *args)


    def CreateFeaStructure(self, *args):
        """
        * Create fea structure

        :param Prod:
        :type Prod: Handle_StepBasic_Product &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_CreateFeaStructure(self, *args)


    def ReplaceCcDesingToApplied(self, *args):
        """
        * Put into model entities Applied... for AP209 instead of entities CcDesing... from AP203.

        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied(self, *args)


    def CreateAddingEntities(self, *args):
        """
        * Create approval.. , date.. , time.. , person.. and organization.. entities for analysis structure

        :param AnaPD:
        :type AnaPD: Handle_StepBasic_ProductDefinition &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_CreateAddingEntities(self, *args)


    def CreateAP203Structure(self, *args):
        """
        * Create AP203 structure from existing AP209 structure

        :rtype: Handle_StepData_StepModel

        """
        return _StepAP209.StepAP209_Construct_CreateAP203Structure(self, *args)


    def CreateAdding203Entities(self, *args):
        """
        * Create approval.. , date.. , time.. , person.. and organization.. entities for 203 structure

        :param PD:
        :type PD: Handle_StepBasic_ProductDefinition &
        :param aModel:
        :type aModel: Handle_StepData_StepModel &
        :rtype: bool

        """
        return _StepAP209.StepAP209_Construct_CreateAdding203Entities(self, *args)


    def FeaModel(self, *args):
        """
        :param Prod:
        :type Prod: Handle_StepBasic_Product &
        :rtype: Handle_StepFEA_FeaModel

        :param PDF:
        :type PDF: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: Handle_StepFEA_FeaModel

        :param PDS:
        :type PDS: Handle_StepRepr_ProductDefinitionShape &
        :rtype: Handle_StepFEA_FeaModel

        :param PD:
        :type PD: Handle_StepBasic_ProductDefinition &
        :rtype: Handle_StepFEA_FeaModel

        """
        return _StepAP209.StepAP209_Construct_FeaModel(self, *args)


    def IdealShape(self, *args):
        """
        :param Prod:
        :type Prod: Handle_StepBasic_Product &
        :rtype: Handle_StepShape_ShapeRepresentation

        :param PDF:
        :type PDF: Handle_StepBasic_ProductDefinitionFormation &
        :rtype: Handle_StepShape_ShapeRepresentation

        :param PD:
        :type PD: Handle_StepBasic_ProductDefinition &
        :rtype: Handle_StepShape_ShapeRepresentation

        :param PDS:
        :type PDS: Handle_StepRepr_ProductDefinitionShape &
        :rtype: Handle_StepShape_ShapeRepresentation

        """
        return _StepAP209.StepAP209_Construct_IdealShape(self, *args)

    __swig_destroy__ = _StepAP209.delete_StepAP209_Construct
StepAP209_Construct.Init = new_instancemethod(_StepAP209.StepAP209_Construct_Init, None, StepAP209_Construct)
StepAP209_Construct.IsDesing = new_instancemethod(_StepAP209.StepAP209_Construct_IsDesing, None, StepAP209_Construct)
StepAP209_Construct.IsAnalys = new_instancemethod(_StepAP209.StepAP209_Construct_IsAnalys, None, StepAP209_Construct)
StepAP209_Construct.GetFeaAxis2Placement3d = new_instancemethod(_StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d, None, StepAP209_Construct)
StepAP209_Construct.NominShape = new_instancemethod(_StepAP209.StepAP209_Construct_NominShape, None, StepAP209_Construct)
StepAP209_Construct.GetElementMaterial = new_instancemethod(_StepAP209.StepAP209_Construct_GetElementMaterial, None, StepAP209_Construct)
StepAP209_Construct.GetElemGeomRelat = new_instancemethod(_StepAP209.StepAP209_Construct_GetElemGeomRelat, None, StepAP209_Construct)
StepAP209_Construct.GetElements1D = new_instancemethod(_StepAP209.StepAP209_Construct_GetElements1D, None, StepAP209_Construct)
StepAP209_Construct.GetElements2D = new_instancemethod(_StepAP209.StepAP209_Construct_GetElements2D, None, StepAP209_Construct)
StepAP209_Construct.GetElements3D = new_instancemethod(_StepAP209.StepAP209_Construct_GetElements3D, None, StepAP209_Construct)
StepAP209_Construct.GetCurElemSection = new_instancemethod(_StepAP209.StepAP209_Construct_GetCurElemSection, None, StepAP209_Construct)
StepAP209_Construct.GetShReprForElem = new_instancemethod(_StepAP209.StepAP209_Construct_GetShReprForElem, None, StepAP209_Construct)
StepAP209_Construct.CreateAnalysStructure = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAnalysStructure, None, StepAP209_Construct)
StepAP209_Construct.CreateFeaStructure = new_instancemethod(_StepAP209.StepAP209_Construct_CreateFeaStructure, None, StepAP209_Construct)
StepAP209_Construct.ReplaceCcDesingToApplied = new_instancemethod(_StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied, None, StepAP209_Construct)
StepAP209_Construct.CreateAddingEntities = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAddingEntities, None, StepAP209_Construct)
StepAP209_Construct.CreateAP203Structure = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAP203Structure, None, StepAP209_Construct)
StepAP209_Construct.CreateAdding203Entities = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAdding203Entities, None, StepAP209_Construct)
StepAP209_Construct.FeaModel = new_instancemethod(_StepAP209.StepAP209_Construct_FeaModel, None, StepAP209_Construct)
StepAP209_Construct.IdealShape = new_instancemethod(_StepAP209.StepAP209_Construct_IdealShape, None, StepAP209_Construct)
StepAP209_Construct_swigregister = _StepAP209.StepAP209_Construct_swigregister
StepAP209_Construct_swigregister(StepAP209_Construct)



