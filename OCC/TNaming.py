# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TNaming.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TNaming', [dirname(__file__)])
        except ImportError:
            import _TNaming
            return _TNaming
        if fp is not None:
            try:
                _mod = imp.load_module('_TNaming', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TNaming = swig_import_helper()
    del swig_import_helper
else:
    import _TNaming
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TNaming.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TNaming.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TNaming.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TNaming.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TNaming.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TNaming.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TNaming.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TNaming.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TNaming.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TNaming.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TNaming.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TNaming.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TNaming.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TNaming.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TNaming.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TNaming.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TNaming.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TDF
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.TopTools
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Message

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass


_TNaming.TNaming_PRIMITIVE_swigconstant(_TNaming)
TNaming_PRIMITIVE = _TNaming.TNaming_PRIMITIVE

_TNaming.TNaming_GENERATED_swigconstant(_TNaming)
TNaming_GENERATED = _TNaming.TNaming_GENERATED

_TNaming.TNaming_MODIFY_swigconstant(_TNaming)
TNaming_MODIFY = _TNaming.TNaming_MODIFY

_TNaming.TNaming_DELETE_swigconstant(_TNaming)
TNaming_DELETE = _TNaming.TNaming_DELETE

_TNaming.TNaming_REPLACE_swigconstant(_TNaming)
TNaming_REPLACE = _TNaming.TNaming_REPLACE

_TNaming.TNaming_SELECTED_swigconstant(_TNaming)
TNaming_SELECTED = _TNaming.TNaming_SELECTED

_TNaming.TNaming_UNKNOWN_swigconstant(_TNaming)
TNaming_UNKNOWN = _TNaming.TNaming_UNKNOWN

_TNaming.TNaming_IDENTITY_swigconstant(_TNaming)
TNaming_IDENTITY = _TNaming.TNaming_IDENTITY

_TNaming.TNaming_MODIFUNTIL_swigconstant(_TNaming)
TNaming_MODIFUNTIL = _TNaming.TNaming_MODIFUNTIL

_TNaming.TNaming_GENERATION_swigconstant(_TNaming)
TNaming_GENERATION = _TNaming.TNaming_GENERATION

_TNaming.TNaming_INTERSECTION_swigconstant(_TNaming)
TNaming_INTERSECTION = _TNaming.TNaming_INTERSECTION

_TNaming.TNaming_UNION_swigconstant(_TNaming)
TNaming_UNION = _TNaming.TNaming_UNION

_TNaming.TNaming_SUBSTRACTION_swigconstant(_TNaming)
TNaming_SUBSTRACTION = _TNaming.TNaming_SUBSTRACTION

_TNaming.TNaming_CONSTSHAPE_swigconstant(_TNaming)
TNaming_CONSTSHAPE = _TNaming.TNaming_CONSTSHAPE

_TNaming.TNaming_FILTERBYNEIGHBOURGS_swigconstant(_TNaming)
TNaming_FILTERBYNEIGHBOURGS = _TNaming.TNaming_FILTERBYNEIGHBOURGS

_TNaming.TNaming_ORIENTATION_swigconstant(_TNaming)
TNaming_ORIENTATION = _TNaming.TNaming_ORIENTATION

_TNaming.TNaming_WIREIN_swigconstant(_TNaming)
TNaming_WIREIN = _TNaming.TNaming_WIREIN

_TNaming.TNaming_SHELLIN_swigconstant(_TNaming)
TNaming_SHELLIN = _TNaming.TNaming_SHELLIN
class tnaming(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Substitute(*args):
        """
        * Subtituter les shapes sur les structures de source vers cible

        :param labelsource:
        :type labelsource: TDF_Label &
        :param labelcible:
        :type labelcible: TDF_Label &
        :param mapOldNew:
        :type mapOldNew: TopTools_DataMapOfShapeShape &
        :rtype: void

        """
        return _TNaming.tnaming_Substitute(*args)

    Substitute = staticmethod(Substitute)

    def Update(*args):
        """
        * Mise a jour des shapes du label et de ses fils en tenant compte des substitutions decrite par mapOldNew. Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.

        :param label:
        :type label: TDF_Label &
        :param mapOldNew:
        :type mapOldNew: TopTools_DataMapOfShapeShape &
        :rtype: void

        """
        return _TNaming.tnaming_Update(*args)

    Update = staticmethod(Update)

    def Displace(*args):
        """
        * Application de la Location sur les shapes du label et de ses sous labels.

        :param label:
        :type label: TDF_Label &
        :param aLocation:
        :type aLocation: TopLoc_Location &
        :param WithOld: default value is Standard_True
        :type WithOld: bool
        :rtype: void

        """
        return _TNaming.tnaming_Displace(*args)

    Displace = staticmethod(Displace)

    def ChangeShapes(*args):
        """
        * Remplace les shapes du label et des sous-labels par des copies.

        :param label:
        :type label: TDF_Label &
        :param M:
        :type M: TopTools_DataMapOfShapeShape &
        :rtype: void

        """
        return _TNaming.tnaming_ChangeShapes(*args)

    ChangeShapes = staticmethod(ChangeShapes)

    def Transform(*args):
        """
        * Application de la transformation sur les shapes du label et de ses sous labels. Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.

        :param label:
        :type label: TDF_Label &
        :param aTransformation:
        :type aTransformation: gp_Trsf
        :rtype: void

        """
        return _TNaming.tnaming_Transform(*args)

    Transform = staticmethod(Transform)

    def Replicate(*args):
        """
        * Replicates the named shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param T:
        :type T: gp_Trsf
        :param L:
        :type L: TDF_Label &
        :rtype: void

        * Replicates the shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)

        :param SH:
        :type SH: TopoDS_Shape &
        :param T:
        :type T: gp_Trsf
        :param L:
        :type L: TDF_Label &
        :rtype: void

        """
        return _TNaming.tnaming_Replicate(*args)

    Replicate = staticmethod(Replicate)

    def MakeShape(*args):
        """
        * Builds shape from map content

        :param MS:
        :type MS: TopTools_MapOfShape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.tnaming_MakeShape(*args)

    MakeShape = staticmethod(MakeShape)

    def FindUniqueContext(*args):
        """
        * Find unique context of shape <S>

        :param S:
        :type S: TopoDS_Shape &
        :param Context:
        :type Context: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.tnaming_FindUniqueContext(*args)

    FindUniqueContext = staticmethod(FindUniqueContext)

    def FindUniqueContextSet(*args):
        """
        * Find unique context of shape <S>,which is pure concatenation of atomic shapes (Compound). The result is concatenation of single contexts

        :param S:
        :type S: TopoDS_Shape &
        :param Context:
        :type Context: TopoDS_Shape &
        :param Arr:
        :type Arr: Handle_TopTools_HArray1OfShape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.tnaming_FindUniqueContextSet(*args)

    FindUniqueContextSet = staticmethod(FindUniqueContextSet)

    def SubstituteSShape(*args):
        """
        * Subtitutes shape in source structure

        :param accesslabel:
        :type accesslabel: TDF_Label &
        :param From:
        :type From: TopoDS_Shape &
        :param To:
        :type To: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.tnaming_SubstituteSShape(*args)

    SubstituteSShape = staticmethod(SubstituteSShape)

    def OuterWire(*args):
        """
        * Returns True if outer wire is found and the found wire in <theWire>.

        :param theFace:
        :type theFace: TopoDS_Face &
        :param theWire:
        :type theWire: TopoDS_Wire &
        :rtype: bool

        """
        return _TNaming.tnaming_OuterWire(*args)

    OuterWire = staticmethod(OuterWire)

    def OuterShell(*args):
        """
        * Returns True if outer Shell is found and the found shell in <theShell>. Print of TNaming enumeration =============================

        :param theSolid:
        :type theSolid: TopoDS_Solid &
        :param theShell:
        :type theShell: TopoDS_Shell &
        :rtype: bool

        """
        return _TNaming.tnaming_OuterShell(*args)

    OuterShell = staticmethod(OuterShell)

    def IDList(*args):
        """
        * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: void

        """
        return _TNaming.tnaming_IDList(*args)

    IDList = staticmethod(IDList)

    def Print(*args):
        """
        * Prints the evolution <EVOL> as a String on the Stream <S> and returns <S>.

        :param EVOL:
        :type EVOL: TNaming_Evolution
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        * Prints the name of name type <NAME> as a String on the Stream <S> and returns <S>.

        :param NAME:
        :type NAME: TNaming_NameType
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        * Prints the content of UsedShapes private attribute as a String Table on the Stream <S> and returns <S>.

        :param ACCESS:
        :type ACCESS: TDF_Label &
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        """
        return _TNaming.tnaming_Print(*args)

    Print = staticmethod(Print)

    def __init__(self):
        _TNaming.tnaming_swiginit(self, _TNaming.new_tnaming())
    __swig_destroy__ = _TNaming.delete_tnaming
tnaming_swigregister = _TNaming.tnaming_swigregister
tnaming_swigregister(tnaming)

def tnaming_Substitute(*args):
    """
    * Subtituter les shapes sur les structures de source vers cible

    :param labelsource:
    :type labelsource: TDF_Label &
    :param labelcible:
    :type labelcible: TDF_Label &
    :param mapOldNew:
    :type mapOldNew: TopTools_DataMapOfShapeShape &
    :rtype: void

    """
    return _TNaming.tnaming_Substitute(*args)

def tnaming_Update(*args):
    """
    * Mise a jour des shapes du label et de ses fils en tenant compte des substitutions decrite par mapOldNew. Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.

    :param label:
    :type label: TDF_Label &
    :param mapOldNew:
    :type mapOldNew: TopTools_DataMapOfShapeShape &
    :rtype: void

    """
    return _TNaming.tnaming_Update(*args)

def tnaming_Displace(*args):
    """
    * Application de la Location sur les shapes du label et de ses sous labels.

    :param label:
    :type label: TDF_Label &
    :param aLocation:
    :type aLocation: TopLoc_Location &
    :param WithOld: default value is Standard_True
    :type WithOld: bool
    :rtype: void

    """
    return _TNaming.tnaming_Displace(*args)

def tnaming_ChangeShapes(*args):
    """
    * Remplace les shapes du label et des sous-labels par des copies.

    :param label:
    :type label: TDF_Label &
    :param M:
    :type M: TopTools_DataMapOfShapeShape &
    :rtype: void

    """
    return _TNaming.tnaming_ChangeShapes(*args)

def tnaming_Transform(*args):
    """
    * Application de la transformation sur les shapes du label et de ses sous labels. Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.

    :param label:
    :type label: TDF_Label &
    :param aTransformation:
    :type aTransformation: gp_Trsf
    :rtype: void

    """
    return _TNaming.tnaming_Transform(*args)

def tnaming_Replicate(*args):
    """
    * Replicates the named shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param T:
    :type T: gp_Trsf
    :param L:
    :type L: TDF_Label &
    :rtype: void

    * Replicates the shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)

    :param SH:
    :type SH: TopoDS_Shape &
    :param T:
    :type T: gp_Trsf
    :param L:
    :type L: TDF_Label &
    :rtype: void

    """
    return _TNaming.tnaming_Replicate(*args)

def tnaming_MakeShape(*args):
    """
    * Builds shape from map content

    :param MS:
    :type MS: TopTools_MapOfShape &
    :rtype: TopoDS_Shape

    """
    return _TNaming.tnaming_MakeShape(*args)

def tnaming_FindUniqueContext(*args):
    """
    * Find unique context of shape <S>

    :param S:
    :type S: TopoDS_Shape &
    :param Context:
    :type Context: TopoDS_Shape &
    :rtype: TopoDS_Shape

    """
    return _TNaming.tnaming_FindUniqueContext(*args)

def tnaming_FindUniqueContextSet(*args):
    """
    * Find unique context of shape <S>,which is pure concatenation of atomic shapes (Compound). The result is concatenation of single contexts

    :param S:
    :type S: TopoDS_Shape &
    :param Context:
    :type Context: TopoDS_Shape &
    :param Arr:
    :type Arr: Handle_TopTools_HArray1OfShape &
    :rtype: TopoDS_Shape

    """
    return _TNaming.tnaming_FindUniqueContextSet(*args)

def tnaming_SubstituteSShape(*args):
    """
    * Subtitutes shape in source structure

    :param accesslabel:
    :type accesslabel: TDF_Label &
    :param From:
    :type From: TopoDS_Shape &
    :param To:
    :type To: TopoDS_Shape &
    :rtype: bool

    """
    return _TNaming.tnaming_SubstituteSShape(*args)

def tnaming_OuterWire(*args):
    """
    * Returns True if outer wire is found and the found wire in <theWire>.

    :param theFace:
    :type theFace: TopoDS_Face &
    :param theWire:
    :type theWire: TopoDS_Wire &
    :rtype: bool

    """
    return _TNaming.tnaming_OuterWire(*args)

def tnaming_OuterShell(*args):
    """
    * Returns True if outer Shell is found and the found shell in <theShell>. Print of TNaming enumeration =============================

    :param theSolid:
    :type theSolid: TopoDS_Solid &
    :param theShell:
    :type theShell: TopoDS_Shell &
    :rtype: bool

    """
    return _TNaming.tnaming_OuterShell(*args)

def tnaming_IDList(*args):
    """
    * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.

    :param anIDList:
    :type anIDList: TDF_IDList &
    :rtype: void

    """
    return _TNaming.tnaming_IDList(*args)

def tnaming_Print(*args):
    """
    * Prints the evolution <EVOL> as a String on the Stream <S> and returns <S>.

    :param EVOL:
    :type EVOL: TNaming_Evolution
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    * Prints the name of name type <NAME> as a String on the Stream <S> and returns <S>.

    :param NAME:
    :type NAME: TNaming_NameType
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    * Prints the content of UsedShapes private attribute as a String Table on the Stream <S> and returns <S>.

    :param ACCESS:
    :type ACCESS: TDF_Label &
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    """
    return _TNaming.tnaming_Print(*args)

class TNaming_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create an Builder. Warning: Before Addition copies the current Value, and clear

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: None

        """
        _TNaming.TNaming_Builder_swiginit(self, _TNaming.new_TNaming_Builder(*args))

    def Generated(self, *args):
        """
        * Records the shape newShape which was generated during a topological construction. As an example, consider the case of a face generated in construction of a box.

        :param newShape:
        :type newShape: TopoDS_Shape &
        :rtype: None

        * Records the shape newShape which was generated from the shape oldShape during a topological construction. As an example, consider the case of a face generated from an edge in construction of a prism.

        :param oldShape:
        :type oldShape: TopoDS_Shape &
        :param newShape:
        :type newShape: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_Builder_Generated(self, *args)


    def Delete(self, *args):
        """
        * Records the shape oldShape which was deleted from the current label. As an example, consider the case of a face removed by a Boolean operation.

        :param oldShape:
        :type oldShape: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_Builder_Delete(self, *args)


    def Modify(self, *args):
        """
        * Records the shape newShape which is a modification of the shape oldShape. As an example, consider the case of a face split or merged in a Boolean operation.

        :param oldShape:
        :type oldShape: TopoDS_Shape &
        :param newShape:
        :type newShape: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_Builder_Modify(self, *args)


    def Select(self, *args):
        """
        * Add a Shape to the current label , This Shape is unmodified. Used for example to define a set of shapes under a label.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param inShape:
        :type inShape: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_Builder_Select(self, *args)


    def NamedShape(self, *args):
        """
        * Returns the NamedShape which has been built or is under construction.

        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Builder_NamedShape(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Builder
TNaming_Builder.Generated = new_instancemethod(_TNaming.TNaming_Builder_Generated, None, TNaming_Builder)
TNaming_Builder.Delete = new_instancemethod(_TNaming.TNaming_Builder_Delete, None, TNaming_Builder)
TNaming_Builder.Modify = new_instancemethod(_TNaming.TNaming_Builder_Modify, None, TNaming_Builder)
TNaming_Builder.Select = new_instancemethod(_TNaming.TNaming_Builder_Select, None, TNaming_Builder)
TNaming_Builder.NamedShape = new_instancemethod(_TNaming.TNaming_Builder_NamedShape, None, TNaming_Builder)
TNaming_Builder_swigregister = _TNaming.TNaming_Builder_swigregister
TNaming_Builder_swigregister(TNaming_Builder)

class TNaming_CopyShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CopyTool(*args):
        """
        * Makes copy a set of shape(s), using the aMap

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param aMap:
        :type aMap: TColStd_IndexedDataMapOfTransientTransient &
        :param aResult:
        :type aResult: TopoDS_Shape &
        :rtype: void

        """
        return _TNaming.TNaming_CopyShape_CopyTool(*args)

    CopyTool = staticmethod(CopyTool)

    def Translate(*args):
        """
        * Translates a Transient shape(s) to Transient

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param aMap:
        :type aMap: TColStd_IndexedDataMapOfTransientTransient &
        :param aResult:
        :type aResult: TopoDS_Shape &
        :param TrTool:
        :type TrTool: Handle_TNaming_TranslateTool &
        :rtype: void

        * Translates a Topological Location to an other Top. Location

        :param L:
        :type L: TopLoc_Location &
        :param aMap:
        :type aMap: TColStd_IndexedDataMapOfTransientTransient &
        :rtype: TopLoc_Location

        """
        return _TNaming.TNaming_CopyShape_Translate(*args)

    Translate = staticmethod(Translate)

    def __init__(self):
        _TNaming.TNaming_CopyShape_swiginit(self, _TNaming.new_TNaming_CopyShape())
    __swig_destroy__ = _TNaming.delete_TNaming_CopyShape
TNaming_CopyShape_swigregister = _TNaming.TNaming_CopyShape_swigregister
TNaming_CopyShape_swigregister(TNaming_CopyShape)

def TNaming_CopyShape_CopyTool(*args):
    """
    * Makes copy a set of shape(s), using the aMap

    :param aShape:
    :type aShape: TopoDS_Shape &
    :param aMap:
    :type aMap: TColStd_IndexedDataMapOfTransientTransient &
    :param aResult:
    :type aResult: TopoDS_Shape &
    :rtype: void

    """
    return _TNaming.TNaming_CopyShape_CopyTool(*args)

def TNaming_CopyShape_Translate(*args):
    """
    * Translates a Transient shape(s) to Transient

    :param aShape:
    :type aShape: TopoDS_Shape &
    :param aMap:
    :type aMap: TColStd_IndexedDataMapOfTransientTransient &
    :param aResult:
    :type aResult: TopoDS_Shape &
    :param TrTool:
    :type TrTool: Handle_TNaming_TranslateTool &
    :rtype: void

    * Translates a Topological Location to an other Top. Location

    :param L:
    :type L: TopLoc_Location &
    :param aMap:
    :type aMap: TColStd_IndexedDataMapOfTransientTransient &
    :rtype: TopLoc_Location

    """
    return _TNaming.TNaming_CopyShape_Translate(*args)

class TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TNaming_DataMapOfShapePtrRefShape &
        :rtype: None

        """
        _TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_swiginit(self, _TNaming.new_TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TNaming_DataMapOfShapePtrRefShape &
        :rtype: None

        """
        return _TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TNaming_PtrRefShape

        """
        return _TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_Value(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape
TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape.Initialize = new_instancemethod(_TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_Initialize, None, TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape)
TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape.Key = new_instancemethod(_TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_Key, None, TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape)
TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape.Value = new_instancemethod(_TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_Value, None, TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape)
TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_swigregister = _TNaming.TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_swigregister
TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape_swigregister(TNaming_DataMapIteratorOfDataMapOfShapePtrRefShape)

class TNaming_DataMapIteratorOfDataMapOfShapeShapesSet(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TNaming_DataMapOfShapeShapesSet &
        :rtype: None

        """
        _TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_swiginit(self, _TNaming.new_TNaming_DataMapIteratorOfDataMapOfShapeShapesSet(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TNaming_DataMapOfShapeShapesSet &
        :rtype: None

        """
        return _TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TNaming_ShapesSet

        """
        return _TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_Value(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_DataMapIteratorOfDataMapOfShapeShapesSet
TNaming_DataMapIteratorOfDataMapOfShapeShapesSet.Initialize = new_instancemethod(_TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_Initialize, None, TNaming_DataMapIteratorOfDataMapOfShapeShapesSet)
TNaming_DataMapIteratorOfDataMapOfShapeShapesSet.Key = new_instancemethod(_TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_Key, None, TNaming_DataMapIteratorOfDataMapOfShapeShapesSet)
TNaming_DataMapIteratorOfDataMapOfShapeShapesSet.Value = new_instancemethod(_TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_Value, None, TNaming_DataMapIteratorOfDataMapOfShapeShapesSet)
TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_swigregister = _TNaming.TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_swigregister
TNaming_DataMapIteratorOfDataMapOfShapeShapesSet_swigregister(TNaming_DataMapIteratorOfDataMapOfShapeShapesSet)

class TNaming_DataMapNodeOfDataMapOfShapePtrRefShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TNaming_PtrRefShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TNaming.TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swiginit(self, _TNaming.new_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TNaming_PtrRefShape

        """
        return _TNaming.TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape
TNaming_DataMapNodeOfDataMapOfShapePtrRefShape.Key = new_instancemethod(_TNaming.TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_Key, None, TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)
TNaming_DataMapNodeOfDataMapOfShapePtrRefShape.Value = new_instancemethod(_TNaming.TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_Value, None, TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)
TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swigregister = _TNaming.TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swigregister
TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swigregister(TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)

class Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swiginit(self, _TNaming.new_Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape
Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape.Nullify = new_instancemethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_Nullify, None, Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)
Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape.IsNull = new_instancemethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_IsNull, None, Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)
Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape.GetObject = new_instancemethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_GetObject, None, Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)
Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swigregister = _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swigregister
Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_swigregister(Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape)

def Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_DownCast(AnObject):
    return _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_DownCast(AnObject)
Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_DownCast = _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapePtrRefShape_DownCast

class TNaming_DataMapNodeOfDataMapOfShapeShapesSet(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TNaming_ShapesSet &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TNaming.TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swiginit(self, _TNaming.new_TNaming_DataMapNodeOfDataMapOfShapeShapesSet(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_DataMapNodeOfDataMapOfShapeShapesSet_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TNaming_ShapesSet

        """
        return _TNaming.TNaming_DataMapNodeOfDataMapOfShapeShapesSet_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_DataMapNodeOfDataMapOfShapeShapesSet
TNaming_DataMapNodeOfDataMapOfShapeShapesSet.Key = new_instancemethod(_TNaming.TNaming_DataMapNodeOfDataMapOfShapeShapesSet_Key, None, TNaming_DataMapNodeOfDataMapOfShapeShapesSet)
TNaming_DataMapNodeOfDataMapOfShapeShapesSet.Value = new_instancemethod(_TNaming.TNaming_DataMapNodeOfDataMapOfShapeShapesSet_Value, None, TNaming_DataMapNodeOfDataMapOfShapeShapesSet)
TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swigregister = _TNaming.TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swigregister
TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swigregister(TNaming_DataMapNodeOfDataMapOfShapeShapesSet)

class Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swiginit(self, _TNaming.new_Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet
Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet.Nullify = new_instancemethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_Nullify, None, Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet)
Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet.IsNull = new_instancemethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_IsNull, None, Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet)
Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet.GetObject = new_instancemethod(_TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_GetObject, None, Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet)
Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swigregister = _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swigregister
Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_swigregister(Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet)

def Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_DownCast(AnObject):
    return _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_DownCast(AnObject)
Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_DownCast = _TNaming.Handle_TNaming_DataMapNodeOfDataMapOfShapeShapesSet_DownCast

class TNaming_DataMapOfShapePtrRefShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TNaming.TNaming_DataMapOfShapePtrRefShape_swiginit(self, _TNaming.new_TNaming_DataMapOfShapePtrRefShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TNaming_DataMapOfShapePtrRefShape &
        :rtype: TNaming_DataMapOfShapePtrRefShape

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TNaming_DataMapOfShapePtrRefShape &
        :rtype: TNaming_DataMapOfShapePtrRefShape

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TNaming_PtrRefShape &
        :rtype: bool

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TNaming_PtrRefShape

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TNaming_PtrRefShape

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _TNaming.TNaming_DataMapOfShapePtrRefShape_ChangeFind1(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_DataMapOfShapePtrRefShape
TNaming_DataMapOfShapePtrRefShape.Assign = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Assign, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Set = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Set, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.ReSize = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_ReSize, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Clear = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Clear, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Bind = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Bind, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.IsBound = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_IsBound, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.UnBind = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_UnBind, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Find = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Find, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.ChangeFind = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_ChangeFind, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Find1 = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Find1, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.ChangeFind1 = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_ChangeFind1, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape_swigregister = _TNaming.TNaming_DataMapOfShapePtrRefShape_swigregister
TNaming_DataMapOfShapePtrRefShape_swigregister(TNaming_DataMapOfShapePtrRefShape)

class TNaming_DataMapOfShapeShapesSet(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TNaming.TNaming_DataMapOfShapeShapesSet_swiginit(self, _TNaming.new_TNaming_DataMapOfShapeShapesSet(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TNaming_DataMapOfShapeShapesSet &
        :rtype: TNaming_DataMapOfShapeShapesSet

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TNaming_DataMapOfShapeShapesSet &
        :rtype: TNaming_DataMapOfShapeShapesSet

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TNaming_ShapesSet &
        :rtype: bool

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TNaming_ShapesSet

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TNaming_ShapesSet

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _TNaming.TNaming_DataMapOfShapeShapesSet_ChangeFind1(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_DataMapOfShapeShapesSet
TNaming_DataMapOfShapeShapesSet.Assign = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Assign, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Set = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Set, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.ReSize = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_ReSize, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Clear = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Clear, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Bind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Bind, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.IsBound = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_IsBound, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.UnBind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_UnBind, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Find = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Find, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.ChangeFind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_ChangeFind, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Find1 = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Find1, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.ChangeFind1 = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_ChangeFind1, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet_swigregister = _TNaming.TNaming_DataMapOfShapeShapesSet_swigregister
TNaming_DataMapOfShapeShapesSet_swigregister(TNaming_DataMapOfShapeShapesSet)

class TNaming_DeltaOnModification(OCC.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: None

        """
        _TNaming.TNaming_DeltaOnModification_swiginit(self, _TNaming.new_TNaming_DeltaOnModification(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_DeltaOnModification(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_DeltaOnModification
TNaming_DeltaOnModification_swigregister = _TNaming.TNaming_DeltaOnModification_swigregister
TNaming_DeltaOnModification_swigregister(TNaming_DeltaOnModification)

class Handle_TNaming_DeltaOnModification(OCC.TDF.Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_DeltaOnModification_swiginit(self, _TNaming.new_Handle_TNaming_DeltaOnModification(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_DeltaOnModification_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_DeltaOnModification
Handle_TNaming_DeltaOnModification.Nullify = new_instancemethod(_TNaming.Handle_TNaming_DeltaOnModification_Nullify, None, Handle_TNaming_DeltaOnModification)
Handle_TNaming_DeltaOnModification.IsNull = new_instancemethod(_TNaming.Handle_TNaming_DeltaOnModification_IsNull, None, Handle_TNaming_DeltaOnModification)
Handle_TNaming_DeltaOnModification.GetObject = new_instancemethod(_TNaming.Handle_TNaming_DeltaOnModification_GetObject, None, Handle_TNaming_DeltaOnModification)
Handle_TNaming_DeltaOnModification_swigregister = _TNaming.Handle_TNaming_DeltaOnModification_swigregister
Handle_TNaming_DeltaOnModification_swigregister(Handle_TNaming_DeltaOnModification)

def Handle_TNaming_DeltaOnModification_DownCast(AnObject):
    return _TNaming.Handle_TNaming_DeltaOnModification_DownCast(AnObject)
Handle_TNaming_DeltaOnModification_DownCast = _TNaming.Handle_TNaming_DeltaOnModification_DownCast

class TNaming_DeltaOnRemoval(OCC.TDF.TDF_DeltaOnRemoval):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: None

        """
        _TNaming.TNaming_DeltaOnRemoval_swiginit(self, _TNaming.new_TNaming_DeltaOnRemoval(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_DeltaOnRemoval(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_DeltaOnRemoval
TNaming_DeltaOnRemoval_swigregister = _TNaming.TNaming_DeltaOnRemoval_swigregister
TNaming_DeltaOnRemoval_swigregister(TNaming_DeltaOnRemoval)

class Handle_TNaming_DeltaOnRemoval(OCC.TDF.Handle_TDF_DeltaOnRemoval):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_DeltaOnRemoval_swiginit(self, _TNaming.new_Handle_TNaming_DeltaOnRemoval(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_DeltaOnRemoval_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_DeltaOnRemoval
Handle_TNaming_DeltaOnRemoval.Nullify = new_instancemethod(_TNaming.Handle_TNaming_DeltaOnRemoval_Nullify, None, Handle_TNaming_DeltaOnRemoval)
Handle_TNaming_DeltaOnRemoval.IsNull = new_instancemethod(_TNaming.Handle_TNaming_DeltaOnRemoval_IsNull, None, Handle_TNaming_DeltaOnRemoval)
Handle_TNaming_DeltaOnRemoval.GetObject = new_instancemethod(_TNaming.Handle_TNaming_DeltaOnRemoval_GetObject, None, Handle_TNaming_DeltaOnRemoval)
Handle_TNaming_DeltaOnRemoval_swigregister = _TNaming.Handle_TNaming_DeltaOnRemoval_swigregister
Handle_TNaming_DeltaOnRemoval_swigregister(Handle_TNaming_DeltaOnRemoval)

def Handle_TNaming_DeltaOnRemoval_DownCast(AnObject):
    return _TNaming.Handle_TNaming_DeltaOnRemoval_DownCast(AnObject)
Handle_TNaming_DeltaOnRemoval_DownCast = _TNaming.Handle_TNaming_DeltaOnRemoval_DownCast

class TNaming_Identifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Lab:
        :type Lab: TDF_Label &
        :param S:
        :type S: TopoDS_Shape &
        :param Context:
        :type Context: TopoDS_Shape &
        :param Geom:
        :type Geom: bool
        :rtype: None

        :param Lab:
        :type Lab: TDF_Label &
        :param S:
        :type S: TopoDS_Shape &
        :param ContextNS:
        :type ContextNS: Handle_TNaming_NamedShape &
        :param Geom:
        :type Geom: bool
        :rtype: None

        """
        _TNaming.TNaming_Identifier_swiginit(self, _TNaming.new_TNaming_Identifier(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_Identifier_IsDone(self, *args)


    def Type(self, *args):
        """
        :rtype: TNaming_NameType

        """
        return _TNaming.TNaming_Identifier_Type(self, *args)


    def IsFeature(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_Identifier_IsFeature(self, *args)


    def Feature(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Identifier_Feature(self, *args)


    def InitArgs(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_Identifier_InitArgs(self, *args)


    def MoreArgs(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_Identifier_MoreArgs(self, *args)


    def NextArg(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_Identifier_NextArg(self, *args)


    def ArgIsFeature(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_Identifier_ArgIsFeature(self, *args)


    def FeatureArg(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Identifier_FeatureArg(self, *args)


    def ShapeArg(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Identifier_ShapeArg(self, *args)


    def ShapeContext(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Identifier_ShapeContext(self, *args)


    def NamedShapeOfGeneration(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Identifier_NamedShapeOfGeneration(self, *args)


    def AncestorIdentification(self, *args):
        """
        :param Localizer:
        :type Localizer: TNaming_Localizer &
        :param Context:
        :type Context: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_Identifier_AncestorIdentification(self, *args)


    def PrimitiveIdentification(self, *args):
        """
        :param Localizer:
        :type Localizer: TNaming_Localizer &
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_Identifier_PrimitiveIdentification(self, *args)


    def GeneratedIdentification(self, *args):
        """
        :param Localizer:
        :type Localizer: TNaming_Localizer &
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_Identifier_GeneratedIdentification(self, *args)


    def Identification(self, *args):
        """
        :param Localizer:
        :type Localizer: TNaming_Localizer &
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_Identifier_Identification(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Identifier
TNaming_Identifier.IsDone = new_instancemethod(_TNaming.TNaming_Identifier_IsDone, None, TNaming_Identifier)
TNaming_Identifier.Type = new_instancemethod(_TNaming.TNaming_Identifier_Type, None, TNaming_Identifier)
TNaming_Identifier.IsFeature = new_instancemethod(_TNaming.TNaming_Identifier_IsFeature, None, TNaming_Identifier)
TNaming_Identifier.Feature = new_instancemethod(_TNaming.TNaming_Identifier_Feature, None, TNaming_Identifier)
TNaming_Identifier.InitArgs = new_instancemethod(_TNaming.TNaming_Identifier_InitArgs, None, TNaming_Identifier)
TNaming_Identifier.MoreArgs = new_instancemethod(_TNaming.TNaming_Identifier_MoreArgs, None, TNaming_Identifier)
TNaming_Identifier.NextArg = new_instancemethod(_TNaming.TNaming_Identifier_NextArg, None, TNaming_Identifier)
TNaming_Identifier.ArgIsFeature = new_instancemethod(_TNaming.TNaming_Identifier_ArgIsFeature, None, TNaming_Identifier)
TNaming_Identifier.FeatureArg = new_instancemethod(_TNaming.TNaming_Identifier_FeatureArg, None, TNaming_Identifier)
TNaming_Identifier.ShapeArg = new_instancemethod(_TNaming.TNaming_Identifier_ShapeArg, None, TNaming_Identifier)
TNaming_Identifier.ShapeContext = new_instancemethod(_TNaming.TNaming_Identifier_ShapeContext, None, TNaming_Identifier)
TNaming_Identifier.NamedShapeOfGeneration = new_instancemethod(_TNaming.TNaming_Identifier_NamedShapeOfGeneration, None, TNaming_Identifier)
TNaming_Identifier.AncestorIdentification = new_instancemethod(_TNaming.TNaming_Identifier_AncestorIdentification, None, TNaming_Identifier)
TNaming_Identifier.PrimitiveIdentification = new_instancemethod(_TNaming.TNaming_Identifier_PrimitiveIdentification, None, TNaming_Identifier)
TNaming_Identifier.GeneratedIdentification = new_instancemethod(_TNaming.TNaming_Identifier_GeneratedIdentification, None, TNaming_Identifier)
TNaming_Identifier.Identification = new_instancemethod(_TNaming.TNaming_Identifier_Identification, None, TNaming_Identifier)
TNaming_Identifier_swigregister = _TNaming.TNaming_Identifier_swigregister
TNaming_Identifier_swigregister(TNaming_Identifier)

class TNaming_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Iterates on all the history records in <anAtt>.

        :param anAtt:
        :type anAtt: Handle_TNaming_NamedShape &
        :rtype: None

        * Iterates on all the history records in the current transaction

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: None

        * Iterates on all the history records in the transaction <aTrans>

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aTrans:
        :type aTrans: int
        :rtype: None

        """
        _TNaming.TNaming_Iterator_swiginit(self, _TNaming.new_TNaming_Iterator(*args))

    def More(self, *args):
        """
        * Returns True if there is a current Item in the iteration.

        :rtype: bool

        """
        return _TNaming.TNaming_Iterator_More(self, *args)


    def Next(self, *args):
        """
        * Moves the iteration to the next Item

        :rtype: None

        """
        return _TNaming.TNaming_Iterator_Next(self, *args)


    def OldShape(self, *args):
        """
        * Returns the old shape in this iterator object. This shape can be a null one.

        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Iterator_OldShape(self, *args)


    def NewShape(self, *args):
        """
        * Returns the new shape in this iterator object.

        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Iterator_NewShape(self, *args)


    def IsModification(self, *args):
        """
        * Returns true if the new shape is a modification (split, fuse,etc...) of the old shape.

        :rtype: bool

        """
        return _TNaming.TNaming_Iterator_IsModification(self, *args)


    def Evolution(self, *args):
        """
        :rtype: TNaming_Evolution

        """
        return _TNaming.TNaming_Iterator_Evolution(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Iterator
TNaming_Iterator.More = new_instancemethod(_TNaming.TNaming_Iterator_More, None, TNaming_Iterator)
TNaming_Iterator.Next = new_instancemethod(_TNaming.TNaming_Iterator_Next, None, TNaming_Iterator)
TNaming_Iterator.OldShape = new_instancemethod(_TNaming.TNaming_Iterator_OldShape, None, TNaming_Iterator)
TNaming_Iterator.NewShape = new_instancemethod(_TNaming.TNaming_Iterator_NewShape, None, TNaming_Iterator)
TNaming_Iterator.IsModification = new_instancemethod(_TNaming.TNaming_Iterator_IsModification, None, TNaming_Iterator)
TNaming_Iterator.Evolution = new_instancemethod(_TNaming.TNaming_Iterator_Evolution, None, TNaming_Iterator)
TNaming_Iterator_swigregister = _TNaming.TNaming_Iterator_swigregister
TNaming_Iterator_swigregister(TNaming_Iterator)

class TNaming_IteratorOnShapesSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TNaming_ShapesSet &
        :rtype: None

        """
        _TNaming.TNaming_IteratorOnShapesSet_swiginit(self, _TNaming.new_TNaming_IteratorOnShapesSet(*args))

    def Init(self, *args):
        """
        * Initialize the iteration

        :param S:
        :type S: TNaming_ShapesSet &
        :rtype: None

        """
        return _TNaming.TNaming_IteratorOnShapesSet_Init(self, *args)


    def More(self, *args):
        """
        * Returns True if there is a current Item in the iteration.

        :rtype: bool

        """
        return _TNaming.TNaming_IteratorOnShapesSet_More(self, *args)


    def Next(self, *args):
        """
        * Move to the next Item

        :rtype: None

        """
        return _TNaming.TNaming_IteratorOnShapesSet_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_IteratorOnShapesSet_Value(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_IteratorOnShapesSet
TNaming_IteratorOnShapesSet.Init = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_Init, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet.More = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_More, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet.Next = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_Next, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet.Value = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_Value, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet_swigregister = _TNaming.TNaming_IteratorOnShapesSet_swigregister
TNaming_IteratorOnShapesSet_swigregister(TNaming_IteratorOnShapesSet)

class TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swiginit(self, _TNaming.new_TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_IndexedDataMapOfShapeListOfShape

        """
        return _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Value(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.Initialize = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Initialize, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.More = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_More, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.Next = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Next, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.Value = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Value, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swigregister = _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swigregister
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swigregister(TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)

class TNaming_ListIteratorOfListOfMapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TNaming_ListOfMapOfShape &
        :rtype: None

        """
        _TNaming.TNaming_ListIteratorOfListOfMapOfShape_swiginit(self, _TNaming.new_TNaming_ListIteratorOfListOfMapOfShape(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: TNaming_ListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListIteratorOfListOfMapOfShape_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ListIteratorOfListOfMapOfShape_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListIteratorOfListOfMapOfShape_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_ListIteratorOfListOfMapOfShape_Value(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ListIteratorOfListOfMapOfShape
TNaming_ListIteratorOfListOfMapOfShape.Initialize = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_Initialize, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape.More = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_More, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape.Next = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_Next, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape.Value = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_Value, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape_swigregister = _TNaming.TNaming_ListIteratorOfListOfMapOfShape_swigregister
TNaming_ListIteratorOfListOfMapOfShape_swigregister(TNaming_ListIteratorOfListOfMapOfShape)

class TNaming_ListIteratorOfListOfNamedShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TNaming_ListOfNamedShape &
        :rtype: None

        """
        _TNaming.TNaming_ListIteratorOfListOfNamedShape_swiginit(self, _TNaming.new_TNaming_ListIteratorOfListOfNamedShape(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: TNaming_ListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListIteratorOfListOfNamedShape_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ListIteratorOfListOfNamedShape_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListIteratorOfListOfNamedShape_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_ListIteratorOfListOfNamedShape_Value(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ListIteratorOfListOfNamedShape
TNaming_ListIteratorOfListOfNamedShape.Initialize = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_Initialize, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape.More = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_More, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape.Next = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_Next, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape.Value = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_Value, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape_swigregister = _TNaming.TNaming_ListIteratorOfListOfNamedShape_swigregister
TNaming_ListIteratorOfListOfNamedShape_swigregister(TNaming_ListIteratorOfListOfNamedShape)

class TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TNaming.TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swiginit(self, _TNaming.new_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape(*args))

    def Value(self, *args):
        """
        :rtype: TopTools_IndexedDataMapOfShapeListOfShape

        """
        return _TNaming.TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape
TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape.Value = new_instancemethod(_TNaming.TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_Value, None, TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swigregister = _TNaming.TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swigregister
TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swigregister(TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape)

class Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swiginit(self, _TNaming.new_Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape
Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape.Nullify = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_Nullify, None, Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape)
Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape.IsNull = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_IsNull, None, Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape)
Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape.GetObject = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_GetObject, None, Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape)
Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swigregister = _TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swigregister
Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_swigregister(Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape)

def Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_DownCast(AnObject):
    return _TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_DownCast(AnObject)
Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_DownCast = _TNaming.Handle_TNaming_ListNodeOfListOfIndexedDataMapOfShapeListOfShape_DownCast

class TNaming_ListNodeOfListOfMapOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TopTools_MapOfShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TNaming.TNaming_ListNodeOfListOfMapOfShape_swiginit(self, _TNaming.new_TNaming_ListNodeOfListOfMapOfShape(*args))

    def Value(self, *args):
        """
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_ListNodeOfListOfMapOfShape_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_ListNodeOfListOfMapOfShape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_ListNodeOfListOfMapOfShape
TNaming_ListNodeOfListOfMapOfShape.Value = new_instancemethod(_TNaming.TNaming_ListNodeOfListOfMapOfShape_Value, None, TNaming_ListNodeOfListOfMapOfShape)
TNaming_ListNodeOfListOfMapOfShape_swigregister = _TNaming.TNaming_ListNodeOfListOfMapOfShape_swigregister
TNaming_ListNodeOfListOfMapOfShape_swigregister(TNaming_ListNodeOfListOfMapOfShape)

class Handle_TNaming_ListNodeOfListOfMapOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_swiginit(self, _TNaming.new_Handle_TNaming_ListNodeOfListOfMapOfShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_ListNodeOfListOfMapOfShape
Handle_TNaming_ListNodeOfListOfMapOfShape.Nullify = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_Nullify, None, Handle_TNaming_ListNodeOfListOfMapOfShape)
Handle_TNaming_ListNodeOfListOfMapOfShape.IsNull = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_IsNull, None, Handle_TNaming_ListNodeOfListOfMapOfShape)
Handle_TNaming_ListNodeOfListOfMapOfShape.GetObject = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_GetObject, None, Handle_TNaming_ListNodeOfListOfMapOfShape)
Handle_TNaming_ListNodeOfListOfMapOfShape_swigregister = _TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_swigregister
Handle_TNaming_ListNodeOfListOfMapOfShape_swigregister(Handle_TNaming_ListNodeOfListOfMapOfShape)

def Handle_TNaming_ListNodeOfListOfMapOfShape_DownCast(AnObject):
    return _TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_DownCast(AnObject)
Handle_TNaming_ListNodeOfListOfMapOfShape_DownCast = _TNaming.Handle_TNaming_ListNodeOfListOfMapOfShape_DownCast

class TNaming_ListNodeOfListOfNamedShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_TNaming_NamedShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TNaming.TNaming_ListNodeOfListOfNamedShape_swiginit(self, _TNaming.new_TNaming_ListNodeOfListOfNamedShape(*args))

    def Value(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_ListNodeOfListOfNamedShape_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_ListNodeOfListOfNamedShape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_ListNodeOfListOfNamedShape
TNaming_ListNodeOfListOfNamedShape.Value = new_instancemethod(_TNaming.TNaming_ListNodeOfListOfNamedShape_Value, None, TNaming_ListNodeOfListOfNamedShape)
TNaming_ListNodeOfListOfNamedShape_swigregister = _TNaming.TNaming_ListNodeOfListOfNamedShape_swigregister
TNaming_ListNodeOfListOfNamedShape_swigregister(TNaming_ListNodeOfListOfNamedShape)

class Handle_TNaming_ListNodeOfListOfNamedShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_swiginit(self, _TNaming.new_Handle_TNaming_ListNodeOfListOfNamedShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_ListNodeOfListOfNamedShape
Handle_TNaming_ListNodeOfListOfNamedShape.Nullify = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_Nullify, None, Handle_TNaming_ListNodeOfListOfNamedShape)
Handle_TNaming_ListNodeOfListOfNamedShape.IsNull = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_IsNull, None, Handle_TNaming_ListNodeOfListOfNamedShape)
Handle_TNaming_ListNodeOfListOfNamedShape.GetObject = new_instancemethod(_TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_GetObject, None, Handle_TNaming_ListNodeOfListOfNamedShape)
Handle_TNaming_ListNodeOfListOfNamedShape_swigregister = _TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_swigregister
Handle_TNaming_ListNodeOfListOfNamedShape_swigregister(Handle_TNaming_ListNodeOfListOfNamedShape)

def Handle_TNaming_ListNodeOfListOfNamedShape_DownCast(AnObject):
    return _TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_DownCast(AnObject)
Handle_TNaming_ListNodeOfListOfNamedShape_DownCast = _TNaming.Handle_TNaming_ListNodeOfListOfNamedShape_DownCast

class TNaming_ListOfIndexedDataMapOfShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_swiginit(self, _TNaming.new_TNaming_ListOfIndexedDataMapOfShapeListOfShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :rtype: None

        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :param theIt:
        :type theIt: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :rtype: None

        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :param theIt:
        :type theIt: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Append(self, *args)


    def First(self, *args):
        """
        :rtype: TopTools_IndexedDataMapOfShapeListOfShape

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TopTools_IndexedDataMapOfShapeListOfShape

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: TopTools_IndexedDataMapOfShapeListOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfIndexedDataMapOfShapeListOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_InsertAfter(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ListOfIndexedDataMapOfShapeListOfShape
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Assign = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Assign, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Set = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Set, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Extent = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Extent, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Clear = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Clear, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.IsEmpty = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_IsEmpty, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Prepend = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Prepend, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Append = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Append, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.First = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_First, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Last = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Last, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.RemoveFirst = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_RemoveFirst, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Remove = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Remove, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.InsertBefore = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_InsertBefore, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.InsertAfter = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_InsertAfter, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape_swigregister = _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_swigregister
TNaming_ListOfIndexedDataMapOfShapeListOfShape_swigregister(TNaming_ListOfIndexedDataMapOfShapeListOfShape)

class TNaming_ListOfMapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_ListOfMapOfShape_swiginit(self, _TNaming.new_TNaming_ListOfMapOfShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TNaming_ListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TNaming_ListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TNaming.TNaming_ListOfMapOfShape_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ListOfMapOfShape_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: TopTools_MapOfShape &
        :rtype: None

        :param I:
        :type I: TopTools_MapOfShape &
        :param theIt:
        :type theIt: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: TopTools_MapOfShape &
        :rtype: None

        :param I:
        :type I: TopTools_MapOfShape &
        :param theIt:
        :type theIt: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_Append(self, *args)


    def First(self, *args):
        """
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_ListOfMapOfShape_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_ListOfMapOfShape_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: TopTools_MapOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfMapOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: TopTools_MapOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfMapOfShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfMapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfMapOfShape_InsertAfter(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ListOfMapOfShape
TNaming_ListOfMapOfShape.Assign = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Assign, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Set = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Set, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Extent = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Extent, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Clear = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Clear, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.IsEmpty = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_IsEmpty, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Prepend = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Prepend, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Append = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Append, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.First = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_First, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Last = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Last, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.RemoveFirst = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_RemoveFirst, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Remove = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Remove, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.InsertBefore = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_InsertBefore, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.InsertAfter = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_InsertAfter, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape_swigregister = _TNaming.TNaming_ListOfMapOfShape_swigregister
TNaming_ListOfMapOfShape_swigregister(TNaming_ListOfMapOfShape)

class TNaming_ListOfNamedShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_ListOfNamedShape_swiginit(self, _TNaming.new_TNaming_ListOfNamedShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TNaming_ListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TNaming_ListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TNaming.TNaming_ListOfNamedShape_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ListOfNamedShape_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_TNaming_NamedShape &
        :rtype: None

        :param I:
        :type I: Handle_TNaming_NamedShape &
        :param theIt:
        :type theIt: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_TNaming_NamedShape &
        :rtype: None

        :param I:
        :type I: Handle_TNaming_NamedShape &
        :param theIt:
        :type theIt: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_ListOfNamedShape_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_ListOfNamedShape_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_TNaming_NamedShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfNamedShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_TNaming_NamedShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        :param Other:
        :type Other: TNaming_ListOfNamedShape &
        :param It:
        :type It: TNaming_ListIteratorOfListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_ListOfNamedShape_InsertAfter(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ListOfNamedShape
TNaming_ListOfNamedShape.Assign = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Assign, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Set = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Set, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Extent = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Extent, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Clear = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Clear, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.IsEmpty = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_IsEmpty, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Prepend = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Prepend, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Append = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Append, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.First = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_First, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Last = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Last, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.RemoveFirst = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_RemoveFirst, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Remove = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Remove, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.InsertBefore = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_InsertBefore, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.InsertAfter = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_InsertAfter, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape_swigregister = _TNaming.TNaming_ListOfNamedShape_swigregister
TNaming_ListOfNamedShape_swigregister(TNaming_ListOfNamedShape)

class TNaming_Localizer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_Localizer_swiginit(self, _TNaming.new_TNaming_Localizer(*args))

    def Init(self, *args):
        """
        :param US:
        :type US: Handle_TNaming_UsedShapes &
        :param CurTrans:
        :type CurTrans: int
        :rtype: None

        """
        return _TNaming.TNaming_Localizer_Init(self, *args)


    def SubShapes(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Type:
        :type Type: TopAbs_ShapeEnum
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_Localizer_SubShapes(self, *args)


    def Ancestors(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Type:
        :type Type: TopAbs_ShapeEnum
        :rtype: TopTools_IndexedDataMapOfShapeListOfShape

        """
        return _TNaming.TNaming_Localizer_Ancestors(self, *args)


    def FindFeaturesInAncestors(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param In:
        :type In: TopoDS_Shape &
        :param AncInFeatures:
        :type AncInFeatures: TopTools_MapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_Localizer_FindFeaturesInAncestors(self, *args)


    def GoBack(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Lab:
        :type Lab: TDF_Label &
        :param Evol:
        :type Evol: TNaming_Evolution
        :param OldS:
        :type OldS: TopTools_ListOfShape &
        :param OldLab:
        :type OldLab: TNaming_ListOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_Localizer_GoBack(self, *args)


    def Backward(self, *args):
        """
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param S:
        :type S: TopoDS_Shape &
        :param Primitives:
        :type Primitives: TNaming_MapOfNamedShape &
        :param ValidShapes:
        :type ValidShapes: TopTools_MapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_Localizer_Backward(self, *args)


    def FindNeighbourg(self, *args):
        """
        :param Cont:
        :type Cont: TopoDS_Shape &
        :param S:
        :type S: TopoDS_Shape &
        :param Neighbourg:
        :type Neighbourg: TopTools_MapOfShape &
        :rtype: None

        """
        return _TNaming.TNaming_Localizer_FindNeighbourg(self, *args)


    def IsNew(*args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: bool

        """
        return _TNaming.TNaming_Localizer_IsNew(*args)

    IsNew = staticmethod(IsNew)

    def FindGenerator(*args):
        """
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param S:
        :type S: TopoDS_Shape &
        :param theListOfGenerators:
        :type theListOfGenerators: TopTools_ListOfShape &
        :rtype: void

        """
        return _TNaming.TNaming_Localizer_FindGenerator(*args)

    FindGenerator = staticmethod(FindGenerator)

    def FindShapeContext(*args):
        """
        * Finds context of the shape <S>.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param theS:
        :type theS: TopoDS_Shape &
        :param theSC:
        :type theSC: TopoDS_Shape &
        :rtype: void

        """
        return _TNaming.TNaming_Localizer_FindShapeContext(*args)

    FindShapeContext = staticmethod(FindShapeContext)
    __swig_destroy__ = _TNaming.delete_TNaming_Localizer
TNaming_Localizer.Init = new_instancemethod(_TNaming.TNaming_Localizer_Init, None, TNaming_Localizer)
TNaming_Localizer.SubShapes = new_instancemethod(_TNaming.TNaming_Localizer_SubShapes, None, TNaming_Localizer)
TNaming_Localizer.Ancestors = new_instancemethod(_TNaming.TNaming_Localizer_Ancestors, None, TNaming_Localizer)
TNaming_Localizer.FindFeaturesInAncestors = new_instancemethod(_TNaming.TNaming_Localizer_FindFeaturesInAncestors, None, TNaming_Localizer)
TNaming_Localizer.GoBack = new_instancemethod(_TNaming.TNaming_Localizer_GoBack, None, TNaming_Localizer)
TNaming_Localizer.Backward = new_instancemethod(_TNaming.TNaming_Localizer_Backward, None, TNaming_Localizer)
TNaming_Localizer.FindNeighbourg = new_instancemethod(_TNaming.TNaming_Localizer_FindNeighbourg, None, TNaming_Localizer)
TNaming_Localizer_swigregister = _TNaming.TNaming_Localizer_swigregister
TNaming_Localizer_swigregister(TNaming_Localizer)

def TNaming_Localizer_IsNew(*args):
    """
    :param S:
    :type S: TopoDS_Shape &
    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :rtype: bool

    """
    return _TNaming.TNaming_Localizer_IsNew(*args)

def TNaming_Localizer_FindGenerator(*args):
    """
    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param S:
    :type S: TopoDS_Shape &
    :param theListOfGenerators:
    :type theListOfGenerators: TopTools_ListOfShape &
    :rtype: void

    """
    return _TNaming.TNaming_Localizer_FindGenerator(*args)

def TNaming_Localizer_FindShapeContext(*args):
    """
    * Finds context of the shape <S>.

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param theS:
    :type theS: TopoDS_Shape &
    :param theSC:
    :type theSC: TopoDS_Shape &
    :rtype: void

    """
    return _TNaming.TNaming_Localizer_FindShapeContext(*args)

class TNaming_MapIteratorOfMapOfNamedShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TNaming_MapOfNamedShape &
        :rtype: None

        """
        _TNaming.TNaming_MapIteratorOfMapOfNamedShape_swiginit(self, _TNaming.new_TNaming_MapIteratorOfMapOfNamedShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TNaming_MapOfNamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_MapIteratorOfMapOfNamedShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_MapIteratorOfMapOfNamedShape_Key(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_MapIteratorOfMapOfNamedShape
TNaming_MapIteratorOfMapOfNamedShape.Initialize = new_instancemethod(_TNaming.TNaming_MapIteratorOfMapOfNamedShape_Initialize, None, TNaming_MapIteratorOfMapOfNamedShape)
TNaming_MapIteratorOfMapOfNamedShape.Key = new_instancemethod(_TNaming.TNaming_MapIteratorOfMapOfNamedShape_Key, None, TNaming_MapIteratorOfMapOfNamedShape)
TNaming_MapIteratorOfMapOfNamedShape_swigregister = _TNaming.TNaming_MapIteratorOfMapOfNamedShape_swigregister
TNaming_MapIteratorOfMapOfNamedShape_swigregister(TNaming_MapIteratorOfMapOfNamedShape)

class TNaming_MapOfNamedShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TNaming.TNaming_MapOfNamedShape_swiginit(self, _TNaming.new_TNaming_MapOfNamedShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TNaming_MapOfNamedShape &
        :rtype: TNaming_MapOfNamedShape

        """
        return _TNaming.TNaming_MapOfNamedShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TNaming_MapOfNamedShape &
        :rtype: TNaming_MapOfNamedShape

        """
        return _TNaming.TNaming_MapOfNamedShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TNaming.TNaming_MapOfNamedShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_MapOfNamedShape_Clear(self, *args)


    def Add(self, *args):
        """
        :param aKey:
        :type aKey: Handle_TNaming_NamedShape &
        :rtype: bool

        """
        return _TNaming.TNaming_MapOfNamedShape_Add(self, *args)


    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: Handle_TNaming_NamedShape &
        :rtype: bool

        """
        return _TNaming.TNaming_MapOfNamedShape_Contains(self, *args)


    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: Handle_TNaming_NamedShape &
        :rtype: bool

        """
        return _TNaming.TNaming_MapOfNamedShape_Remove(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_MapOfNamedShape
TNaming_MapOfNamedShape.Assign = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Assign, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Set = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Set, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.ReSize = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_ReSize, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Clear = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Clear, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Add = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Add, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Contains = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Contains, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Remove = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Remove, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape_swigregister = _TNaming.TNaming_MapOfNamedShape_swigregister
TNaming_MapOfNamedShape_swigregister(TNaming_MapOfNamedShape)

class TNaming_Name(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_Name_swiginit(self, _TNaming.new_TNaming_Name(*args))

    def Append(self, *args):
        """
        :param arg:
        :type arg: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TNaming.TNaming_Name_Append(self, *args)


    def Type(self, *args):
        """
        :param aType:
        :type aType: TNaming_NameType
        :rtype: None

        :rtype: TNaming_NameType

        """
        return _TNaming.TNaming_Name_Type(self, *args)


    def ShapeType(self, *args):
        """
        :param aType:
        :type aType: TopAbs_ShapeEnum
        :rtype: None

        :rtype: TopAbs_ShapeEnum

        """
        return _TNaming.TNaming_Name_ShapeType(self, *args)


    def Shape(self, *args):
        """
        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: None

        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Name_Shape(self, *args)


    def Arguments(self, *args):
        """
        :rtype: TNaming_ListOfNamedShape

        """
        return _TNaming.TNaming_Name_Arguments(self, *args)


    def StopNamedShape(self, *args):
        """
        :param arg:
        :type arg: Handle_TNaming_NamedShape &
        :rtype: None

        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Name_StopNamedShape(self, *args)


    def Index(self, *args):
        """
        :param I:
        :type I: int
        :rtype: None

        :rtype: int

        """
        return _TNaming.TNaming_Name_Index(self, *args)


    def ContextLabel(self, *args):
        """
        :param theLab:
        :type theLab: TDF_Label &
        :rtype: None

        :rtype: TDF_Label

        """
        return _TNaming.TNaming_Name_ContextLabel(self, *args)


    def Orientation(self, *args):
        """
        :param theOrientation:
        :type theOrientation: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _TNaming.TNaming_Name_Orientation(self, *args)


    def Solve(self, *args):
        """
        :param aLab:
        :type aLab: TDF_Label &
        :param Valid:
        :type Valid: TDF_LabelMap &
        :rtype: bool

        """
        return _TNaming.TNaming_Name_Solve(self, *args)


    def Paste(self, *args):
        """
        :param into:
        :type into: TNaming_Name &
        :param RT:
        :type RT: Handle_TDF_RelocationTable &
        :rtype: None

        """
        return _TNaming.TNaming_Name_Paste(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Name
TNaming_Name.Append = new_instancemethod(_TNaming.TNaming_Name_Append, None, TNaming_Name)
TNaming_Name.Type = new_instancemethod(_TNaming.TNaming_Name_Type, None, TNaming_Name)
TNaming_Name.ShapeType = new_instancemethod(_TNaming.TNaming_Name_ShapeType, None, TNaming_Name)
TNaming_Name.Shape = new_instancemethod(_TNaming.TNaming_Name_Shape, None, TNaming_Name)
TNaming_Name.Arguments = new_instancemethod(_TNaming.TNaming_Name_Arguments, None, TNaming_Name)
TNaming_Name.StopNamedShape = new_instancemethod(_TNaming.TNaming_Name_StopNamedShape, None, TNaming_Name)
TNaming_Name.Index = new_instancemethod(_TNaming.TNaming_Name_Index, None, TNaming_Name)
TNaming_Name.ContextLabel = new_instancemethod(_TNaming.TNaming_Name_ContextLabel, None, TNaming_Name)
TNaming_Name.Orientation = new_instancemethod(_TNaming.TNaming_Name_Orientation, None, TNaming_Name)
TNaming_Name.Solve = new_instancemethod(_TNaming.TNaming_Name_Solve, None, TNaming_Name)
TNaming_Name.Paste = new_instancemethod(_TNaming.TNaming_Name_Paste, None, TNaming_Name)
TNaming_Name_swigregister = _TNaming.TNaming_Name_swigregister
TNaming_Name_swigregister(TNaming_Name)

class TNaming_NamedShape(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class method ============ Returns the GUID for named shapes.

        :rtype: Standard_GUID

        """
        return _TNaming.TNaming_NamedShape_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_NamedShape_swiginit(self, _TNaming.new_TNaming_NamedShape(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_NamedShape_IsEmpty(self, *args)


    def Get(self, *args):
        """
        * Returns the shapes contained in <NS>. Returns a null shape if IsEmpty.

        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_NamedShape_Get(self, *args)


    def Evolution(self, *args):
        """
        * Returns the Evolution of the attribute.

        :rtype: TNaming_Evolution

        """
        return _TNaming.TNaming_NamedShape_Evolution(self, *args)


    def Version(self, *args):
        """
        * Returns the Version of the attribute.

        :rtype: int

        """
        return _TNaming.TNaming_NamedShape_Version(self, *args)


    def SetVersion(self, *args):
        """
        * Set the Version of the attribute.

        :param version:
        :type version: int
        :rtype: None

        """
        return _TNaming.TNaming_NamedShape_SetVersion(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_NamedShape_Clear(self, *args)


    def DeltaOnModification(self, *args):
        """
        * Makes a DeltaOnModification between <self> and  <anOldAttribute.

        :param anOldAttribute:
        :type anOldAttribute: Handle_TDF_Attribute &
        :rtype: Handle_TDF_DeltaOnModification

        * Applies a DeltaOnModification to <self>.

        :param aDelta:
        :type aDelta: Handle_TDF_DeltaOnModification &
        :rtype: void

        """
        return _TNaming.TNaming_NamedShape_DeltaOnModification(self, *args)


    def DumpToString(self):
        """DumpToString(TNaming_NamedShape self) -> std::string"""
        return _TNaming.TNaming_NamedShape_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_NamedShape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_NamedShape
TNaming_NamedShape.IsEmpty = new_instancemethod(_TNaming.TNaming_NamedShape_IsEmpty, None, TNaming_NamedShape)
TNaming_NamedShape.Get = new_instancemethod(_TNaming.TNaming_NamedShape_Get, None, TNaming_NamedShape)
TNaming_NamedShape.Evolution = new_instancemethod(_TNaming.TNaming_NamedShape_Evolution, None, TNaming_NamedShape)
TNaming_NamedShape.Version = new_instancemethod(_TNaming.TNaming_NamedShape_Version, None, TNaming_NamedShape)
TNaming_NamedShape.SetVersion = new_instancemethod(_TNaming.TNaming_NamedShape_SetVersion, None, TNaming_NamedShape)
TNaming_NamedShape.Clear = new_instancemethod(_TNaming.TNaming_NamedShape_Clear, None, TNaming_NamedShape)
TNaming_NamedShape.DeltaOnModification = new_instancemethod(_TNaming.TNaming_NamedShape_DeltaOnModification, None, TNaming_NamedShape)
TNaming_NamedShape.DumpToString = new_instancemethod(_TNaming.TNaming_NamedShape_DumpToString, None, TNaming_NamedShape)
TNaming_NamedShape_swigregister = _TNaming.TNaming_NamedShape_swigregister
TNaming_NamedShape_swigregister(TNaming_NamedShape)

def TNaming_NamedShape_GetID(*args):
    """
    * class method ============ Returns the GUID for named shapes.

    :rtype: Standard_GUID

    """
    return _TNaming.TNaming_NamedShape_GetID(*args)

class Handle_TNaming_NamedShape(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_NamedShape_swiginit(self, _TNaming.new_Handle_TNaming_NamedShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_NamedShape_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_NamedShape
Handle_TNaming_NamedShape.Nullify = new_instancemethod(_TNaming.Handle_TNaming_NamedShape_Nullify, None, Handle_TNaming_NamedShape)
Handle_TNaming_NamedShape.IsNull = new_instancemethod(_TNaming.Handle_TNaming_NamedShape_IsNull, None, Handle_TNaming_NamedShape)
Handle_TNaming_NamedShape.GetObject = new_instancemethod(_TNaming.Handle_TNaming_NamedShape_GetObject, None, Handle_TNaming_NamedShape)
Handle_TNaming_NamedShape_swigregister = _TNaming.Handle_TNaming_NamedShape_swigregister
Handle_TNaming_NamedShape_swigregister(Handle_TNaming_NamedShape)

def Handle_TNaming_NamedShape_DownCast(AnObject):
    return _TNaming.Handle_TNaming_NamedShape_DownCast(AnObject)
Handle_TNaming_NamedShape_DownCast = _TNaming.Handle_TNaming_NamedShape_DownCast

class TNaming_NamedShapeHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: Handle_TNaming_NamedShape &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TNaming.TNaming_NamedShapeHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: Handle_TNaming_NamedShape &
        :param K2:
        :type K2: Handle_TNaming_NamedShape &
        :rtype: bool

        """
        return _TNaming.TNaming_NamedShapeHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _TNaming.TNaming_NamedShapeHasher_swiginit(self, _TNaming.new_TNaming_NamedShapeHasher())
    __swig_destroy__ = _TNaming.delete_TNaming_NamedShapeHasher
TNaming_NamedShapeHasher_swigregister = _TNaming.TNaming_NamedShapeHasher_swigregister
TNaming_NamedShapeHasher_swigregister(TNaming_NamedShapeHasher)

def TNaming_NamedShapeHasher_HashCode(*args):
    """
    :param K:
    :type K: Handle_TNaming_NamedShape &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _TNaming.TNaming_NamedShapeHasher_HashCode(*args)

def TNaming_NamedShapeHasher_IsEqual(*args):
    """
    :param K1:
    :type K1: Handle_TNaming_NamedShape &
    :param K2:
    :type K2: Handle_TNaming_NamedShape &
    :rtype: bool

    """
    return _TNaming.TNaming_NamedShapeHasher_IsEqual(*args)

class TNaming_Naming(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * following code from TDesignStd ==============================

        :rtype: Standard_GUID

        """
        return _TNaming.TNaming_Naming_GetID(*args)

    GetID = staticmethod(GetID)

    def Insert(*args):
        """
        :param under:
        :type under: TDF_Label &
        :rtype: Handle_TNaming_Naming

        """
        return _TNaming.TNaming_Naming_Insert(*args)

    Insert = staticmethod(Insert)

    def Name(*args):
        """
        * Creates a Namimg attribute at label <where> to identify the shape <Selection>. Geometry is Standard_True if we are only interested by the  underlying geometry (e.g. setting a constraint). <Context> is used to find neighbours of <S> when required by the naming. If KeepOrientation is True the Selection orientation is taken into account. BNproblem == True points out that Context sub-shapes in DF have orientation differences with Context shape itself. instance method ===============

        :param where:
        :type where: TDF_Label &
        :param Selection:
        :type Selection: TopoDS_Shape &
        :param Context:
        :type Context: TopoDS_Shape &
        :param Geometry: default value is Standard_False
        :type Geometry: bool
        :param KeepOrientation: default value is Standard_False
        :type KeepOrientation: bool
        :param BNproblem: default value is Standard_False
        :type BNproblem: bool
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Naming_Name(*args)

    Name = staticmethod(Name)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_Naming_swiginit(self, _TNaming.new_TNaming_Naming(*args))

    def IsDefined(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_Naming_IsDefined(self, *args)


    def GetName(self, *args):
        """
        :rtype: TNaming_Name

        """
        return _TNaming.TNaming_Naming_GetName(self, *args)


    def ChangeName(self, *args):
        """
        :rtype: TNaming_Name

        """
        return _TNaming.TNaming_Naming_ChangeName(self, *args)


    def Regenerate(self, *args):
        """
        * regenerate only the Name associated to me

        :param scope:
        :type scope: TDF_LabelMap &
        :rtype: bool

        """
        return _TNaming.TNaming_Naming_Regenerate(self, *args)


    def Solve(self, *args):
        """
        * Regenerate recursively the whole name with scope. If scope is empty it means that all the labels of the framework are valid.

        :param scope:
        :type scope: TDF_LabelMap &
        :rtype: bool

        """
        return _TNaming.TNaming_Naming_Solve(self, *args)


    def DumpToString(self):
        """DumpToString(TNaming_Naming self) -> std::string"""
        return _TNaming.TNaming_Naming_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_Naming(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_Naming
TNaming_Naming.IsDefined = new_instancemethod(_TNaming.TNaming_Naming_IsDefined, None, TNaming_Naming)
TNaming_Naming.GetName = new_instancemethod(_TNaming.TNaming_Naming_GetName, None, TNaming_Naming)
TNaming_Naming.ChangeName = new_instancemethod(_TNaming.TNaming_Naming_ChangeName, None, TNaming_Naming)
TNaming_Naming.Regenerate = new_instancemethod(_TNaming.TNaming_Naming_Regenerate, None, TNaming_Naming)
TNaming_Naming.Solve = new_instancemethod(_TNaming.TNaming_Naming_Solve, None, TNaming_Naming)
TNaming_Naming.DumpToString = new_instancemethod(_TNaming.TNaming_Naming_DumpToString, None, TNaming_Naming)
TNaming_Naming_swigregister = _TNaming.TNaming_Naming_swigregister
TNaming_Naming_swigregister(TNaming_Naming)

def TNaming_Naming_GetID(*args):
    """
    * following code from TDesignStd ==============================

    :rtype: Standard_GUID

    """
    return _TNaming.TNaming_Naming_GetID(*args)

def TNaming_Naming_Insert(*args):
    """
    :param under:
    :type under: TDF_Label &
    :rtype: Handle_TNaming_Naming

    """
    return _TNaming.TNaming_Naming_Insert(*args)

def TNaming_Naming_Name(*args):
    """
    * Creates a Namimg attribute at label <where> to identify the shape <Selection>. Geometry is Standard_True if we are only interested by the  underlying geometry (e.g. setting a constraint). <Context> is used to find neighbours of <S> when required by the naming. If KeepOrientation is True the Selection orientation is taken into account. BNproblem == True points out that Context sub-shapes in DF have orientation differences with Context shape itself. instance method ===============

    :param where:
    :type where: TDF_Label &
    :param Selection:
    :type Selection: TopoDS_Shape &
    :param Context:
    :type Context: TopoDS_Shape &
    :param Geometry: default value is Standard_False
    :type Geometry: bool
    :param KeepOrientation: default value is Standard_False
    :type KeepOrientation: bool
    :param BNproblem: default value is Standard_False
    :type BNproblem: bool
    :rtype: Handle_TNaming_NamedShape

    """
    return _TNaming.TNaming_Naming_Name(*args)

class Handle_TNaming_Naming(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_Naming_swiginit(self, _TNaming.new_Handle_TNaming_Naming(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_Naming_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_Naming
Handle_TNaming_Naming.Nullify = new_instancemethod(_TNaming.Handle_TNaming_Naming_Nullify, None, Handle_TNaming_Naming)
Handle_TNaming_Naming.IsNull = new_instancemethod(_TNaming.Handle_TNaming_Naming_IsNull, None, Handle_TNaming_Naming)
Handle_TNaming_Naming.GetObject = new_instancemethod(_TNaming.Handle_TNaming_Naming_GetObject, None, Handle_TNaming_Naming)
Handle_TNaming_Naming_swigregister = _TNaming.Handle_TNaming_Naming_swigregister
Handle_TNaming_Naming_swigregister(Handle_TNaming_Naming)

def Handle_TNaming_Naming_DownCast(AnObject):
    return _TNaming.Handle_TNaming_Naming_DownCast(AnObject)
Handle_TNaming_Naming_DownCast = _TNaming.Handle_TNaming_Naming_DownCast

class TNaming_NamingTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurrentShape(*args):
        """
        :param Valid:
        :type Valid: TDF_LabelMap &
        :param Forbiden:
        :type Forbiden: TDF_LabelMap &
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param MS:
        :type MS: TopTools_MapOfShape &
        :rtype: void

        """
        return _TNaming.TNaming_NamingTool_CurrentShape(*args)

    CurrentShape = staticmethod(CurrentShape)

    def CurrentShapeFromShape(*args):
        """
        :param Valid:
        :type Valid: TDF_LabelMap &
        :param Forbiden:
        :type Forbiden: TDF_LabelMap &
        :param Acces:
        :type Acces: TDF_Label &
        :param S:
        :type S: TopoDS_Shape &
        :param MS:
        :type MS: TopTools_MapOfShape &
        :rtype: void

        """
        return _TNaming.TNaming_NamingTool_CurrentShapeFromShape(*args)

    CurrentShapeFromShape = staticmethod(CurrentShapeFromShape)

    def BuildDescendants(*args):
        """
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param Labels:
        :type Labels: TDF_LabelMap &
        :rtype: void

        """
        return _TNaming.TNaming_NamingTool_BuildDescendants(*args)

    BuildDescendants = staticmethod(BuildDescendants)

    def __init__(self):
        _TNaming.TNaming_NamingTool_swiginit(self, _TNaming.new_TNaming_NamingTool())
    __swig_destroy__ = _TNaming.delete_TNaming_NamingTool
TNaming_NamingTool_swigregister = _TNaming.TNaming_NamingTool_swigregister
TNaming_NamingTool_swigregister(TNaming_NamingTool)

def TNaming_NamingTool_CurrentShape(*args):
    """
    :param Valid:
    :type Valid: TDF_LabelMap &
    :param Forbiden:
    :type Forbiden: TDF_LabelMap &
    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param MS:
    :type MS: TopTools_MapOfShape &
    :rtype: void

    """
    return _TNaming.TNaming_NamingTool_CurrentShape(*args)

def TNaming_NamingTool_CurrentShapeFromShape(*args):
    """
    :param Valid:
    :type Valid: TDF_LabelMap &
    :param Forbiden:
    :type Forbiden: TDF_LabelMap &
    :param Acces:
    :type Acces: TDF_Label &
    :param S:
    :type S: TopoDS_Shape &
    :param MS:
    :type MS: TopTools_MapOfShape &
    :rtype: void

    """
    return _TNaming.TNaming_NamingTool_CurrentShapeFromShape(*args)

def TNaming_NamingTool_BuildDescendants(*args):
    """
    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param Labels:
    :type Labels: TDF_LabelMap &
    :rtype: void

    """
    return _TNaming.TNaming_NamingTool_BuildDescendants(*args)

class TNaming_NewShapeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :param Transaction:
        :type Transaction: int
        :param access:
        :type access: TDF_Label &
        :rtype: None

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param access:
        :type access: TDF_Label &
        :rtype: None

        * Iterates from the current Shape in <anIterator>

        :param anIterator:
        :type anIterator: TNaming_NewShapeIterator &
        :rtype: None

        * Iterates from the current Shape in <anIterator>

        :param anIterator:
        :type anIterator: TNaming_Iterator &
        :rtype: None

        """
        _TNaming.TNaming_NewShapeIterator_swiginit(self, _TNaming.new_TNaming_NewShapeIterator(*args))

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_NewShapeIterator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_NewShapeIterator_Next(self, *args)


    def Label(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TNaming.TNaming_NewShapeIterator_Label(self, *args)


    def NamedShape(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_NewShapeIterator_NamedShape(self, *args)


    def Shape(self, *args):
        """
        * Warning! Can be a Null Shape if a descendant is deleted.

        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_NewShapeIterator_Shape(self, *args)


    def IsModification(self, *args):
        """
        * True if the new shape is a modification (split, fuse,etc...) of the old shape.

        :rtype: bool

        """
        return _TNaming.TNaming_NewShapeIterator_IsModification(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_NewShapeIterator
TNaming_NewShapeIterator.More = new_instancemethod(_TNaming.TNaming_NewShapeIterator_More, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.Next = new_instancemethod(_TNaming.TNaming_NewShapeIterator_Next, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.Label = new_instancemethod(_TNaming.TNaming_NewShapeIterator_Label, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.NamedShape = new_instancemethod(_TNaming.TNaming_NewShapeIterator_NamedShape, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.Shape = new_instancemethod(_TNaming.TNaming_NewShapeIterator_Shape, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.IsModification = new_instancemethod(_TNaming.TNaming_NewShapeIterator_IsModification, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator_swigregister = _TNaming.TNaming_NewShapeIterator_swigregister
TNaming_NewShapeIterator_swigregister(TNaming_NewShapeIterator)

class TNaming_OldShapeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :param Transaction:
        :type Transaction: int
        :param access:
        :type access: TDF_Label &
        :rtype: None

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param access:
        :type access: TDF_Label &
        :rtype: None

        * Iterates from the current Shape in <anIterator>

        :param anIterator:
        :type anIterator: TNaming_OldShapeIterator &
        :rtype: None

        * Iterates from the current Shape in <anIterator>

        :param anIterator:
        :type anIterator: TNaming_Iterator &
        :rtype: None

        """
        _TNaming.TNaming_OldShapeIterator_swiginit(self, _TNaming.new_TNaming_OldShapeIterator(*args))

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_OldShapeIterator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_OldShapeIterator_Next(self, *args)


    def Label(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TNaming.TNaming_OldShapeIterator_Label(self, *args)


    def NamedShape(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_OldShapeIterator_NamedShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_OldShapeIterator_Shape(self, *args)


    def IsModification(self, *args):
        """
        * True if the new shape is a modification (split, fuse,etc...) of the old shape.

        :rtype: bool

        """
        return _TNaming.TNaming_OldShapeIterator_IsModification(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_OldShapeIterator
TNaming_OldShapeIterator.More = new_instancemethod(_TNaming.TNaming_OldShapeIterator_More, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.Next = new_instancemethod(_TNaming.TNaming_OldShapeIterator_Next, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.Label = new_instancemethod(_TNaming.TNaming_OldShapeIterator_Label, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.NamedShape = new_instancemethod(_TNaming.TNaming_OldShapeIterator_NamedShape, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.Shape = new_instancemethod(_TNaming.TNaming_OldShapeIterator_Shape, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.IsModification = new_instancemethod(_TNaming.TNaming_OldShapeIterator_IsModification, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator_swigregister = _TNaming.TNaming_OldShapeIterator_swigregister
TNaming_OldShapeIterator_swigregister(TNaming_OldShapeIterator)

class TNaming_RefShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _TNaming.TNaming_RefShape_swiginit(self, _TNaming.new_TNaming_RefShape(*args))

    def FirstUse(self, *args):
        """
        :param aPtr:
        :type aPtr: TNaming_PtrNode &
        :rtype: None

        :rtype: TNaming_PtrNode

        """
        return _TNaming.TNaming_RefShape_FirstUse(self, *args)


    def Shape(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_RefShape_Shape(self, *args)


    def Label(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TNaming.TNaming_RefShape_Label(self, *args)


    def NamedShape(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_RefShape_NamedShape(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_RefShape
TNaming_RefShape.FirstUse = new_instancemethod(_TNaming.TNaming_RefShape_FirstUse, None, TNaming_RefShape)
TNaming_RefShape.Shape = new_instancemethod(_TNaming.TNaming_RefShape_Shape, None, TNaming_RefShape)
TNaming_RefShape.Label = new_instancemethod(_TNaming.TNaming_RefShape_Label, None, TNaming_RefShape)
TNaming_RefShape.NamedShape = new_instancemethod(_TNaming.TNaming_RefShape_NamedShape, None, TNaming_RefShape)
TNaming_RefShape_swigregister = _TNaming.TNaming_RefShape_swigregister
TNaming_RefShape_swigregister(TNaming_RefShape)

class TNaming_SameShapeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :param access:
        :type access: TDF_Label &
        :rtype: None

        """
        _TNaming.TNaming_SameShapeIterator_swiginit(self, _TNaming.new_TNaming_SameShapeIterator(*args))

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_SameShapeIterator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_SameShapeIterator_Next(self, *args)


    def Label(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TNaming.TNaming_SameShapeIterator_Label(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_SameShapeIterator
TNaming_SameShapeIterator.More = new_instancemethod(_TNaming.TNaming_SameShapeIterator_More, None, TNaming_SameShapeIterator)
TNaming_SameShapeIterator.Next = new_instancemethod(_TNaming.TNaming_SameShapeIterator_Next, None, TNaming_SameShapeIterator)
TNaming_SameShapeIterator.Label = new_instancemethod(_TNaming.TNaming_SameShapeIterator_Label, None, TNaming_SameShapeIterator)
TNaming_SameShapeIterator_swigregister = _TNaming.TNaming_SameShapeIterator_swigregister
TNaming_SameShapeIterator_swigregister(TNaming_SameShapeIterator)

class TNaming_Scope(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * WithValid = False

        :rtype: None

        * if <WithValid> the scope is defined by the map. If not on the whole framework.

        :param WithValid:
        :type WithValid: bool
        :rtype: None

        * create a scope with a map. WithValid = True.

        :param valid:
        :type valid: TDF_LabelMap &
        :rtype: None

        """
        _TNaming.TNaming_Scope_swiginit(self, _TNaming.new_TNaming_Scope(*args))

    def WithValid(self, *args):
        """
        :rtype: bool

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _TNaming.TNaming_Scope_WithValid(self, *args)


    def ClearValid(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_Scope_ClearValid(self, *args)


    def Valid(self, *args):
        """
        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TNaming.TNaming_Scope_Valid(self, *args)


    def ValidChildren(self, *args):
        """
        :param L:
        :type L: TDF_Label &
        :param withroot: default value is Standard_True
        :type withroot: bool
        :rtype: None

        """
        return _TNaming.TNaming_Scope_ValidChildren(self, *args)


    def Unvalid(self, *args):
        """
        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TNaming.TNaming_Scope_Unvalid(self, *args)


    def UnvalidChildren(self, *args):
        """
        :param L:
        :type L: TDF_Label &
        :param withroot: default value is Standard_True
        :type withroot: bool
        :rtype: None

        """
        return _TNaming.TNaming_Scope_UnvalidChildren(self, *args)


    def IsValid(self, *args):
        """
        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _TNaming.TNaming_Scope_IsValid(self, *args)


    def GetValid(self, *args):
        """
        :rtype: TDF_LabelMap

        """
        return _TNaming.TNaming_Scope_GetValid(self, *args)


    def ChangeValid(self, *args):
        """
        :rtype: TDF_LabelMap

        """
        return _TNaming.TNaming_Scope_ChangeValid(self, *args)


    def CurrentShape(self, *args):
        """
        * Returns the current value of <NS> according to the Valid Scope.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Scope_CurrentShape(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Scope
TNaming_Scope.WithValid = new_instancemethod(_TNaming.TNaming_Scope_WithValid, None, TNaming_Scope)
TNaming_Scope.ClearValid = new_instancemethod(_TNaming.TNaming_Scope_ClearValid, None, TNaming_Scope)
TNaming_Scope.Valid = new_instancemethod(_TNaming.TNaming_Scope_Valid, None, TNaming_Scope)
TNaming_Scope.ValidChildren = new_instancemethod(_TNaming.TNaming_Scope_ValidChildren, None, TNaming_Scope)
TNaming_Scope.Unvalid = new_instancemethod(_TNaming.TNaming_Scope_Unvalid, None, TNaming_Scope)
TNaming_Scope.UnvalidChildren = new_instancemethod(_TNaming.TNaming_Scope_UnvalidChildren, None, TNaming_Scope)
TNaming_Scope.IsValid = new_instancemethod(_TNaming.TNaming_Scope_IsValid, None, TNaming_Scope)
TNaming_Scope.GetValid = new_instancemethod(_TNaming.TNaming_Scope_GetValid, None, TNaming_Scope)
TNaming_Scope.ChangeValid = new_instancemethod(_TNaming.TNaming_Scope_ChangeValid, None, TNaming_Scope)
TNaming_Scope.CurrentShape = new_instancemethod(_TNaming.TNaming_Scope_CurrentShape, None, TNaming_Scope)
TNaming_Scope_swigregister = _TNaming.TNaming_Scope_swigregister
TNaming_Scope_swigregister(TNaming_Scope)

class TNaming_Selector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsIdentified(*args):
        """
        * To know if a shape is already identified (not selected) ======================================================= The label access defines the point of access to the data framework. selection is the shape for which we want to know whether it is identified or not. If true, NS is returned as the identity of selection. If Geometry is true, NS will be the named shape containing the first appearance of selection and not any other shape. In other words, selection must be the only shape stored in NS.

        :param access:
        :type access: TDF_Label &
        :param selection:
        :type selection: TopoDS_Shape &
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param Geometry: default value is Standard_False
        :type Geometry: bool
        :rtype: bool

        """
        return _TNaming.TNaming_Selector_IsIdentified(*args)

    IsIdentified = staticmethod(IsIdentified)

    def __init__(self, *args):
        """
        * Create a selector on this label to select a shape. ==================

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: None

        """
        _TNaming.TNaming_Selector_swiginit(self, _TNaming.new_TNaming_Selector(*args))

    def Select(self, *args):
        """
        * Creates a topological naming on the label aLabel given as an argument at construction time. If successful, the shape Selection - found in the shape Context - is now identified in the named shape returned in NamedShape. If Geometry is true, NamedShape contains the first appearance of Selection. This syntax is more robust than the previous syntax for this method.

        :param Selection:
        :type Selection: TopoDS_Shape &
        :param Context:
        :type Context: TopoDS_Shape &
        :param Geometry: default value is Standard_False
        :type Geometry: bool
        :param KeepOrientatation: default value is Standard_False
        :type KeepOrientatation: bool
        :rtype: bool

        * Creates a topological naming on the label aLabel given as an argument at construction time. If successful, the shape Selection is now identified in the named shape returned in NamedShape. If Geometry is true, NamedShape contains the first appearance of Selection.

        :param Selection:
        :type Selection: TopoDS_Shape &
        :param Geometry: default value is Standard_False
        :type Geometry: bool
        :param KeepOrientatation: default value is Standard_False
        :type KeepOrientatation: bool
        :rtype: bool

        """
        return _TNaming.TNaming_Selector_Select(self, *args)


    def Solve(self, *args):
        """
        * Updates the topological naming on the label aLabel given as an argument at construction time. The underlying shape returned in the method NamedShape is updated. To read this shape, use the method TNaming_Tool::GetShape

        :param Valid:
        :type Valid: TDF_LabelMap &
        :rtype: bool

        """
        return _TNaming.TNaming_Selector_Solve(self, *args)


    def Arguments(self, *args):
        """
        * Returns the attribute list args. This list contains the named shape on which the topological naming was built.

        :param args:
        :type args: TDF_AttributeMap &
        :rtype: None

        """
        return _TNaming.TNaming_Selector_Arguments(self, *args)


    def NamedShape(self, *args):
        """
        * Returns the NamedShape build or under construction, which contains the topological naming..

        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Selector_NamedShape(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Selector
TNaming_Selector.Select = new_instancemethod(_TNaming.TNaming_Selector_Select, None, TNaming_Selector)
TNaming_Selector.Solve = new_instancemethod(_TNaming.TNaming_Selector_Solve, None, TNaming_Selector)
TNaming_Selector.Arguments = new_instancemethod(_TNaming.TNaming_Selector_Arguments, None, TNaming_Selector)
TNaming_Selector.NamedShape = new_instancemethod(_TNaming.TNaming_Selector_NamedShape, None, TNaming_Selector)
TNaming_Selector_swigregister = _TNaming.TNaming_Selector_swigregister
TNaming_Selector_swigregister(TNaming_Selector)

def TNaming_Selector_IsIdentified(*args):
    """
    * To know if a shape is already identified (not selected) ======================================================= The label access defines the point of access to the data framework. selection is the shape for which we want to know whether it is identified or not. If true, NS is returned as the identity of selection. If Geometry is true, NS will be the named shape containing the first appearance of selection and not any other shape. In other words, selection must be the only shape stored in NS.

    :param access:
    :type access: TDF_Label &
    :param selection:
    :type selection: TopoDS_Shape &
    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param Geometry: default value is Standard_False
    :type Geometry: bool
    :rtype: bool

    """
    return _TNaming.TNaming_Selector_IsIdentified(*args)

class TNaming_ShapesSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :param Type: default value is TopAbs_SHAPE
        :type Type: TopAbs_ShapeEnum
        :rtype: None

        """
        _TNaming.TNaming_ShapesSet_swiginit(self, _TNaming.new_TNaming_ShapesSet(*args))

    def Clear(self, *args):
        """
        * Removes all Shapes

        :rtype: None

        """
        return _TNaming.TNaming_ShapesSet_Clear(self, *args)


    def Contains(self, *args):
        """
        * Returns True if <S> is in <self>

        :param S:
        :type S: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.TNaming_ShapesSet_Contains(self, *args)


    def Add(self, *args):
        """
        * Adds the Shape <S>

        :param S:
        :type S: TopoDS_Shape &
        :rtype: bool

        * Adds the shapes contained in <Shapes>.

        :param Shapes:
        :type Shapes: TNaming_ShapesSet &
        :rtype: None

        """
        return _TNaming.TNaming_ShapesSet_Add(self, *args)


    def Filter(self, *args):
        """
        * Erases in <self> the shapes not contained in <Shapes>

        :param Shapes:
        :type Shapes: TNaming_ShapesSet &
        :rtype: None

        """
        return _TNaming.TNaming_ShapesSet_Filter(self, *args)


    def Remove(self, *args):
        """
        * Removes <S> in <self>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: bool

        * Removes in <self> the shapes contained in <Shapes>

        :param Shapes:
        :type Shapes: TNaming_ShapesSet &
        :rtype: None

        """
        return _TNaming.TNaming_ShapesSet_Remove(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_ShapesSet_IsEmpty(self, *args)


    def NbShapes(self, *args):
        """
        :rtype: int

        """
        return _TNaming.TNaming_ShapesSet_NbShapes(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_ShapesSet_ChangeMap(self, *args)


    def Map(self, *args):
        """
        :rtype: TopTools_MapOfShape

        """
        return _TNaming.TNaming_ShapesSet_Map(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_ShapesSet
TNaming_ShapesSet.Clear = new_instancemethod(_TNaming.TNaming_ShapesSet_Clear, None, TNaming_ShapesSet)
TNaming_ShapesSet.Contains = new_instancemethod(_TNaming.TNaming_ShapesSet_Contains, None, TNaming_ShapesSet)
TNaming_ShapesSet.Add = new_instancemethod(_TNaming.TNaming_ShapesSet_Add, None, TNaming_ShapesSet)
TNaming_ShapesSet.Filter = new_instancemethod(_TNaming.TNaming_ShapesSet_Filter, None, TNaming_ShapesSet)
TNaming_ShapesSet.Remove = new_instancemethod(_TNaming.TNaming_ShapesSet_Remove, None, TNaming_ShapesSet)
TNaming_ShapesSet.IsEmpty = new_instancemethod(_TNaming.TNaming_ShapesSet_IsEmpty, None, TNaming_ShapesSet)
TNaming_ShapesSet.NbShapes = new_instancemethod(_TNaming.TNaming_ShapesSet_NbShapes, None, TNaming_ShapesSet)
TNaming_ShapesSet.ChangeMap = new_instancemethod(_TNaming.TNaming_ShapesSet_ChangeMap, None, TNaming_ShapesSet)
TNaming_ShapesSet.Map = new_instancemethod(_TNaming.TNaming_ShapesSet_Map, None, TNaming_ShapesSet)
TNaming_ShapesSet_swigregister = _TNaming.TNaming_ShapesSet_swigregister
TNaming_ShapesSet_swigregister(TNaming_ShapesSet)

class TNaming_StdMapNodeOfMapOfNamedShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_TNaming_NamedShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TNaming.TNaming_StdMapNodeOfMapOfNamedShape_swiginit(self, _TNaming.new_TNaming_StdMapNodeOfMapOfNamedShape(*args))

    def Key(self, *args):
        """
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_StdMapNodeOfMapOfNamedShape_Key(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_StdMapNodeOfMapOfNamedShape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_StdMapNodeOfMapOfNamedShape
TNaming_StdMapNodeOfMapOfNamedShape.Key = new_instancemethod(_TNaming.TNaming_StdMapNodeOfMapOfNamedShape_Key, None, TNaming_StdMapNodeOfMapOfNamedShape)
TNaming_StdMapNodeOfMapOfNamedShape_swigregister = _TNaming.TNaming_StdMapNodeOfMapOfNamedShape_swigregister
TNaming_StdMapNodeOfMapOfNamedShape_swigregister(TNaming_StdMapNodeOfMapOfNamedShape)

class Handle_TNaming_StdMapNodeOfMapOfNamedShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_swiginit(self, _TNaming.new_Handle_TNaming_StdMapNodeOfMapOfNamedShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_StdMapNodeOfMapOfNamedShape
Handle_TNaming_StdMapNodeOfMapOfNamedShape.Nullify = new_instancemethod(_TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_Nullify, None, Handle_TNaming_StdMapNodeOfMapOfNamedShape)
Handle_TNaming_StdMapNodeOfMapOfNamedShape.IsNull = new_instancemethod(_TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_IsNull, None, Handle_TNaming_StdMapNodeOfMapOfNamedShape)
Handle_TNaming_StdMapNodeOfMapOfNamedShape.GetObject = new_instancemethod(_TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_GetObject, None, Handle_TNaming_StdMapNodeOfMapOfNamedShape)
Handle_TNaming_StdMapNodeOfMapOfNamedShape_swigregister = _TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_swigregister
Handle_TNaming_StdMapNodeOfMapOfNamedShape_swigregister(Handle_TNaming_StdMapNodeOfMapOfNamedShape)

def Handle_TNaming_StdMapNodeOfMapOfNamedShape_DownCast(AnObject):
    return _TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_DownCast(AnObject)
Handle_TNaming_StdMapNodeOfMapOfNamedShape_DownCast = _TNaming.Handle_TNaming_StdMapNodeOfMapOfNamedShape_DownCast

class TNaming_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurrentShape(*args):
        """
        * Returns the last Modification of <NS>. Returns the shape CurrentShape contained in the named shape attribute NS. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: TopoDS_Shape

        * Returns the shape CurrentShape contained in the named shape attribute NS, and present in the updated attribute map Updated. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound. Warning Only the contents of Updated are searched.R

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param Updated:
        :type Updated: TDF_LabelMap &
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Tool_CurrentShape(*args)

    CurrentShape = staticmethod(CurrentShape)

    def CurrentNamedShape(*args):
        """
        * Returns the NamedShape of the last Modification of <NS>. This shape is identified by a label.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param Updated:
        :type Updated: TDF_LabelMap &
        :rtype: Handle_TNaming_NamedShape

        * Returns NamedShape the last Modification of <NS>.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Tool_CurrentNamedShape(*args)

    CurrentNamedShape = staticmethod(CurrentNamedShape)

    def NamedShape(*args):
        """
        * Returns the named shape attribute defined by the shape aShape and the label anAccess. This attribute is returned as a new shape. You call this function, if you need to create a topological attribute for existing data. Example class MyPkg_MyClass { public: Standard_Boolean SameEdge(const Handle_OCafTest_Line& , const Handle_CafTest_Line& ); }; Standard_Boolean MyPkg_MyClass::SameEdge (const Handle_OCafTest_Line& L1 const Handle_OCafTest_Line& L2) { Handle_TNaming_NamedShape NS1 = L1->NamedShape(); Handle_TNaming_NamedShape NS2 = L2->NamedShape(); return BRepTools::Compare(NS1->Get(),NS2->Get()); } In the example above, the function SameEdge is created to compare the edges having two lines for geometric supports. If these edges are found by BRepTools::Compare to be within the same tolerance, they are considered to be the same. Warning To avoid sharing of names, a SELECTED attribute will not be returned. Sharing of names makes it harder to manage the data structure. When the user of the name is removed, for example, it is difficult to know whether the name should be destroyed.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param anAcces:
        :type anAcces: TDF_Label &
        :rtype: Handle_TNaming_NamedShape

        """
        return _TNaming.TNaming_Tool_NamedShape(*args)

    NamedShape = staticmethod(NamedShape)

    def GetShape(*args):
        """
        * Returns the entities stored in the named shape attribute NS. If there is only one old-new pair, the new shape is returned. Otherwise, a Compound is returned. This compound is made out of all the new shapes found. Each call to this function creates a new compound.

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Tool_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def OriginalShape(*args):
        """
        * Returns the shape contained as OldShape in <NS>

        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Tool_OriginalShape(*args)

    OriginalShape = staticmethod(OriginalShape)

    def GeneratedShape(*args):
        """
        * Returns the shape generated from S or by a modification of S and contained in the named shape Generation.

        :param S:
        :type S: TopoDS_Shape &
        :param Generation:
        :type Generation: Handle_TNaming_NamedShape &
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Tool_GeneratedShape(*args)

    GeneratedShape = staticmethod(GeneratedShape)

    def Collect(*args):
        """
        :param NS:
        :type NS: Handle_TNaming_NamedShape &
        :param Labels:
        :type Labels: TNaming_MapOfNamedShape &
        :param OnlyModif: default value is Standard_True
        :type OnlyModif: bool
        :rtype: void

        """
        return _TNaming.TNaming_Tool_Collect(*args)

    Collect = staticmethod(Collect)

    def HasLabel(*args):
        """
        * Returns True if <aShape> appears under a label.(DP)

        :param access:
        :type access: TDF_Label &
        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: bool

        """
        return _TNaming.TNaming_Tool_HasLabel(*args)

    HasLabel = staticmethod(HasLabel)

    def Label(*args):
        """
        * Returns the label of the first apparition of <aShape>. Transdef is a value of the transaction of the first apparition of <aShape>.

        :param access:
        :type access: TDF_Label &
        :param aShape:
        :type aShape: TopoDS_Shape &
        :param TransDef:
        :type TransDef: int &
        :rtype: TDF_Label

        """
        return _TNaming.TNaming_Tool_Label(*args)

    Label = staticmethod(Label)

    def InitialShape(*args):
        """
        * Returns the shape created from the shape aShape contained in the attribute anAcces.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param anAcces:
        :type anAcces: TDF_Label &
        :param Labels:
        :type Labels: TDF_LabelList &
        :rtype: TopoDS_Shape

        """
        return _TNaming.TNaming_Tool_InitialShape(*args)

    InitialShape = staticmethod(InitialShape)

    def ValidUntil(*args):
        """
        * Returns the last transaction where the creation of S is valid.

        :param access:
        :type access: TDF_Label &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: int

        """
        return _TNaming.TNaming_Tool_ValidUntil(*args)

    ValidUntil = staticmethod(ValidUntil)

    def FindShape(*args):
        """
        * Returns the current shape (a Wire or a Shell) built (in the data framework) from the the shapes of the argument named shape. It is used for IDENTITY name type computation.

        :param Valid:
        :type Valid: TDF_LabelMap &
        :param Forbiden:
        :type Forbiden: TDF_LabelMap &
        :param Arg:
        :type Arg: Handle_TNaming_NamedShape &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: void

        """
        return _TNaming.TNaming_Tool_FindShape(*args)

    FindShape = staticmethod(FindShape)

    def __init__(self):
        _TNaming.TNaming_Tool_swiginit(self, _TNaming.new_TNaming_Tool())
    __swig_destroy__ = _TNaming.delete_TNaming_Tool
TNaming_Tool_swigregister = _TNaming.TNaming_Tool_swigregister
TNaming_Tool_swigregister(TNaming_Tool)

def TNaming_Tool_CurrentShape(*args):
    """
    * Returns the last Modification of <NS>. Returns the shape CurrentShape contained in the named shape attribute NS. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound.

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :rtype: TopoDS_Shape

    * Returns the shape CurrentShape contained in the named shape attribute NS, and present in the updated attribute map Updated. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound. Warning Only the contents of Updated are searched.R

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param Updated:
    :type Updated: TDF_LabelMap &
    :rtype: TopoDS_Shape

    """
    return _TNaming.TNaming_Tool_CurrentShape(*args)

def TNaming_Tool_CurrentNamedShape(*args):
    """
    * Returns the NamedShape of the last Modification of <NS>. This shape is identified by a label.

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param Updated:
    :type Updated: TDF_LabelMap &
    :rtype: Handle_TNaming_NamedShape

    * Returns NamedShape the last Modification of <NS>.

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :rtype: Handle_TNaming_NamedShape

    """
    return _TNaming.TNaming_Tool_CurrentNamedShape(*args)

def TNaming_Tool_NamedShape(*args):
    """
    * Returns the named shape attribute defined by the shape aShape and the label anAccess. This attribute is returned as a new shape. You call this function, if you need to create a topological attribute for existing data. Example class MyPkg_MyClass { public: Standard_Boolean SameEdge(const Handle_OCafTest_Line& , const Handle_CafTest_Line& ); }; Standard_Boolean MyPkg_MyClass::SameEdge (const Handle_OCafTest_Line& L1 const Handle_OCafTest_Line& L2) { Handle_TNaming_NamedShape NS1 = L1->NamedShape(); Handle_TNaming_NamedShape NS2 = L2->NamedShape(); return BRepTools::Compare(NS1->Get(),NS2->Get()); } In the example above, the function SameEdge is created to compare the edges having two lines for geometric supports. If these edges are found by BRepTools::Compare to be within the same tolerance, they are considered to be the same. Warning To avoid sharing of names, a SELECTED attribute will not be returned. Sharing of names makes it harder to manage the data structure. When the user of the name is removed, for example, it is difficult to know whether the name should be destroyed.

    :param aShape:
    :type aShape: TopoDS_Shape &
    :param anAcces:
    :type anAcces: TDF_Label &
    :rtype: Handle_TNaming_NamedShape

    """
    return _TNaming.TNaming_Tool_NamedShape(*args)

def TNaming_Tool_GetShape(*args):
    """
    * Returns the entities stored in the named shape attribute NS. If there is only one old-new pair, the new shape is returned. Otherwise, a Compound is returned. This compound is made out of all the new shapes found. Each call to this function creates a new compound.

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :rtype: TopoDS_Shape

    """
    return _TNaming.TNaming_Tool_GetShape(*args)

def TNaming_Tool_OriginalShape(*args):
    """
    * Returns the shape contained as OldShape in <NS>

    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :rtype: TopoDS_Shape

    """
    return _TNaming.TNaming_Tool_OriginalShape(*args)

def TNaming_Tool_GeneratedShape(*args):
    """
    * Returns the shape generated from S or by a modification of S and contained in the named shape Generation.

    :param S:
    :type S: TopoDS_Shape &
    :param Generation:
    :type Generation: Handle_TNaming_NamedShape &
    :rtype: TopoDS_Shape

    """
    return _TNaming.TNaming_Tool_GeneratedShape(*args)

def TNaming_Tool_Collect(*args):
    """
    :param NS:
    :type NS: Handle_TNaming_NamedShape &
    :param Labels:
    :type Labels: TNaming_MapOfNamedShape &
    :param OnlyModif: default value is Standard_True
    :type OnlyModif: bool
    :rtype: void

    """
    return _TNaming.TNaming_Tool_Collect(*args)

def TNaming_Tool_HasLabel(*args):
    """
    * Returns True if <aShape> appears under a label.(DP)

    :param access:
    :type access: TDF_Label &
    :param aShape:
    :type aShape: TopoDS_Shape &
    :rtype: bool

    """
    return _TNaming.TNaming_Tool_HasLabel(*args)

def TNaming_Tool_Label(*args):
    """
    * Returns the label of the first apparition of <aShape>. Transdef is a value of the transaction of the first apparition of <aShape>.

    :param access:
    :type access: TDF_Label &
    :param aShape:
    :type aShape: TopoDS_Shape &
    :param TransDef:
    :type TransDef: int &
    :rtype: TDF_Label

    """
    return _TNaming.TNaming_Tool_Label(*args)

def TNaming_Tool_InitialShape(*args):
    """
    * Returns the shape created from the shape aShape contained in the attribute anAcces.

    :param aShape:
    :type aShape: TopoDS_Shape &
    :param anAcces:
    :type anAcces: TDF_Label &
    :param Labels:
    :type Labels: TDF_LabelList &
    :rtype: TopoDS_Shape

    """
    return _TNaming.TNaming_Tool_InitialShape(*args)

def TNaming_Tool_ValidUntil(*args):
    """
    * Returns the last transaction where the creation of S is valid.

    :param access:
    :type access: TDF_Label &
    :param S:
    :type S: TopoDS_Shape &
    :rtype: int

    """
    return _TNaming.TNaming_Tool_ValidUntil(*args)

def TNaming_Tool_FindShape(*args):
    """
    * Returns the current shape (a Wire or a Shell) built (in the data framework) from the the shapes of the argument named shape. It is used for IDENTITY name type computation.

    :param Valid:
    :type Valid: TDF_LabelMap &
    :param Forbiden:
    :type Forbiden: TDF_LabelMap &
    :param Arg:
    :type Arg: Handle_TNaming_NamedShape &
    :param S:
    :type S: TopoDS_Shape &
    :rtype: void

    """
    return _TNaming.TNaming_Tool_FindShape(*args)

class TNaming_TranslateTool(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Add(self, *args):
        """
        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_Add(self, *args)


    def MakeVertex(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeVertex(self, *args)


    def MakeEdge(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeEdge(self, *args)


    def MakeWire(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeWire(self, *args)


    def MakeFace(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeFace(self, *args)


    def MakeShell(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeShell(self, *args)


    def MakeSolid(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeSolid(self, *args)


    def MakeCompSolid(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeCompSolid(self, *args)


    def MakeCompound(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_MakeCompound(self, *args)


    def UpdateVertex(self, *args):
        """
        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :param M:
        :type M: TColStd_IndexedDataMapOfTransientTransient &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_UpdateVertex(self, *args)


    def UpdateEdge(self, *args):
        """
        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :param M:
        :type M: TColStd_IndexedDataMapOfTransientTransient &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_UpdateEdge(self, *args)


    def UpdateFace(self, *args):
        """
        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :param M:
        :type M: TColStd_IndexedDataMapOfTransientTransient &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_UpdateFace(self, *args)


    def UpdateShape(self, *args):
        """
        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_TranslateTool_UpdateShape(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_TranslateTool(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_TranslateTool
TNaming_TranslateTool.Add = new_instancemethod(_TNaming.TNaming_TranslateTool_Add, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeVertex = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeVertex, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeEdge = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeEdge, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeWire = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeWire, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeFace = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeFace, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeShell = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeShell, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeSolid = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeSolid, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeCompSolid = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeCompSolid, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeCompound = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeCompound, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateVertex = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateVertex, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateEdge = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateEdge, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateFace = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateFace, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateShape = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateShape, None, TNaming_TranslateTool)
TNaming_TranslateTool_swigregister = _TNaming.TNaming_TranslateTool_swigregister
TNaming_TranslateTool_swigregister(TNaming_TranslateTool)

class Handle_TNaming_TranslateTool(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_TranslateTool_swiginit(self, _TNaming.new_Handle_TNaming_TranslateTool(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_TranslateTool_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_TranslateTool
Handle_TNaming_TranslateTool.Nullify = new_instancemethod(_TNaming.Handle_TNaming_TranslateTool_Nullify, None, Handle_TNaming_TranslateTool)
Handle_TNaming_TranslateTool.IsNull = new_instancemethod(_TNaming.Handle_TNaming_TranslateTool_IsNull, None, Handle_TNaming_TranslateTool)
Handle_TNaming_TranslateTool.GetObject = new_instancemethod(_TNaming.Handle_TNaming_TranslateTool_GetObject, None, Handle_TNaming_TranslateTool)
Handle_TNaming_TranslateTool_swigregister = _TNaming.Handle_TNaming_TranslateTool_swigregister
Handle_TNaming_TranslateTool_swigregister(Handle_TNaming_TranslateTool)

def Handle_TNaming_TranslateTool_DownCast(AnObject):
    return _TNaming.Handle_TNaming_TranslateTool_DownCast(AnObject)
Handle_TNaming_TranslateTool_DownCast = _TNaming.Handle_TNaming_TranslateTool_DownCast

class TNaming_Translator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TNaming.TNaming_Translator_swiginit(self, _TNaming.new_TNaming_Translator(*args))

    def Add(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: None

        """
        return _TNaming.TNaming_Translator_Add(self, *args)


    def Perform(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_Translator_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _TNaming.TNaming_Translator_IsDone(self, *args)


    def Copied(self, *args):
        """
        * returns copied shape

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        * returns DataMap of results; (shape <-> copied shape)

        :rtype: TopTools_DataMapOfShapeShape

        """
        return _TNaming.TNaming_Translator_Copied(self, *args)


    def DumpMap(self, *args):
        """
        :param isWrite: default value is Standard_False
        :type isWrite: bool
        :rtype: None

        """
        return _TNaming.TNaming_Translator_DumpMap(self, *args)

    __swig_destroy__ = _TNaming.delete_TNaming_Translator
TNaming_Translator.Add = new_instancemethod(_TNaming.TNaming_Translator_Add, None, TNaming_Translator)
TNaming_Translator.Perform = new_instancemethod(_TNaming.TNaming_Translator_Perform, None, TNaming_Translator)
TNaming_Translator.IsDone = new_instancemethod(_TNaming.TNaming_Translator_IsDone, None, TNaming_Translator)
TNaming_Translator.Copied = new_instancemethod(_TNaming.TNaming_Translator_Copied, None, TNaming_Translator)
TNaming_Translator.DumpMap = new_instancemethod(_TNaming.TNaming_Translator_DumpMap, None, TNaming_Translator)
TNaming_Translator_swigregister = _TNaming.TNaming_Translator_swigregister
TNaming_Translator_swigregister(TNaming_Translator)

class TNaming_UsedShapes(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TNaming.TNaming_UsedShapes_Destroy(self, *args)


    def Map(self, *args):
        """
        :rtype: TNaming_DataMapOfShapePtrRefShape

        """
        return _TNaming.TNaming_UsedShapes_Map(self, *args)


    def GetID(*args):
        """
        * Returns the ID: 2a96b614-ec8b-11d0-bee7-080009dc3333.

        :rtype: Standard_GUID

        """
        return _TNaming.TNaming_UsedShapes_GetID(*args)

    GetID = staticmethod(GetID)

    def DumpToString(self):
        """DumpToString(TNaming_UsedShapes self) -> std::string"""
        return _TNaming.TNaming_UsedShapes_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TNaming_UsedShapes(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TNaming.delete_TNaming_UsedShapes
TNaming_UsedShapes.Destroy = new_instancemethod(_TNaming.TNaming_UsedShapes_Destroy, None, TNaming_UsedShapes)
TNaming_UsedShapes.Map = new_instancemethod(_TNaming.TNaming_UsedShapes_Map, None, TNaming_UsedShapes)
TNaming_UsedShapes.DumpToString = new_instancemethod(_TNaming.TNaming_UsedShapes_DumpToString, None, TNaming_UsedShapes)
TNaming_UsedShapes_swigregister = _TNaming.TNaming_UsedShapes_swigregister
TNaming_UsedShapes_swigregister(TNaming_UsedShapes)

def TNaming_UsedShapes_GetID(*args):
    """
    * Returns the ID: 2a96b614-ec8b-11d0-bee7-080009dc3333.

    :rtype: Standard_GUID

    """
    return _TNaming.TNaming_UsedShapes_GetID(*args)

class Handle_TNaming_UsedShapes(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.Handle_TNaming_UsedShapes_swiginit(self, _TNaming.new_Handle_TNaming_UsedShapes(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TNaming.Handle_TNaming_UsedShapes_DownCast)
    __swig_destroy__ = _TNaming.delete_Handle_TNaming_UsedShapes
Handle_TNaming_UsedShapes.Nullify = new_instancemethod(_TNaming.Handle_TNaming_UsedShapes_Nullify, None, Handle_TNaming_UsedShapes)
Handle_TNaming_UsedShapes.IsNull = new_instancemethod(_TNaming.Handle_TNaming_UsedShapes_IsNull, None, Handle_TNaming_UsedShapes)
Handle_TNaming_UsedShapes.GetObject = new_instancemethod(_TNaming.Handle_TNaming_UsedShapes_GetObject, None, Handle_TNaming_UsedShapes)
Handle_TNaming_UsedShapes_swigregister = _TNaming.Handle_TNaming_UsedShapes_swigregister
Handle_TNaming_UsedShapes_swigregister(Handle_TNaming_UsedShapes)

def Handle_TNaming_UsedShapes_DownCast(AnObject):
    return _TNaming.Handle_TNaming_UsedShapes_DownCast(AnObject)
Handle_TNaming_UsedShapes_DownCast = _TNaming.Handle_TNaming_UsedShapes_DownCast



