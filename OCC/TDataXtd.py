# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TDataXtd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDataXtd', [dirname(__file__)])
        except ImportError:
            import _TDataXtd
            return _TDataXtd
        if fp is not None:
            try:
                _mod = imp.load_module('_TDataXtd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TDataXtd = swig_import_helper()
    del swig_import_helper
else:
    import _TDataXtd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDataXtd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TDataXtd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TDataXtd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TDataXtd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TDataXtd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TDataXtd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TDataXtd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TDataXtd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TDataXtd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TDataXtd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TDataXtd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TDataXtd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TDataXtd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TDataXtd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TDataXtd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TDataXtd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TDataXtd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TDataXtd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TDF
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.gp
import OCC.TNaming
import OCC.TopTools
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.Message
import OCC.TDataStd

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass


_TDataXtd.TDataXtd_RADIUS_swigconstant(_TDataXtd)
TDataXtd_RADIUS = _TDataXtd.TDataXtd_RADIUS

_TDataXtd.TDataXtd_DIAMETER_swigconstant(_TDataXtd)
TDataXtd_DIAMETER = _TDataXtd.TDataXtd_DIAMETER

_TDataXtd.TDataXtd_MINOR_RADIUS_swigconstant(_TDataXtd)
TDataXtd_MINOR_RADIUS = _TDataXtd.TDataXtd_MINOR_RADIUS

_TDataXtd.TDataXtd_MAJOR_RADIUS_swigconstant(_TDataXtd)
TDataXtd_MAJOR_RADIUS = _TDataXtd.TDataXtd_MAJOR_RADIUS

_TDataXtd.TDataXtd_TANGENT_swigconstant(_TDataXtd)
TDataXtd_TANGENT = _TDataXtd.TDataXtd_TANGENT

_TDataXtd.TDataXtd_PARALLEL_swigconstant(_TDataXtd)
TDataXtd_PARALLEL = _TDataXtd.TDataXtd_PARALLEL

_TDataXtd.TDataXtd_PERPENDICULAR_swigconstant(_TDataXtd)
TDataXtd_PERPENDICULAR = _TDataXtd.TDataXtd_PERPENDICULAR

_TDataXtd.TDataXtd_CONCENTRIC_swigconstant(_TDataXtd)
TDataXtd_CONCENTRIC = _TDataXtd.TDataXtd_CONCENTRIC

_TDataXtd.TDataXtd_COINCIDENT_swigconstant(_TDataXtd)
TDataXtd_COINCIDENT = _TDataXtd.TDataXtd_COINCIDENT

_TDataXtd.TDataXtd_DISTANCE_swigconstant(_TDataXtd)
TDataXtd_DISTANCE = _TDataXtd.TDataXtd_DISTANCE

_TDataXtd.TDataXtd_ANGLE_swigconstant(_TDataXtd)
TDataXtd_ANGLE = _TDataXtd.TDataXtd_ANGLE

_TDataXtd.TDataXtd_EQUAL_RADIUS_swigconstant(_TDataXtd)
TDataXtd_EQUAL_RADIUS = _TDataXtd.TDataXtd_EQUAL_RADIUS

_TDataXtd.TDataXtd_SYMMETRY_swigconstant(_TDataXtd)
TDataXtd_SYMMETRY = _TDataXtd.TDataXtd_SYMMETRY

_TDataXtd.TDataXtd_MIDPOINT_swigconstant(_TDataXtd)
TDataXtd_MIDPOINT = _TDataXtd.TDataXtd_MIDPOINT

_TDataXtd.TDataXtd_EQUAL_DISTANCE_swigconstant(_TDataXtd)
TDataXtd_EQUAL_DISTANCE = _TDataXtd.TDataXtd_EQUAL_DISTANCE

_TDataXtd.TDataXtd_FIX_swigconstant(_TDataXtd)
TDataXtd_FIX = _TDataXtd.TDataXtd_FIX

_TDataXtd.TDataXtd_RIGID_swigconstant(_TDataXtd)
TDataXtd_RIGID = _TDataXtd.TDataXtd_RIGID

_TDataXtd.TDataXtd_FROM_swigconstant(_TDataXtd)
TDataXtd_FROM = _TDataXtd.TDataXtd_FROM

_TDataXtd.TDataXtd_AXIS_swigconstant(_TDataXtd)
TDataXtd_AXIS = _TDataXtd.TDataXtd_AXIS

_TDataXtd.TDataXtd_MATE_swigconstant(_TDataXtd)
TDataXtd_MATE = _TDataXtd.TDataXtd_MATE

_TDataXtd.TDataXtd_ALIGN_FACES_swigconstant(_TDataXtd)
TDataXtd_ALIGN_FACES = _TDataXtd.TDataXtd_ALIGN_FACES

_TDataXtd.TDataXtd_ALIGN_AXES_swigconstant(_TDataXtd)
TDataXtd_ALIGN_AXES = _TDataXtd.TDataXtd_ALIGN_AXES

_TDataXtd.TDataXtd_AXES_ANGLE_swigconstant(_TDataXtd)
TDataXtd_AXES_ANGLE = _TDataXtd.TDataXtd_AXES_ANGLE

_TDataXtd.TDataXtd_FACES_ANGLE_swigconstant(_TDataXtd)
TDataXtd_FACES_ANGLE = _TDataXtd.TDataXtd_FACES_ANGLE

_TDataXtd.TDataXtd_ROUND_swigconstant(_TDataXtd)
TDataXtd_ROUND = _TDataXtd.TDataXtd_ROUND

_TDataXtd.TDataXtd_OFFSET_swigconstant(_TDataXtd)
TDataXtd_OFFSET = _TDataXtd.TDataXtd_OFFSET

_TDataXtd.TDataXtd_ANY_GEOM_swigconstant(_TDataXtd)
TDataXtd_ANY_GEOM = _TDataXtd.TDataXtd_ANY_GEOM

_TDataXtd.TDataXtd_POINT_swigconstant(_TDataXtd)
TDataXtd_POINT = _TDataXtd.TDataXtd_POINT

_TDataXtd.TDataXtd_LINE_swigconstant(_TDataXtd)
TDataXtd_LINE = _TDataXtd.TDataXtd_LINE

_TDataXtd.TDataXtd_CIRCLE_swigconstant(_TDataXtd)
TDataXtd_CIRCLE = _TDataXtd.TDataXtd_CIRCLE

_TDataXtd.TDataXtd_ELLIPSE_swigconstant(_TDataXtd)
TDataXtd_ELLIPSE = _TDataXtd.TDataXtd_ELLIPSE

_TDataXtd.TDataXtd_SPLINE_swigconstant(_TDataXtd)
TDataXtd_SPLINE = _TDataXtd.TDataXtd_SPLINE

_TDataXtd.TDataXtd_PLANE_swigconstant(_TDataXtd)
TDataXtd_PLANE = _TDataXtd.TDataXtd_PLANE

_TDataXtd.TDataXtd_CYLINDER_swigconstant(_TDataXtd)
TDataXtd_CYLINDER = _TDataXtd.TDataXtd_CYLINDER
class tdataxtd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IDList(*args):
        """
        * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use. Print of TDataExt enumeration =============================

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: void

        """
        return _TDataXtd.tdataxtd_IDList(*args)

    IDList = staticmethod(IDList)

    def Print(*args):
        """
        * Prints the name of the geometry dimension <GEO> as a String on the Stream <S> and returns <S>.

        :param GEO:
        :type GEO: TDataXtd_GeometryEnum
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        * Prints the name of the constraint <CTR> as a String on the Stream <S> and returns <S>.

        :param CTR:
        :type CTR: TDataXtd_ConstraintEnum
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        """
        return _TDataXtd.tdataxtd_Print(*args)

    Print = staticmethod(Print)

    def __init__(self):
        _TDataXtd.tdataxtd_swiginit(self, _TDataXtd.new_tdataxtd())
    __swig_destroy__ = _TDataXtd.delete_tdataxtd
tdataxtd_swigregister = _TDataXtd.tdataxtd_swigregister
tdataxtd_swigregister(tdataxtd)

def tdataxtd_IDList(*args):
    """
    * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use. Print of TDataExt enumeration =============================

    :param anIDList:
    :type anIDList: TDF_IDList &
    :rtype: void

    """
    return _TDataXtd.tdataxtd_IDList(*args)

def tdataxtd_Print(*args):
    """
    * Prints the name of the geometry dimension <GEO> as a String on the Stream <S> and returns <S>.

    :param GEO:
    :type GEO: TDataXtd_GeometryEnum
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    * Prints the name of the constraint <CTR> as a String on the Stream <S> and returns <S>.

    :param CTR:
    :type CTR: TDataXtd_ConstraintEnum
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    """
    return _TDataXtd.tdataxtd_Print(*args)

class TDataXtd_Array1OfTrsf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: gp_Trsf
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TDataXtd.TDataXtd_Array1OfTrsf_swiginit(self, _TDataXtd.new_TDataXtd_Array1OfTrsf(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: gp_Trsf
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataXtd_Array1OfTrsf &
        :rtype: TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataXtd_Array1OfTrsf &
        :rtype: TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: gp_Trsf
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Trsf

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Trsf

        """
        return _TDataXtd.TDataXtd_Array1OfTrsf_ChangeValue(self, *args)

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Array1OfTrsf
TDataXtd_Array1OfTrsf.Init = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Init, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Destroy = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Destroy, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.IsAllocated = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_IsAllocated, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Assign = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Assign, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Set = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Set, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Length = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Length, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Lower = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Lower, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Upper = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Upper, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.SetValue = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_SetValue, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Value = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Value, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.ChangeValue = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_ChangeValue, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf_swigregister = _TDataXtd.TDataXtd_Array1OfTrsf_swigregister
TDataXtd_Array1OfTrsf_swigregister(TDataXtd_Array1OfTrsf)

class TDataXtd_Axis(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods  ============= 	Returns the GUID for an axis.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Axis_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates an axis attribute defined by the label. In the case of a creation of an axis, a compatible named shape should already be associated with label. Exceptions Standard_NullObject if no compatible named shape is associated with the label.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Axis

        * Find, or create, an Axis attribute and set <P> as generated in the associated NamedShape. Axis methods ============

        :param label:
        :type label: TDF_Label &
        :param L:
        :type L: gp_Lin
        :rtype: Handle_TDataXtd_Axis

        """
        return _TDataXtd.TDataXtd_Axis_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Axis_swiginit(self, _TDataXtd.new_TDataXtd_Axis(*args))

    def DumpToString(self):
        """DumpToString(TDataXtd_Axis self) -> std::string"""
        return _TDataXtd.TDataXtd_Axis_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Axis(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Axis
TDataXtd_Axis.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Axis_DumpToString, None, TDataXtd_Axis)
TDataXtd_Axis_swigregister = _TDataXtd.TDataXtd_Axis_swigregister
TDataXtd_Axis_swigregister(TDataXtd_Axis)

def TDataXtd_Axis_GetID(*args):
    """
    * class methods  ============= 	Returns the GUID for an axis.

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Axis_GetID(*args)

def TDataXtd_Axis_Set(*args):
    """
    * Finds or creates an axis attribute defined by the label. In the case of a creation of an axis, a compatible named shape should already be associated with label. Exceptions Standard_NullObject if no compatible named shape is associated with the label.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_Axis

    * Find, or create, an Axis attribute and set <P> as generated in the associated NamedShape. Axis methods ============

    :param label:
    :type label: TDF_Label &
    :param L:
    :type L: gp_Lin
    :rtype: Handle_TDataXtd_Axis

    """
    return _TDataXtd.TDataXtd_Axis_Set(*args)

class Handle_TDataXtd_Axis(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Axis_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Axis(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Axis_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Axis
Handle_TDataXtd_Axis.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Axis_Nullify, None, Handle_TDataXtd_Axis)
Handle_TDataXtd_Axis.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Axis_IsNull, None, Handle_TDataXtd_Axis)
Handle_TDataXtd_Axis.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Axis_GetObject, None, Handle_TDataXtd_Axis)
Handle_TDataXtd_Axis_swigregister = _TDataXtd.Handle_TDataXtd_Axis_swigregister
Handle_TDataXtd_Axis_swigregister(Handle_TDataXtd_Axis)

def Handle_TDataXtd_Axis_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Axis_DownCast(AnObject)
Handle_TDataXtd_Axis_DownCast = _TDataXtd.Handle_TDataXtd_Axis_DownCast

class TDataXtd_Constraint(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Returns the GUID for constraints.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Constraint_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Constraint_swiginit(self, _TDataXtd.new_TDataXtd_Constraint(*args))

    def Set(self, *args):
        """
        * Finds or creates the 2D constraint attribute defined by the planar topological attribute plane and the label label. Constraint methods ==================

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Constraint

        * Finds or creates the constraint attribute defined by the topological attribute G1 and the constraint type type.

        :param type:
        :type type: TDataXtd_ConstraintEnum
        :param G1:
        :type G1: Handle_TNaming_NamedShape &
        :rtype: None

        * Finds or creates the constraint attribute defined by the topological attributes G1 and G2, and by the constraint type type.

        :param type:
        :type type: TDataXtd_ConstraintEnum
        :param G1:
        :type G1: Handle_TNaming_NamedShape &
        :param G2:
        :type G2: Handle_TNaming_NamedShape &
        :rtype: None

        * Finds or creates the constraint attribute defined by the topological attributes G1, G2 and G3, and by the constraint type type.

        :param type:
        :type type: TDataXtd_ConstraintEnum
        :param G1:
        :type G1: Handle_TNaming_NamedShape &
        :param G2:
        :type G2: Handle_TNaming_NamedShape &
        :param G3:
        :type G3: Handle_TNaming_NamedShape &
        :rtype: None

        * Finds or creates the constraint attribute defined by the topological attributes G1, G2, G3 and G4, and by the constraint type type. methods to read constraint fields =================================

        :param type:
        :type type: TDataXtd_ConstraintEnum
        :param G1:
        :type G1: Handle_TNaming_NamedShape &
        :param G2:
        :type G2: Handle_TNaming_NamedShape &
        :param G3:
        :type G3: Handle_TNaming_NamedShape &
        :param G4:
        :type G4: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_Set(self, *args)


    def GetType(self, *args):
        """
        * Returns the type of constraint. This will be an element of the TDataXtd_ConstraintEnum enumeration.

        :rtype: TDataXtd_ConstraintEnum

        """
        return _TDataXtd.TDataXtd_Constraint_GetType(self, *args)


    def IsPlanar(self, *args):
        """
        * Returns true if this constraint attribute is two-dimensional.

        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Constraint_IsPlanar(self, *args)


    def GetPlane(self, *args):
        """
        * Returns the topological attribute of the plane used for planar - i.e., 2D - constraints. This plane is attached to another label. If the constraint is not planar, in other words, 3D, this function will return a null handle.

        :rtype: Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_Constraint_GetPlane(self, *args)


    def IsDimension(self, *args):
        """
        * Returns true if this constraint attribute is a dimension, and therefore has a value.

        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Constraint_IsDimension(self, *args)


    def GetValue(self, *args):
        """
        * Returns the value of a dimension. This value is a reference to a TDataStd_Real attribute. If the attribute is not a dimension, this value will be 0. Use IsDimension to test this condition.

        :rtype: Handle_TDataStd_Real

        """
        return _TDataXtd.TDataXtd_Constraint_GetValue(self, *args)


    def NbGeometries(self, *args):
        """
        * Returns the number of geometry attributes in this constraint attribute. This number will be between 1 and 4.

        :rtype: int

        """
        return _TDataXtd.TDataXtd_Constraint_NbGeometries(self, *args)


    def GetGeometry(self, *args):
        """
        * Returns the integer index Index used to access the array of the constraint or stored geometries of a dimension Index has a value between 1 and 4. methods to write constraint fields (use builder) ==================================

        :param Index:
        :type Index: int
        :rtype: Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_Constraint_GetGeometry(self, *args)


    def ClearGeometries(self, *args):
        """
        * Removes the geometries involved in the constraint or dimension from the array of topological attributes where they are stored.

        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_ClearGeometries(self, *args)


    def SetType(self, *args):
        """
        * Finds or creates the type of constraint CTR.

        :param CTR:
        :type CTR: TDataXtd_ConstraintEnum
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_SetType(self, *args)


    def SetPlane(self, *args):
        """
        * Finds or creates the plane of the 2D constraint attribute, defined by the planar topological attribute plane.

        :param plane:
        :type plane: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_SetPlane(self, *args)


    def SetValue(self, *args):
        """
        * Finds or creates the real number value V of the dimension constraint attribute.

        :param V:
        :type V: Handle_TDataStd_Real &
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_SetValue(self, *args)


    def SetGeometry(self, *args):
        """
        * Finds or creates the underlying geometry of the constraint defined by the topological attribute G and the integer index Index.

        :param Index:
        :type Index: int
        :param G:
        :type G: Handle_TNaming_NamedShape &
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_SetGeometry(self, *args)


    def Verified(self, *args):
        """
        * Returns true if this constraint attribute is valid. By default, true is returned. When the value of a dimension is changed or when a geometry is moved, false is returned until the solver sets it back to true.

        :rtype: bool

        * Returns true if this constraint attribute defined by status is valid. By default, true is returned. When the value of a dimension is changed or when a geometry is moved, false is returned until the solver sets it back to true. If status is false, Verified is set to false.

        :param status:
        :type status: bool
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Constraint_Verified(self, *args)


    def Inverted(self, *args):
        """
        :param status:
        :type status: bool
        :rtype: None

        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Constraint_Inverted(self, *args)


    def Reversed(self, *args):
        """
        :param status:
        :type status: bool
        :rtype: None

        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Constraint_Reversed(self, *args)


    def CollectChildConstraints(*args):
        """
        * collects constraints on Childs for label <aLabel>

        :param aLabel:
        :type aLabel: TDF_Label &
        :param TheList:
        :type TheList: TDF_LabelList &
        :rtype: void

        """
        return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

    CollectChildConstraints = staticmethod(CollectChildConstraints)

    def DumpToString(self):
        """DumpToString(TDataXtd_Constraint self) -> std::string"""
        return _TDataXtd.TDataXtd_Constraint_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Constraint(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Constraint
TDataXtd_Constraint.Set = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Set, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetType = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetType, None, TDataXtd_Constraint)
TDataXtd_Constraint.IsPlanar = new_instancemethod(_TDataXtd.TDataXtd_Constraint_IsPlanar, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetPlane = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetPlane, None, TDataXtd_Constraint)
TDataXtd_Constraint.IsDimension = new_instancemethod(_TDataXtd.TDataXtd_Constraint_IsDimension, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetValue = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetValue, None, TDataXtd_Constraint)
TDataXtd_Constraint.NbGeometries = new_instancemethod(_TDataXtd.TDataXtd_Constraint_NbGeometries, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetGeometry = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetGeometry, None, TDataXtd_Constraint)
TDataXtd_Constraint.ClearGeometries = new_instancemethod(_TDataXtd.TDataXtd_Constraint_ClearGeometries, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetType = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetType, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetPlane = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetPlane, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetValue = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetValue, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetGeometry = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetGeometry, None, TDataXtd_Constraint)
TDataXtd_Constraint.Verified = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Verified, None, TDataXtd_Constraint)
TDataXtd_Constraint.Inverted = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Inverted, None, TDataXtd_Constraint)
TDataXtd_Constraint.Reversed = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Reversed, None, TDataXtd_Constraint)
TDataXtd_Constraint.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Constraint_DumpToString, None, TDataXtd_Constraint)
TDataXtd_Constraint_swigregister = _TDataXtd.TDataXtd_Constraint_swigregister
TDataXtd_Constraint_swigregister(TDataXtd_Constraint)

def TDataXtd_Constraint_GetID(*args):
    """
    * Returns the GUID for constraints.

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Constraint_GetID(*args)

def TDataXtd_Constraint_CollectChildConstraints(*args):
    """
    * collects constraints on Childs for label <aLabel>

    :param aLabel:
    :type aLabel: TDF_Label &
    :param TheList:
    :type TheList: TDF_LabelList &
    :rtype: void

    """
    return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

class Handle_TDataXtd_Constraint(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Constraint_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Constraint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Constraint_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Constraint
Handle_TDataXtd_Constraint.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Constraint_Nullify, None, Handle_TDataXtd_Constraint)
Handle_TDataXtd_Constraint.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Constraint_IsNull, None, Handle_TDataXtd_Constraint)
Handle_TDataXtd_Constraint.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Constraint_GetObject, None, Handle_TDataXtd_Constraint)
Handle_TDataXtd_Constraint_swigregister = _TDataXtd.Handle_TDataXtd_Constraint_swigregister
Handle_TDataXtd_Constraint_swigregister(Handle_TDataXtd_Constraint)

def Handle_TDataXtd_Constraint_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Constraint_DownCast(AnObject)
Handle_TDataXtd_Constraint_DownCast = _TDataXtd.Handle_TDataXtd_Constraint_DownCast

class TDataXtd_Geometry(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        * API class methods  ================= Finds, or creates, a Geometry attribute defined by the label label. The default type of geometry is the value ANY_GEOM of the enumeration TDataXtd_GeometryEnum. To specify another value of this enumeration, use the function SetType.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Geometry

        """
        return _TDataXtd.TDataXtd_Geometry_Set(*args)

    Set = staticmethod(Set)

    def Type(*args):
        """
        * Returns the label L used to define the type of geometric construction for the geometry attribute.

        :param L:
        :type L: TDF_Label &
        :rtype: TDataXtd_GeometryEnum

        * Returns the topological attribute S used to define the type of geometric construction for the geometry attribute.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :rtype: TDataXtd_GeometryEnum

        """
        return _TDataXtd.TDataXtd_Geometry_Type(*args)

    Type = staticmethod(Type)

    def Point(*args):
        """
        * Returns the point attribute defined by the label L and the point G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Pnt
        :rtype: bool

        * Returns the point attribute defined by the topological attribute S and the point G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Pnt
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Point(*args)

    Point = staticmethod(Point)

    def Axis(*args):
        """
        * Returns the axis attribute defined by the label L and the axis G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Ax1
        :rtype: bool

        * Returns the axis attribute defined by the topological attribute S and the axis G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Ax1
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Axis(*args)

    Axis = staticmethod(Axis)

    def Line(*args):
        """
        * Returns the line attribute defined by the label L and the line G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Lin
        :rtype: bool

        * Returns the line attribute defined by the topological attribute S and the line G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Lin
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        * Returns the circle attribute defined by the label L and the circle G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Circ
        :rtype: bool

        * Returns the circle attribute defined by the topological attribute S and the circle G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Circ
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        * Returns the ellipse attribute defined by the label L and the ellipse G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Elips
        :rtype: bool

        * Returns the ellipse attribute defined by the topological attribute S and the ellipse G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Elips
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Plane(*args):
        """
        * Returns the plane attribute defined by the label L and the plane G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Pln
        :rtype: bool

        * Returns the plane attribute defined by the topological attribute S and the plane G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Pln
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Plane(*args)

    Plane = staticmethod(Plane)

    def Cylinder(*args):
        """
        * Returns the cylinder attribute defined by the label L and the cylinder G.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: gp_Cylinder
        :rtype: bool

        * Returns the cylinder attribute defined by the topological attribute S and the cylinder G.

        :param S:
        :type S: Handle_TNaming_NamedShape &
        :param G:
        :type G: gp_Cylinder
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def GetID(*args):
        """
        * Returns the GUID for geometry attributes.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Geometry_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        * This and the next methods are used to retrieve underlying geometry of the NamedShape, even if noone Geometry Attribute is associated . if not found or not compliant geometry return False.

        :rtype: None

        """
        _TDataXtd.TDataXtd_Geometry_swiginit(self, _TDataXtd.new_TDataXtd_Geometry(*args))

    def SetType(self, *args):
        """
        * Returns the type of geometric construction T of this attribute. T will be a value of the enumeration TDataXtd_GeometryEnum.

        :param T:
        :type T: TDataXtd_GeometryEnum
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Geometry_SetType(self, *args)


    def GetType(self, *args):
        """
        * Returns the type of geometric construction.

        :rtype: TDataXtd_GeometryEnum

        """
        return _TDataXtd.TDataXtd_Geometry_GetType(self, *args)


    def DumpToString(self):
        """DumpToString(TDataXtd_Geometry self) -> std::string"""
        return _TDataXtd.TDataXtd_Geometry_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Geometry(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Geometry
TDataXtd_Geometry.SetType = new_instancemethod(_TDataXtd.TDataXtd_Geometry_SetType, None, TDataXtd_Geometry)
TDataXtd_Geometry.GetType = new_instancemethod(_TDataXtd.TDataXtd_Geometry_GetType, None, TDataXtd_Geometry)
TDataXtd_Geometry.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Geometry_DumpToString, None, TDataXtd_Geometry)
TDataXtd_Geometry_swigregister = _TDataXtd.TDataXtd_Geometry_swigregister
TDataXtd_Geometry_swigregister(TDataXtd_Geometry)

def TDataXtd_Geometry_Set(*args):
    """
    * API class methods  ================= Finds, or creates, a Geometry attribute defined by the label label. The default type of geometry is the value ANY_GEOM of the enumeration TDataXtd_GeometryEnum. To specify another value of this enumeration, use the function SetType.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_Geometry

    """
    return _TDataXtd.TDataXtd_Geometry_Set(*args)

def TDataXtd_Geometry_Type(*args):
    """
    * Returns the label L used to define the type of geometric construction for the geometry attribute.

    :param L:
    :type L: TDF_Label &
    :rtype: TDataXtd_GeometryEnum

    * Returns the topological attribute S used to define the type of geometric construction for the geometry attribute.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :rtype: TDataXtd_GeometryEnum

    """
    return _TDataXtd.TDataXtd_Geometry_Type(*args)

def TDataXtd_Geometry_Point(*args):
    """
    * Returns the point attribute defined by the label L and the point G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Pnt
    :rtype: bool

    * Returns the point attribute defined by the topological attribute S and the point G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Pnt
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Point(*args)

def TDataXtd_Geometry_Axis(*args):
    """
    * Returns the axis attribute defined by the label L and the axis G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Ax1
    :rtype: bool

    * Returns the axis attribute defined by the topological attribute S and the axis G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Ax1
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Axis(*args)

def TDataXtd_Geometry_Line(*args):
    """
    * Returns the line attribute defined by the label L and the line G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Lin
    :rtype: bool

    * Returns the line attribute defined by the topological attribute S and the line G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Lin
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Line(*args)

def TDataXtd_Geometry_Circle(*args):
    """
    * Returns the circle attribute defined by the label L and the circle G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Circ
    :rtype: bool

    * Returns the circle attribute defined by the topological attribute S and the circle G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Circ
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Circle(*args)

def TDataXtd_Geometry_Ellipse(*args):
    """
    * Returns the ellipse attribute defined by the label L and the ellipse G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Elips
    :rtype: bool

    * Returns the ellipse attribute defined by the topological attribute S and the ellipse G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Elips
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

def TDataXtd_Geometry_Plane(*args):
    """
    * Returns the plane attribute defined by the label L and the plane G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Pln
    :rtype: bool

    * Returns the plane attribute defined by the topological attribute S and the plane G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Pln
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Plane(*args)

def TDataXtd_Geometry_Cylinder(*args):
    """
    * Returns the cylinder attribute defined by the label L and the cylinder G.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: gp_Cylinder
    :rtype: bool

    * Returns the cylinder attribute defined by the topological attribute S and the cylinder G.

    :param S:
    :type S: Handle_TNaming_NamedShape &
    :param G:
    :type G: gp_Cylinder
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

def TDataXtd_Geometry_GetID(*args):
    """
    * Returns the GUID for geometry attributes.

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Geometry_GetID(*args)

class Handle_TDataXtd_Geometry(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Geometry_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Geometry(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Geometry_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Geometry
Handle_TDataXtd_Geometry.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Geometry_Nullify, None, Handle_TDataXtd_Geometry)
Handle_TDataXtd_Geometry.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Geometry_IsNull, None, Handle_TDataXtd_Geometry)
Handle_TDataXtd_Geometry.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Geometry_GetObject, None, Handle_TDataXtd_Geometry)
Handle_TDataXtd_Geometry_swigregister = _TDataXtd.Handle_TDataXtd_Geometry_swigregister
Handle_TDataXtd_Geometry_swigregister(Handle_TDataXtd_Geometry)

def Handle_TDataXtd_Geometry_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Geometry_DownCast(AnObject)
Handle_TDataXtd_Geometry_DownCast = _TDataXtd.Handle_TDataXtd_Geometry_DownCast

class TDataXtd_HArray1OfTrsf(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: gp_Trsf
        :rtype: None

        """
        _TDataXtd.TDataXtd_HArray1OfTrsf_swiginit(self, _TDataXtd.new_TDataXtd_HArray1OfTrsf(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: gp_Trsf
        :rtype: None

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: gp_Trsf
        :rtype: None

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Trsf

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Trsf

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_HArray1OfTrsf(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_HArray1OfTrsf
TDataXtd_HArray1OfTrsf.Init = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Init, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.Length = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Length, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.Lower = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Lower, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.Upper = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Upper, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.SetValue = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_SetValue, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.Value = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Value, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.ChangeValue = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_ChangeValue, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.Array1 = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Array1, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.ChangeArray1 = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_ChangeArray1, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf_swigregister = _TDataXtd.TDataXtd_HArray1OfTrsf_swigregister
TDataXtd_HArray1OfTrsf_swigregister(TDataXtd_HArray1OfTrsf)

class Handle_TDataXtd_HArray1OfTrsf(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_swiginit(self, _TDataXtd.new_Handle_TDataXtd_HArray1OfTrsf(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_HArray1OfTrsf
Handle_TDataXtd_HArray1OfTrsf.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Nullify, None, Handle_TDataXtd_HArray1OfTrsf)
Handle_TDataXtd_HArray1OfTrsf.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsNull, None, Handle_TDataXtd_HArray1OfTrsf)
Handle_TDataXtd_HArray1OfTrsf.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_HArray1OfTrsf_GetObject, None, Handle_TDataXtd_HArray1OfTrsf)
Handle_TDataXtd_HArray1OfTrsf_swigregister = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_swigregister
Handle_TDataXtd_HArray1OfTrsf_swigregister(Handle_TDataXtd_HArray1OfTrsf)

def Handle_TDataXtd_HArray1OfTrsf_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast(AnObject)
Handle_TDataXtd_HArray1OfTrsf_DownCast = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast

class TDataXtd_Pattern(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Pattern_GetID(*args)

    GetID = staticmethod(GetID)

    def PatternID(self, *args):
        """
        * Returns the ID of the attribute.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Pattern_PatternID(self, *args)


    def NbTrsfs(self, *args):
        """
        * Give the number of transformation

        :rtype: int

        """
        return _TDataXtd.TDataXtd_Pattern_NbTrsfs(self, *args)


    def ComputeTrsfs(self, *args):
        """
        * Give the transformations

        :param Trsfs:
        :type Trsfs: TDataXtd_Array1OfTrsf &
        :rtype: void

        """
        return _TDataXtd.TDataXtd_Pattern_ComputeTrsfs(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Pattern(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Pattern
TDataXtd_Pattern.PatternID = new_instancemethod(_TDataXtd.TDataXtd_Pattern_PatternID, None, TDataXtd_Pattern)
TDataXtd_Pattern.NbTrsfs = new_instancemethod(_TDataXtd.TDataXtd_Pattern_NbTrsfs, None, TDataXtd_Pattern)
TDataXtd_Pattern.ComputeTrsfs = new_instancemethod(_TDataXtd.TDataXtd_Pattern_ComputeTrsfs, None, TDataXtd_Pattern)
TDataXtd_Pattern_swigregister = _TDataXtd.TDataXtd_Pattern_swigregister
TDataXtd_Pattern_swigregister(TDataXtd_Pattern)

def TDataXtd_Pattern_GetID(*args):
    """
    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Pattern_GetID(*args)

class Handle_TDataXtd_Pattern(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Pattern_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Pattern(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Pattern_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Pattern
Handle_TDataXtd_Pattern.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Pattern_Nullify, None, Handle_TDataXtd_Pattern)
Handle_TDataXtd_Pattern.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Pattern_IsNull, None, Handle_TDataXtd_Pattern)
Handle_TDataXtd_Pattern.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Pattern_GetObject, None, Handle_TDataXtd_Pattern)
Handle_TDataXtd_Pattern_swigregister = _TDataXtd.Handle_TDataXtd_Pattern_swigregister
Handle_TDataXtd_Pattern_swigregister(Handle_TDataXtd_Pattern)

def Handle_TDataXtd_Pattern_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Pattern_DownCast(AnObject)
Handle_TDataXtd_Pattern_DownCast = _TDataXtd.Handle_TDataXtd_Pattern_DownCast

class TDataXtd_Placement(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Placement_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Find, or create, an Placement attribute. the Placement attribute is returned. Placement methods =================

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Placement

        """
        return _TDataXtd.TDataXtd_Placement_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Placement_swiginit(self, _TDataXtd.new_TDataXtd_Placement(*args))

    def DumpToString(self):
        """DumpToString(TDataXtd_Placement self) -> std::string"""
        return _TDataXtd.TDataXtd_Placement_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Placement(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Placement
TDataXtd_Placement.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Placement_DumpToString, None, TDataXtd_Placement)
TDataXtd_Placement_swigregister = _TDataXtd.TDataXtd_Placement_swigregister
TDataXtd_Placement_swigregister(TDataXtd_Placement)

def TDataXtd_Placement_GetID(*args):
    """
    * class methods =============

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Placement_GetID(*args)

def TDataXtd_Placement_Set(*args):
    """
    * Find, or create, an Placement attribute. the Placement attribute is returned. Placement methods =================

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_Placement

    """
    return _TDataXtd.TDataXtd_Placement_Set(*args)

class Handle_TDataXtd_Placement(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Placement_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Placement(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Placement_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Placement
Handle_TDataXtd_Placement.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Placement_Nullify, None, Handle_TDataXtd_Placement)
Handle_TDataXtd_Placement.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Placement_IsNull, None, Handle_TDataXtd_Placement)
Handle_TDataXtd_Placement.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Placement_GetObject, None, Handle_TDataXtd_Placement)
Handle_TDataXtd_Placement_swigregister = _TDataXtd.Handle_TDataXtd_Placement_swigregister
Handle_TDataXtd_Placement_swigregister(Handle_TDataXtd_Placement)

def Handle_TDataXtd_Placement_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Placement_DownCast(AnObject)
Handle_TDataXtd_Placement_DownCast = _TDataXtd.Handle_TDataXtd_Placement_DownCast

class TDataXtd_Plane(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for plane attributes.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Plane_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates the plane attribute defined by the label label. Warning If you are creating the attribute with this syntax, a planar face should already be associated with label.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Plane

        * Finds, or creates, a Plane attribute and sets <P> as generated the associated NamedShape. Plane methods  =============

        :param label:
        :type label: TDF_Label &
        :param P:
        :type P: gp_Pln
        :rtype: Handle_TDataXtd_Plane

        """
        return _TDataXtd.TDataXtd_Plane_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Plane_swiginit(self, _TDataXtd.new_TDataXtd_Plane(*args))

    def DumpToString(self):
        """DumpToString(TDataXtd_Plane self) -> std::string"""
        return _TDataXtd.TDataXtd_Plane_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Plane(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Plane
TDataXtd_Plane.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Plane_DumpToString, None, TDataXtd_Plane)
TDataXtd_Plane_swigregister = _TDataXtd.TDataXtd_Plane_swigregister
TDataXtd_Plane_swigregister(TDataXtd_Plane)

def TDataXtd_Plane_GetID(*args):
    """
    * class methods ============= Returns the GUID for plane attributes.

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Plane_GetID(*args)

def TDataXtd_Plane_Set(*args):
    """
    * Finds or creates the plane attribute defined by the label label. Warning If you are creating the attribute with this syntax, a planar face should already be associated with label.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_Plane

    * Finds, or creates, a Plane attribute and sets <P> as generated the associated NamedShape. Plane methods  =============

    :param label:
    :type label: TDF_Label &
    :param P:
    :type P: gp_Pln
    :rtype: Handle_TDataXtd_Plane

    """
    return _TDataXtd.TDataXtd_Plane_Set(*args)

class Handle_TDataXtd_Plane(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Plane_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Plane(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Plane_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Plane
Handle_TDataXtd_Plane.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Plane_Nullify, None, Handle_TDataXtd_Plane)
Handle_TDataXtd_Plane.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Plane_IsNull, None, Handle_TDataXtd_Plane)
Handle_TDataXtd_Plane.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Plane_GetObject, None, Handle_TDataXtd_Plane)
Handle_TDataXtd_Plane_swigregister = _TDataXtd.Handle_TDataXtd_Plane_swigregister
Handle_TDataXtd_Plane_swigregister(Handle_TDataXtd_Plane)

def Handle_TDataXtd_Plane_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Plane_DownCast(AnObject)
Handle_TDataXtd_Plane_DownCast = _TDataXtd.Handle_TDataXtd_Plane_DownCast

class TDataXtd_Point(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for point attributes.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Point_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Sets the label Label as a point attribute. If no object is found, a point attribute is created.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Point

        * Sets the label Label as a point attribute containing the point P. If no object is found, a point attribute is created. Point methods =============

        :param label:
        :type label: TDF_Label &
        :param P:
        :type P: gp_Pnt
        :rtype: Handle_TDataXtd_Point

        """
        return _TDataXtd.TDataXtd_Point_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Point_swiginit(self, _TDataXtd.new_TDataXtd_Point(*args))

    def DumpToString(self):
        """DumpToString(TDataXtd_Point self) -> std::string"""
        return _TDataXtd.TDataXtd_Point_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Point(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Point
TDataXtd_Point.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Point_DumpToString, None, TDataXtd_Point)
TDataXtd_Point_swigregister = _TDataXtd.TDataXtd_Point_swigregister
TDataXtd_Point_swigregister(TDataXtd_Point)

def TDataXtd_Point_GetID(*args):
    """
    * class methods ============= Returns the GUID for point attributes.

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Point_GetID(*args)

def TDataXtd_Point_Set(*args):
    """
    * Sets the label Label as a point attribute. If no object is found, a point attribute is created.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_Point

    * Sets the label Label as a point attribute containing the point P. If no object is found, a point attribute is created. Point methods =============

    :param label:
    :type label: TDF_Label &
    :param P:
    :type P: gp_Pnt
    :rtype: Handle_TDataXtd_Point

    """
    return _TDataXtd.TDataXtd_Point_Set(*args)

class Handle_TDataXtd_Point(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Point_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Point(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Point_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Point
Handle_TDataXtd_Point.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Point_Nullify, None, Handle_TDataXtd_Point)
Handle_TDataXtd_Point.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Point_IsNull, None, Handle_TDataXtd_Point)
Handle_TDataXtd_Point.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Point_GetObject, None, Handle_TDataXtd_Point)
Handle_TDataXtd_Point_swigregister = _TDataXtd.Handle_TDataXtd_Point_swigregister
Handle_TDataXtd_Point_swigregister(Handle_TDataXtd_Point)

def Handle_TDataXtd_Point_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Point_DownCast(AnObject)
Handle_TDataXtd_Point_DownCast = _TDataXtd.Handle_TDataXtd_Point_DownCast

class TDataXtd_Position(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        * Create if not found the TDataXtd_Position attribute set its position to <aPos>

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aPos:
        :type aPos: gp_Pnt
        :rtype: void

        * Find an existing, or create an empty, Position.  the Position attribute is returned.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: Handle_TDataXtd_Position

        """
        return _TDataXtd.TDataXtd_Position_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        * Search label <aLabel) for the TDataXtd_Position attribute and get its position if found returns True

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aPos:
        :type aPos: gp_Pnt
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Position_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Position_swiginit(self, _TDataXtd.new_TDataXtd_Position(*args))

    def GetID(*args):
        """
        * Returns the ID of the attribute.

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Position_GetID(*args)

    GetID = staticmethod(GetID)

    def GetPosition(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _TDataXtd.TDataXtd_Position_GetPosition(self, *args)


    def SetPosition(self, *args):
        """
        :param aPos:
        :type aPos: gp_Pnt
        :rtype: None

        """
        return _TDataXtd.TDataXtd_Position_SetPosition(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Position(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Position
TDataXtd_Position.GetPosition = new_instancemethod(_TDataXtd.TDataXtd_Position_GetPosition, None, TDataXtd_Position)
TDataXtd_Position.SetPosition = new_instancemethod(_TDataXtd.TDataXtd_Position_SetPosition, None, TDataXtd_Position)
TDataXtd_Position_swigregister = _TDataXtd.TDataXtd_Position_swigregister
TDataXtd_Position_swigregister(TDataXtd_Position)

def TDataXtd_Position_Set(*args):
    """
    * Create if not found the TDataXtd_Position attribute set its position to <aPos>

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aPos:
    :type aPos: gp_Pnt
    :rtype: void

    * Find an existing, or create an empty, Position.  the Position attribute is returned.

    :param aLabel:
    :type aLabel: TDF_Label &
    :rtype: Handle_TDataXtd_Position

    """
    return _TDataXtd.TDataXtd_Position_Set(*args)

def TDataXtd_Position_Get(*args):
    """
    * Search label <aLabel) for the TDataXtd_Position attribute and get its position if found returns True

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aPos:
    :type aPos: gp_Pnt
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Position_Get(*args)

def TDataXtd_Position_GetID(*args):
    """
    * Returns the ID of the attribute.

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Position_GetID(*args)

class Handle_TDataXtd_Position(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Position_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Position(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Position_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Position
Handle_TDataXtd_Position.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Position_Nullify, None, Handle_TDataXtd_Position)
Handle_TDataXtd_Position.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Position_IsNull, None, Handle_TDataXtd_Position)
Handle_TDataXtd_Position.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Position_GetObject, None, Handle_TDataXtd_Position)
Handle_TDataXtd_Position_swigregister = _TDataXtd.Handle_TDataXtd_Position_swigregister
Handle_TDataXtd_Position_swigregister(Handle_TDataXtd_Position)

def Handle_TDataXtd_Position_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Position_DownCast(AnObject)
Handle_TDataXtd_Position_DownCast = _TDataXtd.Handle_TDataXtd_Position_DownCast

class TDataXtd_Shape(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Find(*args):
        """
        * class methods ============= try to retrieve a Shape attribute at <current> label or in fathers label of <current>. Returns True if found and set <S>.

        :param current:
        :type current: TDF_Label &
        :param S:
        :type S: Handle_TDataXtd_Shape &
        :rtype: bool

        """
        return _TDataXtd.TDataXtd_Shape_Find(*args)

    Find = staticmethod(Find)

    def New(*args):
        """
        * Find, or create, a Shape attribute. the Shape attribute is returned. Raises if <label> has attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_Shape

        """
        return _TDataXtd.TDataXtd_Shape_New(*args)

    New = staticmethod(New)

    def Set(*args):
        """
        * Create or update associated NamedShape attribute. the Shape attribute is returned.

        :param label:
        :type label: TDF_Label &
        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: Handle_TDataXtd_Shape

        """
        return _TDataXtd.TDataXtd_Shape_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        * the Shape from associated NamedShape attribute  is returned.

        :param label:
        :type label: TDF_Label &
        :rtype: TopoDS_Shape

        """
        return _TDataXtd.TDataXtd_Shape_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args):
        """
        * Shape methods ============

        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_Shape_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_Shape_swiginit(self, _TDataXtd.new_TDataXtd_Shape(*args))

    def DumpToString(self):
        """DumpToString(TDataXtd_Shape self) -> std::string"""
        return _TDataXtd.TDataXtd_Shape_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_Shape(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Shape
TDataXtd_Shape.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Shape_DumpToString, None, TDataXtd_Shape)
TDataXtd_Shape_swigregister = _TDataXtd.TDataXtd_Shape_swigregister
TDataXtd_Shape_swigregister(TDataXtd_Shape)

def TDataXtd_Shape_Find(*args):
    """
    * class methods ============= try to retrieve a Shape attribute at <current> label or in fathers label of <current>. Returns True if found and set <S>.

    :param current:
    :type current: TDF_Label &
    :param S:
    :type S: Handle_TDataXtd_Shape &
    :rtype: bool

    """
    return _TDataXtd.TDataXtd_Shape_Find(*args)

def TDataXtd_Shape_New(*args):
    """
    * Find, or create, a Shape attribute. the Shape attribute is returned. Raises if <label> has attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_Shape

    """
    return _TDataXtd.TDataXtd_Shape_New(*args)

def TDataXtd_Shape_Set(*args):
    """
    * Create or update associated NamedShape attribute. the Shape attribute is returned.

    :param label:
    :type label: TDF_Label &
    :param shape:
    :type shape: TopoDS_Shape &
    :rtype: Handle_TDataXtd_Shape

    """
    return _TDataXtd.TDataXtd_Shape_Set(*args)

def TDataXtd_Shape_Get(*args):
    """
    * the Shape from associated NamedShape attribute  is returned.

    :param label:
    :type label: TDF_Label &
    :rtype: TopoDS_Shape

    """
    return _TDataXtd.TDataXtd_Shape_Get(*args)

def TDataXtd_Shape_GetID(*args):
    """
    * Shape methods ============

    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_Shape_GetID(*args)

class Handle_TDataXtd_Shape(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_Shape_swiginit(self, _TDataXtd.new_Handle_TDataXtd_Shape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Shape_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Shape
Handle_TDataXtd_Shape.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_Shape_Nullify, None, Handle_TDataXtd_Shape)
Handle_TDataXtd_Shape.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_Shape_IsNull, None, Handle_TDataXtd_Shape)
Handle_TDataXtd_Shape.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_Shape_GetObject, None, Handle_TDataXtd_Shape)
Handle_TDataXtd_Shape_swigregister = _TDataXtd.Handle_TDataXtd_Shape_swigregister
Handle_TDataXtd_Shape_swigregister(Handle_TDataXtd_Shape)

def Handle_TDataXtd_Shape_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_Shape_DownCast(AnObject)
Handle_TDataXtd_Shape_DownCast = _TDataXtd.Handle_TDataXtd_Shape_DownCast

class TDataXtd_PatternStd(TDataXtd_Pattern):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetPatternID(*args):
        """
        :rtype: Standard_GUID

        """
        return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

    GetPatternID = staticmethod(GetPatternID)

    def Set(*args):
        """
        * Find, or create, a PatternStd attribute

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataXtd_PatternStd

        """
        return _TDataXtd.TDataXtd_PatternStd_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataXtd.TDataXtd_PatternStd_swiginit(self, _TDataXtd.new_TDataXtd_PatternStd(*args))

    def Signature(self, *args):
        """
        :param signature:
        :type signature: int
        :rtype: None

        :rtype: int

        """
        return _TDataXtd.TDataXtd_PatternStd_Signature(self, *args)


    def Axis1(self, *args):
        """
        :param Axis1:
        :type Axis1: Handle_TNaming_NamedShape &
        :rtype: None

        :rtype: Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1(self, *args)


    def Axis2(self, *args):
        """
        :param Axis2:
        :type Axis2: Handle_TNaming_NamedShape &
        :rtype: None

        :rtype: Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2(self, *args)


    def Axis1Reversed(self, *args):
        """
        :param Axis1Reversed:
        :type Axis1Reversed: bool
        :rtype: None

        :rtype: bool

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1Reversed(self, *args)


    def Axis2Reversed(self, *args):
        """
        :param Axis2Reversed:
        :type Axis2Reversed: bool
        :rtype: None

        :rtype: bool

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2Reversed(self, *args)


    def Value1(self, *args):
        """
        :param value:
        :type value: Handle_TDataStd_Real &
        :rtype: None

        :rtype: Handle_TDataStd_Real

        """
        return _TDataXtd.TDataXtd_PatternStd_Value1(self, *args)


    def Value2(self, *args):
        """
        :param value:
        :type value: Handle_TDataStd_Real &
        :rtype: None

        :rtype: Handle_TDataStd_Real

        """
        return _TDataXtd.TDataXtd_PatternStd_Value2(self, *args)


    def NbInstances1(self, *args):
        """
        :param NbInstances1:
        :type NbInstances1: Handle_TDataStd_Integer &
        :rtype: None

        :rtype: Handle_TDataStd_Integer

        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances1(self, *args)


    def NbInstances2(self, *args):
        """
        :param NbInstances2:
        :type NbInstances2: Handle_TDataStd_Integer &
        :rtype: None

        :rtype: Handle_TDataStd_Integer

        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances2(self, *args)


    def Mirror(self, *args):
        """
        :param plane:
        :type plane: Handle_TNaming_NamedShape &
        :rtype: None

        :rtype: Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_PatternStd_Mirror(self, *args)


    def DumpToString(self):
        """DumpToString(TDataXtd_PatternStd self) -> std::string"""
        return _TDataXtd.TDataXtd_PatternStd_DumpToString(self)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TDataXtd_PatternStd(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_PatternStd
TDataXtd_PatternStd.Signature = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Signature, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis1 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis1, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis2 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis2, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis1Reversed = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis1Reversed, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis2Reversed = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis2Reversed, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Value1 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Value1, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Value2 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Value2, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.NbInstances1 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_NbInstances1, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.NbInstances2 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_NbInstances2, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Mirror = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Mirror, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_DumpToString, None, TDataXtd_PatternStd)
TDataXtd_PatternStd_swigregister = _TDataXtd.TDataXtd_PatternStd_swigregister
TDataXtd_PatternStd_swigregister(TDataXtd_PatternStd)

def TDataXtd_PatternStd_GetPatternID(*args):
    """
    :rtype: Standard_GUID

    """
    return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

def TDataXtd_PatternStd_Set(*args):
    """
    * Find, or create, a PatternStd attribute

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataXtd_PatternStd

    """
    return _TDataXtd.TDataXtd_PatternStd_Set(*args)

class Handle_TDataXtd_PatternStd(Handle_TDataXtd_Pattern):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.Handle_TDataXtd_PatternStd_swiginit(self, _TDataXtd.new_Handle_TDataXtd_PatternStd(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_PatternStd_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_PatternStd
Handle_TDataXtd_PatternStd.Nullify = new_instancemethod(_TDataXtd.Handle_TDataXtd_PatternStd_Nullify, None, Handle_TDataXtd_PatternStd)
Handle_TDataXtd_PatternStd.IsNull = new_instancemethod(_TDataXtd.Handle_TDataXtd_PatternStd_IsNull, None, Handle_TDataXtd_PatternStd)
Handle_TDataXtd_PatternStd.GetObject = new_instancemethod(_TDataXtd.Handle_TDataXtd_PatternStd_GetObject, None, Handle_TDataXtd_PatternStd)
Handle_TDataXtd_PatternStd_swigregister = _TDataXtd.Handle_TDataXtd_PatternStd_swigregister
Handle_TDataXtd_PatternStd_swigregister(Handle_TDataXtd_PatternStd)

def Handle_TDataXtd_PatternStd_DownCast(AnObject):
    return _TDataXtd.Handle_TDataXtd_PatternStd_DownCast(AnObject)
Handle_TDataXtd_PatternStd_DownCast = _TDataXtd.Handle_TDataXtd_PatternStd_DownCast



