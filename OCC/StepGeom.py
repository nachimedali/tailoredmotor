# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepGeom.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepGeom', [dirname(__file__)])
        except ImportError:
            import _StepGeom
            return _StepGeom
        if fp is not None:
            try:
                _mod = imp.load_module('_StepGeom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StepGeom = swig_import_helper()
    del swig_import_helper
else:
    import _StepGeom
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepGeom.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepGeom.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepGeom.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepGeom.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepGeom.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepGeom.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepGeom.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepGeom.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepGeom.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepGeom.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepGeom.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepGeom.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepGeom.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepGeom.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepGeom.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepGeom.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepGeom.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MMgt
import OCC.StepRepr
import OCC.TCollection
import OCC.StepBasic
import OCC.TColStd
import OCC.Interface
import OCC.Message

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass


_StepGeom.StepGeom_bscfPolylineForm_swigconstant(_StepGeom)
StepGeom_bscfPolylineForm = _StepGeom.StepGeom_bscfPolylineForm

_StepGeom.StepGeom_bscfCircularArc_swigconstant(_StepGeom)
StepGeom_bscfCircularArc = _StepGeom.StepGeom_bscfCircularArc

_StepGeom.StepGeom_bscfEllipticArc_swigconstant(_StepGeom)
StepGeom_bscfEllipticArc = _StepGeom.StepGeom_bscfEllipticArc

_StepGeom.StepGeom_bscfParabolicArc_swigconstant(_StepGeom)
StepGeom_bscfParabolicArc = _StepGeom.StepGeom_bscfParabolicArc

_StepGeom.StepGeom_bscfHyperbolicArc_swigconstant(_StepGeom)
StepGeom_bscfHyperbolicArc = _StepGeom.StepGeom_bscfHyperbolicArc

_StepGeom.StepGeom_bscfUnspecified_swigconstant(_StepGeom)
StepGeom_bscfUnspecified = _StepGeom.StepGeom_bscfUnspecified

_StepGeom.StepGeom_bssfPlaneSurf_swigconstant(_StepGeom)
StepGeom_bssfPlaneSurf = _StepGeom.StepGeom_bssfPlaneSurf

_StepGeom.StepGeom_bssfCylindricalSurf_swigconstant(_StepGeom)
StepGeom_bssfCylindricalSurf = _StepGeom.StepGeom_bssfCylindricalSurf

_StepGeom.StepGeom_bssfConicalSurf_swigconstant(_StepGeom)
StepGeom_bssfConicalSurf = _StepGeom.StepGeom_bssfConicalSurf

_StepGeom.StepGeom_bssfSphericalSurf_swigconstant(_StepGeom)
StepGeom_bssfSphericalSurf = _StepGeom.StepGeom_bssfSphericalSurf

_StepGeom.StepGeom_bssfToroidalSurf_swigconstant(_StepGeom)
StepGeom_bssfToroidalSurf = _StepGeom.StepGeom_bssfToroidalSurf

_StepGeom.StepGeom_bssfSurfOfRevolution_swigconstant(_StepGeom)
StepGeom_bssfSurfOfRevolution = _StepGeom.StepGeom_bssfSurfOfRevolution

_StepGeom.StepGeom_bssfRuledSurf_swigconstant(_StepGeom)
StepGeom_bssfRuledSurf = _StepGeom.StepGeom_bssfRuledSurf

_StepGeom.StepGeom_bssfGeneralisedCone_swigconstant(_StepGeom)
StepGeom_bssfGeneralisedCone = _StepGeom.StepGeom_bssfGeneralisedCone

_StepGeom.StepGeom_bssfQuadricSurf_swigconstant(_StepGeom)
StepGeom_bssfQuadricSurf = _StepGeom.StepGeom_bssfQuadricSurf

_StepGeom.StepGeom_bssfSurfOfLinearExtrusion_swigconstant(_StepGeom)
StepGeom_bssfSurfOfLinearExtrusion = _StepGeom.StepGeom_bssfSurfOfLinearExtrusion

_StepGeom.StepGeom_bssfUnspecified_swigconstant(_StepGeom)
StepGeom_bssfUnspecified = _StepGeom.StepGeom_bssfUnspecified

_StepGeom.StepGeom_ktUniformKnots_swigconstant(_StepGeom)
StepGeom_ktUniformKnots = _StepGeom.StepGeom_ktUniformKnots

_StepGeom.StepGeom_ktUnspecified_swigconstant(_StepGeom)
StepGeom_ktUnspecified = _StepGeom.StepGeom_ktUnspecified

_StepGeom.StepGeom_ktQuasiUniformKnots_swigconstant(_StepGeom)
StepGeom_ktQuasiUniformKnots = _StepGeom.StepGeom_ktQuasiUniformKnots

_StepGeom.StepGeom_ktPiecewiseBezierKnots_swigconstant(_StepGeom)
StepGeom_ktPiecewiseBezierKnots = _StepGeom.StepGeom_ktPiecewiseBezierKnots

_StepGeom.StepGeom_pscrCurve3d_swigconstant(_StepGeom)
StepGeom_pscrCurve3d = _StepGeom.StepGeom_pscrCurve3d

_StepGeom.StepGeom_pscrPcurveS1_swigconstant(_StepGeom)
StepGeom_pscrPcurveS1 = _StepGeom.StepGeom_pscrPcurveS1

_StepGeom.StepGeom_pscrPcurveS2_swigconstant(_StepGeom)
StepGeom_pscrPcurveS2 = _StepGeom.StepGeom_pscrPcurveS2

_StepGeom.StepGeom_tcDiscontinuous_swigconstant(_StepGeom)
StepGeom_tcDiscontinuous = _StepGeom.StepGeom_tcDiscontinuous

_StepGeom.StepGeom_tcContinuous_swigconstant(_StepGeom)
StepGeom_tcContinuous = _StepGeom.StepGeom_tcContinuous

_StepGeom.StepGeom_tcContSameGradient_swigconstant(_StepGeom)
StepGeom_tcContSameGradient = _StepGeom.StepGeom_tcContSameGradient

_StepGeom.StepGeom_tcContSameGradientSameCurvature_swigconstant(_StepGeom)
StepGeom_tcContSameGradientSameCurvature = _StepGeom.StepGeom_tcContSameGradientSameCurvature

_StepGeom.StepGeom_tpCartesian_swigconstant(_StepGeom)
StepGeom_tpCartesian = _StepGeom.StepGeom_tpCartesian

_StepGeom.StepGeom_tpParameter_swigconstant(_StepGeom)
StepGeom_tpParameter = _StepGeom.StepGeom_tpParameter

_StepGeom.StepGeom_tpUnspecified_swigconstant(_StepGeom)
StepGeom_tpUnspecified = _StepGeom.StepGeom_tpUnspecified
class StepGeom_Array1OfBoundaryCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepGeom_BoundaryCurve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfBoundaryCurve_swiginit(self, _StepGeom.new_StepGeom_Array1OfBoundaryCurve(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_BoundaryCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfBoundaryCurve &
        :rtype: StepGeom_Array1OfBoundaryCurve

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfBoundaryCurve &
        :rtype: StepGeom_Array1OfBoundaryCurve

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_BoundaryCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_BoundaryCurve

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_BoundaryCurve

        """
        return _StepGeom.StepGeom_Array1OfBoundaryCurve_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfBoundaryCurve
StepGeom_Array1OfBoundaryCurve.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Init, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Destroy, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_IsAllocated, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Assign, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Set, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Length, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Lower, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Upper, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_SetValue, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_Value, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfBoundaryCurve_ChangeValue, None, StepGeom_Array1OfBoundaryCurve)
StepGeom_Array1OfBoundaryCurve_swigregister = _StepGeom.StepGeom_Array1OfBoundaryCurve_swigregister
StepGeom_Array1OfBoundaryCurve_swigregister(StepGeom_Array1OfBoundaryCurve)

class StepGeom_Array1OfCartesianPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepGeom_CartesianPoint &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfCartesianPoint_swiginit(self, _StepGeom.new_StepGeom_Array1OfCartesianPoint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfCartesianPoint &
        :rtype: StepGeom_Array1OfCartesianPoint

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfCartesianPoint &
        :rtype: StepGeom_Array1OfCartesianPoint

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Array1OfCartesianPoint_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfCartesianPoint
StepGeom_Array1OfCartesianPoint.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Init, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Destroy, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_IsAllocated, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Assign, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Set, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Length, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Lower, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Upper, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_SetValue, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_Value, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfCartesianPoint_ChangeValue, None, StepGeom_Array1OfCartesianPoint)
StepGeom_Array1OfCartesianPoint_swigregister = _StepGeom.StepGeom_Array1OfCartesianPoint_swigregister
StepGeom_Array1OfCartesianPoint_swigregister(StepGeom_Array1OfCartesianPoint)

class StepGeom_Array1OfCompositeCurveSegment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepGeom_CompositeCurveSegment &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfCompositeCurveSegment_swiginit(self, _StepGeom.new_StepGeom_Array1OfCompositeCurveSegment(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_CompositeCurveSegment &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfCompositeCurveSegment &
        :rtype: StepGeom_Array1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfCompositeCurveSegment &
        :rtype: StepGeom_Array1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_CompositeCurveSegment &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.StepGeom_Array1OfCompositeCurveSegment_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfCompositeCurveSegment
StepGeom_Array1OfCompositeCurveSegment.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Init, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Destroy, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_IsAllocated, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Assign, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Set, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Length, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Lower, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Upper, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_SetValue, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_Value, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfCompositeCurveSegment_ChangeValue, None, StepGeom_Array1OfCompositeCurveSegment)
StepGeom_Array1OfCompositeCurveSegment_swigregister = _StepGeom.StepGeom_Array1OfCompositeCurveSegment_swigregister
StepGeom_Array1OfCompositeCurveSegment_swigregister(StepGeom_Array1OfCompositeCurveSegment)

class StepGeom_Array1OfCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepGeom_Curve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfCurve_swiginit(self, _StepGeom.new_StepGeom_Array1OfCurve(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCurve_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCurve_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfCurve &
        :rtype: StepGeom_Array1OfCurve

        """
        return _StepGeom.StepGeom_Array1OfCurve_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfCurve &
        :rtype: StepGeom_Array1OfCurve

        """
        return _StepGeom.StepGeom_Array1OfCurve_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCurve_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfCurve_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfCurve_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_Array1OfCurve_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_Array1OfCurve_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfCurve
StepGeom_Array1OfCurve.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Init, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Destroy, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_IsAllocated, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Assign, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Set, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Length, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Lower, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Upper, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_SetValue, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_Value, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfCurve_ChangeValue, None, StepGeom_Array1OfCurve)
StepGeom_Array1OfCurve_swigregister = _StepGeom.StepGeom_Array1OfCurve_swigregister
StepGeom_Array1OfCurve_swigregister(StepGeom_Array1OfCurve)

class StepGeom_Array1OfPcurveOrSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: StepGeom_PcurveOrSurface &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfPcurveOrSurface_swiginit(self, _StepGeom.new_StepGeom_Array1OfPcurveOrSurface(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: StepGeom_PcurveOrSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfPcurveOrSurface &
        :rtype: StepGeom_Array1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfPcurveOrSurface &
        :rtype: StepGeom_Array1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepGeom_PcurveOrSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_PcurveOrSurface

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_PcurveOrSurface

        """
        return _StepGeom.StepGeom_Array1OfPcurveOrSurface_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfPcurveOrSurface
StepGeom_Array1OfPcurveOrSurface.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Init, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Destroy, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_IsAllocated, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Assign, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Set, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Length, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Lower, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Upper, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_SetValue, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_Value, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfPcurveOrSurface_ChangeValue, None, StepGeom_Array1OfPcurveOrSurface)
StepGeom_Array1OfPcurveOrSurface_swigregister = _StepGeom.StepGeom_Array1OfPcurveOrSurface_swigregister
StepGeom_Array1OfPcurveOrSurface_swigregister(StepGeom_Array1OfPcurveOrSurface)

class StepGeom_Array1OfSurfaceBoundary(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: StepGeom_SurfaceBoundary &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfSurfaceBoundary_swiginit(self, _StepGeom.new_StepGeom_Array1OfSurfaceBoundary(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: StepGeom_SurfaceBoundary &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfSurfaceBoundary &
        :rtype: StepGeom_Array1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfSurfaceBoundary &
        :rtype: StepGeom_Array1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepGeom_SurfaceBoundary &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_SurfaceBoundary

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_SurfaceBoundary

        """
        return _StepGeom.StepGeom_Array1OfSurfaceBoundary_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfSurfaceBoundary
StepGeom_Array1OfSurfaceBoundary.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Init, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Destroy, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_IsAllocated, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Assign, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Set, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Length, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Lower, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Upper, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_SetValue, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_Value, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfSurfaceBoundary_ChangeValue, None, StepGeom_Array1OfSurfaceBoundary)
StepGeom_Array1OfSurfaceBoundary_swigregister = _StepGeom.StepGeom_Array1OfSurfaceBoundary_swigregister
StepGeom_Array1OfSurfaceBoundary_swigregister(StepGeom_Array1OfSurfaceBoundary)

class StepGeom_Array1OfTrimmingSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: StepGeom_TrimmingSelect &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array1OfTrimmingSelect_swiginit(self, _StepGeom.new_StepGeom_Array1OfTrimmingSelect(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: StepGeom_TrimmingSelect &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfTrimmingSelect &
        :rtype: StepGeom_Array1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array1OfTrimmingSelect &
        :rtype: StepGeom_Array1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepGeom_TrimmingSelect &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_Array1OfTrimmingSelect_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array1OfTrimmingSelect
StepGeom_Array1OfTrimmingSelect.Init = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Init, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Destroy = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Destroy, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.IsAllocated = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_IsAllocated, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Assign = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Assign, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Set = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Set, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Length = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Length, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Lower = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Lower, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Upper = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Upper, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.SetValue = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_SetValue, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.Value = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_Value, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array1OfTrimmingSelect_ChangeValue, None, StepGeom_Array1OfTrimmingSelect)
StepGeom_Array1OfTrimmingSelect_swigregister = _StepGeom.StepGeom_Array1OfTrimmingSelect_swigregister
StepGeom_Array1OfTrimmingSelect_swigregister(StepGeom_Array1OfTrimmingSelect)

class StepGeom_Array2OfCartesianPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepGeom_CartesianPoint &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array2OfCartesianPoint_swiginit(self, _StepGeom.new_StepGeom_Array2OfCartesianPoint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_Destroy(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array2OfCartesianPoint &
        :rtype: StepGeom_Array2OfCartesianPoint

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array2OfCartesianPoint &
        :rtype: StepGeom_Array2OfCartesianPoint

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_Set(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Array2OfCartesianPoint_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array2OfCartesianPoint
StepGeom_Array2OfCartesianPoint.Init = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_Init, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.Destroy = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_Destroy, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.Assign = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_Assign, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.Set = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_Set, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.ColLength = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_ColLength, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.RowLength = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_RowLength, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.LowerCol = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_LowerCol, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.LowerRow = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_LowerRow, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.UpperCol = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_UpperCol, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.UpperRow = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_UpperRow, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.SetValue = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_SetValue, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.Value = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_Value, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array2OfCartesianPoint_ChangeValue, None, StepGeom_Array2OfCartesianPoint)
StepGeom_Array2OfCartesianPoint_swigregister = _StepGeom.StepGeom_Array2OfCartesianPoint_swigregister
StepGeom_Array2OfCartesianPoint_swigregister(StepGeom_Array2OfCartesianPoint)

class StepGeom_Array2OfSurfacePatch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepGeom_SurfacePatch &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _StepGeom.StepGeom_Array2OfSurfacePatch_swiginit(self, _StepGeom.new_StepGeom_Array2OfSurfacePatch(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_SurfacePatch &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_Destroy(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array2OfSurfacePatch &
        :rtype: StepGeom_Array2OfSurfacePatch

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StepGeom_Array2OfSurfacePatch &
        :rtype: StepGeom_Array2OfSurfacePatch

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_Set(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_StepGeom_SurfacePatch &
        :rtype: None

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.StepGeom_Array2OfSurfacePatch_ChangeValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Array2OfSurfacePatch
StepGeom_Array2OfSurfacePatch.Init = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_Init, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.Destroy = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_Destroy, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.Assign = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_Assign, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.Set = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_Set, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.ColLength = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_ColLength, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.RowLength = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_RowLength, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.LowerCol = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_LowerCol, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.LowerRow = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_LowerRow, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.UpperCol = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_UpperCol, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.UpperRow = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_UpperRow, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.SetValue = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_SetValue, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.Value = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_Value, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch.ChangeValue = new_instancemethod(_StepGeom.StepGeom_Array2OfSurfacePatch_ChangeValue, None, StepGeom_Array2OfSurfacePatch)
StepGeom_Array2OfSurfacePatch_swigregister = _StepGeom.StepGeom_Array2OfSurfacePatch_swigregister
StepGeom_Array2OfSurfacePatch_swigregister(StepGeom_Array2OfSurfacePatch)

class StepGeom_Axis2Placement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Axis2Placement SelectType

        :rtype: None

        """
        _StepGeom.StepGeom_Axis2Placement_swiginit(self, _StepGeom.new_StepGeom_Axis2Placement(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a Axis2Placement Kind Entity that is : 1 -> Axis2Placement2d 2 -> Axis2Placement3d 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepGeom.StepGeom_Axis2Placement_CaseNum(self, *args)


    def Axis2Placement2d(self, *args):
        """
        * returns Value as a Axis2Placement2d (Null if another type)

        :rtype: Handle_StepGeom_Axis2Placement2d

        """
        return _StepGeom.StepGeom_Axis2Placement_Axis2Placement2d(self, *args)


    def Axis2Placement3d(self, *args):
        """
        * returns Value as a Axis2Placement3d (Null if another type)

        :rtype: Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.StepGeom_Axis2Placement_Axis2Placement3d(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis2Placement
StepGeom_Axis2Placement.CaseNum = new_instancemethod(_StepGeom.StepGeom_Axis2Placement_CaseNum, None, StepGeom_Axis2Placement)
StepGeom_Axis2Placement.Axis2Placement2d = new_instancemethod(_StepGeom.StepGeom_Axis2Placement_Axis2Placement2d, None, StepGeom_Axis2Placement)
StepGeom_Axis2Placement.Axis2Placement3d = new_instancemethod(_StepGeom.StepGeom_Axis2Placement_Axis2Placement3d, None, StepGeom_Axis2Placement)
StepGeom_Axis2Placement_swigregister = _StepGeom.StepGeom_Axis2Placement_swigregister
StepGeom_Axis2Placement_swigregister(StepGeom_Axis2Placement)

class StepGeom_CompositeCurveSegment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CompositeCurveSegment

        :rtype: None

        """
        _StepGeom.StepGeom_CompositeCurveSegment_swiginit(self, _StepGeom.new_StepGeom_CompositeCurveSegment(*args))

    def Init(self, *args):
        """
        :param aTransition:
        :type aTransition: StepGeom_TransitionCode
        :param aSameSense:
        :type aSameSense: bool
        :param aParentCurve:
        :type aParentCurve: Handle_StepGeom_Curve &
        :rtype: void

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_Init(self, *args)


    def SetTransition(self, *args):
        """
        :param aTransition:
        :type aTransition: StepGeom_TransitionCode
        :rtype: None

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SetTransition(self, *args)


    def Transition(self, *args):
        """
        :rtype: StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_Transition(self, *args)


    def SetSameSense(self, *args):
        """
        :param aSameSense:
        :type aSameSense: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SetSameSense(self, *args)


    def SameSense(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SameSense(self, *args)


    def SetParentCurve(self, *args):
        """
        :param aParentCurve:
        :type aParentCurve: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CompositeCurveSegment_ParentCurve(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CompositeCurveSegment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CompositeCurveSegment
StepGeom_CompositeCurveSegment.Init = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_Init, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment.SetTransition = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_SetTransition, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment.Transition = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_Transition, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment.SetSameSense = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_SetSameSense, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment.SameSense = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_SameSense, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment.SetParentCurve = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_SetParentCurve, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment.ParentCurve = new_instancemethod(_StepGeom.StepGeom_CompositeCurveSegment_ParentCurve, None, StepGeom_CompositeCurveSegment)
StepGeom_CompositeCurveSegment_swigregister = _StepGeom.StepGeom_CompositeCurveSegment_swigregister
StepGeom_CompositeCurveSegment_swigregister(StepGeom_CompositeCurveSegment)

class Handle_StepGeom_CompositeCurveSegment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CompositeCurveSegment_swiginit(self, _StepGeom.new_Handle_StepGeom_CompositeCurveSegment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CompositeCurveSegment_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CompositeCurveSegment
Handle_StepGeom_CompositeCurveSegment.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurveSegment_Nullify, None, Handle_StepGeom_CompositeCurveSegment)
Handle_StepGeom_CompositeCurveSegment.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurveSegment_IsNull, None, Handle_StepGeom_CompositeCurveSegment)
Handle_StepGeom_CompositeCurveSegment.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurveSegment_GetObject, None, Handle_StepGeom_CompositeCurveSegment)
Handle_StepGeom_CompositeCurveSegment_swigregister = _StepGeom.Handle_StepGeom_CompositeCurveSegment_swigregister
Handle_StepGeom_CompositeCurveSegment_swigregister(Handle_StepGeom_CompositeCurveSegment)

def Handle_StepGeom_CompositeCurveSegment_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CompositeCurveSegment_DownCast(AnObject)
Handle_StepGeom_CompositeCurveSegment_DownCast = _StepGeom.Handle_StepGeom_CompositeCurveSegment_DownCast

class StepGeom_CurveOnSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CurveOnSurface SelectType

        :rtype: None

        """
        _StepGeom.StepGeom_CurveOnSurface_swiginit(self, _StepGeom.new_StepGeom_CurveOnSurface(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a CurveOnSurface Kind Entity that is : 1 -> Pcurve 2 -> SurfaceCurve 3 -> CompositeCurveOnSurface 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepGeom.StepGeom_CurveOnSurface_CaseNum(self, *args)


    def Pcurve(self, *args):
        """
        * returns Value as a Pcurve (Null if another type)

        :rtype: Handle_StepGeom_Pcurve

        """
        return _StepGeom.StepGeom_CurveOnSurface_Pcurve(self, *args)


    def SurfaceCurve(self, *args):
        """
        * returns Value as a SurfaceCurve (Null if another type)

        :rtype: Handle_StepGeom_SurfaceCurve

        """
        return _StepGeom.StepGeom_CurveOnSurface_SurfaceCurve(self, *args)


    def CompositeCurveOnSurface(self, *args):
        """
        * returns Value as a CompositeCurveOnSurface (Null if another type)

        :rtype: Handle_StepGeom_CompositeCurveOnSurface

        """
        return _StepGeom.StepGeom_CurveOnSurface_CompositeCurveOnSurface(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_CurveOnSurface
StepGeom_CurveOnSurface.CaseNum = new_instancemethod(_StepGeom.StepGeom_CurveOnSurface_CaseNum, None, StepGeom_CurveOnSurface)
StepGeom_CurveOnSurface.Pcurve = new_instancemethod(_StepGeom.StepGeom_CurveOnSurface_Pcurve, None, StepGeom_CurveOnSurface)
StepGeom_CurveOnSurface.SurfaceCurve = new_instancemethod(_StepGeom.StepGeom_CurveOnSurface_SurfaceCurve, None, StepGeom_CurveOnSurface)
StepGeom_CurveOnSurface.CompositeCurveOnSurface = new_instancemethod(_StepGeom.StepGeom_CurveOnSurface_CompositeCurveOnSurface, None, StepGeom_CurveOnSurface)
StepGeom_CurveOnSurface_swigregister = _StepGeom.StepGeom_CurveOnSurface_swigregister
StepGeom_CurveOnSurface_swigregister(StepGeom_CurveOnSurface)

class StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(OCC.StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swiginit(self, _StepGeom.new_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(*args))

    def Init(self, *args):
        """
        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aGeometricRepresentationCtx:
        :type aGeometricRepresentationCtx: Handle_StepGeom_GeometricRepresentationContext &
        :param aGlobalUnitAssignedCtx:
        :type aGlobalUnitAssignedCtx: Handle_StepRepr_GlobalUnitAssignedContext &
        :param aGlobalUncertaintyAssignedCtx:
        :type aGlobalUncertaintyAssignedCtx: Handle_StepRepr_GlobalUncertaintyAssignedContext &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :param aUnits:
        :type aUnits: Handle_StepBasic_HArray1OfNamedUnit &
        :param anUncertainty:
        :type anUncertainty: Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit &
        :rtype: void

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        :param aGeometricRepresentationContext:
        :type aGeometricRepresentationContext: Handle_StepGeom_GeometricRepresentationContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        :rtype: Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GeometricRepresentationContext(self, *args)


    def SetGlobalUnitAssignedContext(self, *args):
        """
        :param aGlobalUnitAssignedContext:
        :type aGlobalUnitAssignedContext: Handle_StepRepr_GlobalUnitAssignedContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUnitAssignedContext(self, *args)


    def GlobalUnitAssignedContext(self, *args):
        """
        :rtype: Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUnitAssignedContext(self, *args)


    def SetGlobalUncertaintyAssignedContext(self, *args):
        """
        :param aGlobalUncertaintyAssignedCtx:
        :type aGlobalUncertaintyAssignedCtx: Handle_StepRepr_GlobalUncertaintyAssignedContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUncertaintyAssignedContext(self, *args)


    def GlobalUncertaintyAssignedContext(self, *args):
        """
        :rtype: Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUncertaintyAssignedContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :rtype: None

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_CoordinateSpaceDimension(self, *args)


    def SetUnits(self, *args):
        """
        :param aUnits:
        :type aUnits: Handle_StepBasic_HArray1OfNamedUnit &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUnits(self, *args)


    def Units(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Units(self, *args)


    def UnitsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUnits(self, *args)


    def SetUncertainty(self, *args):
        """
        :param aUncertainty:
        :type aUncertainty: Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUncertainty(self, *args)


    def Uncertainty(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Uncertainty(self, *args)


    def UncertaintyValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UncertaintyValue(self, *args)


    def NbUncertainty(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUncertainty(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.Init = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Init, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.SetGeometricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGeometricRepresentationContext, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.GeometricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GeometricRepresentationContext, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.SetGlobalUnitAssignedContext = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUnitAssignedContext, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.GlobalUnitAssignedContext = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUnitAssignedContext, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.SetGlobalUncertaintyAssignedContext = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetGlobalUncertaintyAssignedContext, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.GlobalUncertaintyAssignedContext = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GlobalUncertaintyAssignedContext, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.SetCoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetCoordinateSpaceDimension, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.CoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_CoordinateSpaceDimension, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.SetUnits = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUnits, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.Units = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Units, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.UnitsValue = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UnitsValue, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.NbUnits = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUnits, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.SetUncertainty = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_SetUncertainty, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.Uncertainty = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Uncertainty, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.UncertaintyValue = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_UncertaintyValue, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.NbUncertainty = new_instancemethod(_StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_NbUncertainty, None, StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister = _StepGeom.StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister
StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister(StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)

class Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(OCC.StepRepr.Handle_StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swiginit(self, _StepGeom.new_Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Nullify, None, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_IsNull, None, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_GetObject, None, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister = _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister(Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)

def Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast(AnObject)
Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast = _StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_DownCast

class StepGeom_GeometricRepresentationContext(OCC.StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricRepresentationContext

        :rtype: None

        """
        _StepGeom.StepGeom_GeometricRepresentationContext_swiginit(self, _StepGeom.new_StepGeom_GeometricRepresentationContext(*args))

    def Init(self, *args):
        """
        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :rtype: void

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_Init(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContext_CoordinateSpaceDimension(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_GeometricRepresentationContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationContext
StepGeom_GeometricRepresentationContext.Init = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContext_Init, None, StepGeom_GeometricRepresentationContext)
StepGeom_GeometricRepresentationContext.SetCoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContext_SetCoordinateSpaceDimension, None, StepGeom_GeometricRepresentationContext)
StepGeom_GeometricRepresentationContext.CoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContext_CoordinateSpaceDimension, None, StepGeom_GeometricRepresentationContext)
StepGeom_GeometricRepresentationContext_swigregister = _StepGeom.StepGeom_GeometricRepresentationContext_swigregister
StepGeom_GeometricRepresentationContext_swigregister(StepGeom_GeometricRepresentationContext)

class Handle_StepGeom_GeometricRepresentationContext(OCC.StepRepr.Handle_StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_GeometricRepresentationContext_swiginit(self, _StepGeom.new_Handle_StepGeom_GeometricRepresentationContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContext_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationContext
Handle_StepGeom_GeometricRepresentationContext.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContext_Nullify, None, Handle_StepGeom_GeometricRepresentationContext)
Handle_StepGeom_GeometricRepresentationContext.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContext_IsNull, None, Handle_StepGeom_GeometricRepresentationContext)
Handle_StepGeom_GeometricRepresentationContext.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContext_GetObject, None, Handle_StepGeom_GeometricRepresentationContext)
Handle_StepGeom_GeometricRepresentationContext_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationContext_swigregister
Handle_StepGeom_GeometricRepresentationContext_swigregister(Handle_StepGeom_GeometricRepresentationContext)

def Handle_StepGeom_GeometricRepresentationContext_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationContext_DownCast(AnObject)
Handle_StepGeom_GeometricRepresentationContext_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationContext_DownCast

class StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(OCC.StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricRepresentationContextAndGlobalUnitAssignedContext

        :rtype: None

        """
        _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swiginit(self, _StepGeom.new_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(*args))

    def Init(self, *args):
        """
        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aGeometricRepresentationContext:
        :type aGeometricRepresentationContext: Handle_StepGeom_GeometricRepresentationContext &
        :param aGlobalUnitAssignedContext:
        :type aGlobalUnitAssignedContext: Handle_StepRepr_GlobalUnitAssignedContext &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :param aUnits:
        :type aUnits: Handle_StepBasic_HArray1OfNamedUnit &
        :rtype: void

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        :param aGeometricRepresentationContext:
        :type aGeometricRepresentationContext: Handle_StepGeom_GeometricRepresentationContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        :rtype: Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GeometricRepresentationContext(self, *args)


    def SetGlobalUnitAssignedContext(self, *args):
        """
        :param aGlobalUnitAssignedContext:
        :type aGlobalUnitAssignedContext: Handle_StepRepr_GlobalUnitAssignedContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGlobalUnitAssignedContext(self, *args)


    def GlobalUnitAssignedContext(self, *args):
        """
        :rtype: Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GlobalUnitAssignedContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_CoordinateSpaceDimension(self, *args)


    def SetUnits(self, *args):
        """
        :param aUnits:
        :type aUnits: Handle_StepBasic_HArray1OfNamedUnit &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetUnits(self, *args)


    def Units(self, *args):
        """
        :rtype: Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Units(self, *args)


    def UnitsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepBasic_NamedUnit

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_NbUnits(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.Init = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Init, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.SetGeometricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGeometricRepresentationContext, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.GeometricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GeometricRepresentationContext, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.SetGlobalUnitAssignedContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetGlobalUnitAssignedContext, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.GlobalUnitAssignedContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GlobalUnitAssignedContext, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.SetCoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetCoordinateSpaceDimension, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.CoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_CoordinateSpaceDimension, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.SetUnits = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_SetUnits, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.Units = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Units, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.UnitsValue = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_UnitsValue, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.NbUnits = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_NbUnits, None, StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister = _StepGeom.StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister
StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister(StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)

class Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(OCC.StepRepr.Handle_StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swiginit(self, _StepGeom.new_Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_Nullify, None, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_IsNull, None, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_GetObject, None, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister(Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext)

def Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast(AnObject)
Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext_DownCast

class StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(OCC.StepRepr.StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        """
        _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swiginit(self, _StepGeom.new_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(*args))

    def Init(self, *args):
        """
        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aGeometricRepresentationContext:
        :type aGeometricRepresentationContext: Handle_StepGeom_GeometricRepresentationContext &
        :param aParametricRepresentationContext:
        :type aParametricRepresentationContext: Handle_StepRepr_ParametricRepresentationContext &
        :rtype: void

        :param aContextIdentifier:
        :type aContextIdentifier: Handle_TCollection_HAsciiString &
        :param aContextType:
        :type aContextType: Handle_TCollection_HAsciiString &
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :rtype: void

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Init(self, *args)


    def SetGeometricRepresentationContext(self, *args):
        """
        :param aGeometricRepresentationContext:
        :type aGeometricRepresentationContext: Handle_StepGeom_GeometricRepresentationContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetGeometricRepresentationContext(self, *args)


    def GeometricRepresentationContext(self, *args):
        """
        :rtype: Handle_StepGeom_GeometricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_GeometricRepresentationContext(self, *args)


    def SetParametricRepresentationContext(self, *args):
        """
        :param aParametricRepresentationContext:
        :type aParametricRepresentationContext: Handle_StepRepr_ParametricRepresentationContext &
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetParametricRepresentationContext(self, *args)


    def ParametricRepresentationContext(self, *args):
        """
        :rtype: Handle_StepRepr_ParametricRepresentationContext

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_ParametricRepresentationContext(self, *args)


    def SetCoordinateSpaceDimension(self, *args):
        """
        :param aCoordinateSpaceDimension:
        :type aCoordinateSpaceDimension: int
        :rtype: None

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetCoordinateSpaceDimension(self, *args)


    def CoordinateSpaceDimension(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_CoordinateSpaceDimension(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.Init = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Init, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.SetGeometricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetGeometricRepresentationContext, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.GeometricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_GeometricRepresentationContext, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.SetParametricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetParametricRepresentationContext, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.ParametricRepresentationContext = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_ParametricRepresentationContext, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.SetCoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_SetCoordinateSpaceDimension, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.CoordinateSpaceDimension = new_instancemethod(_StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_CoordinateSpaceDimension, None, StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister = _StepGeom.StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister
StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister(StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)

class Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(OCC.StepRepr.Handle_StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swiginit(self, _StepGeom.new_Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_Nullify, None, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_IsNull, None, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_GetObject, None, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_swigregister(Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext)

def Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast(AnObject)
Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext_DownCast

class StepGeom_GeometricRepresentationItem(OCC.StepRepr.StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricRepresentationItem

        :rtype: None

        """
        _StepGeom.StepGeom_GeometricRepresentationItem_swiginit(self, _StepGeom.new_StepGeom_GeometricRepresentationItem(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_GeometricRepresentationItem(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_GeometricRepresentationItem
StepGeom_GeometricRepresentationItem_swigregister = _StepGeom.StepGeom_GeometricRepresentationItem_swigregister
StepGeom_GeometricRepresentationItem_swigregister(StepGeom_GeometricRepresentationItem)

class Handle_StepGeom_GeometricRepresentationItem(OCC.StepRepr.Handle_StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_GeometricRepresentationItem_swiginit(self, _StepGeom.new_Handle_StepGeom_GeometricRepresentationItem(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_GeometricRepresentationItem_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_GeometricRepresentationItem
Handle_StepGeom_GeometricRepresentationItem.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationItem_Nullify, None, Handle_StepGeom_GeometricRepresentationItem)
Handle_StepGeom_GeometricRepresentationItem.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationItem_IsNull, None, Handle_StepGeom_GeometricRepresentationItem)
Handle_StepGeom_GeometricRepresentationItem.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_GeometricRepresentationItem_GetObject, None, Handle_StepGeom_GeometricRepresentationItem)
Handle_StepGeom_GeometricRepresentationItem_swigregister = _StepGeom.Handle_StepGeom_GeometricRepresentationItem_swigregister
Handle_StepGeom_GeometricRepresentationItem_swigregister(Handle_StepGeom_GeometricRepresentationItem)

def Handle_StepGeom_GeometricRepresentationItem_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_GeometricRepresentationItem_DownCast(AnObject)
Handle_StepGeom_GeometricRepresentationItem_DownCast = _StepGeom.Handle_StepGeom_GeometricRepresentationItem_DownCast

class StepGeom_HArray1OfBoundaryCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepGeom_BoundaryCurve &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfBoundaryCurve_swiginit(self, _StepGeom.new_StepGeom_HArray1OfBoundaryCurve(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_BoundaryCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_BoundaryCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_BoundaryCurve

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_BoundaryCurve

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfBoundaryCurve

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfBoundaryCurve

        """
        return _StepGeom.StepGeom_HArray1OfBoundaryCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfBoundaryCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfBoundaryCurve
StepGeom_HArray1OfBoundaryCurve.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_Init, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_Length, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_Lower, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_Upper, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_SetValue, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_Value, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_ChangeValue, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_Array1, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfBoundaryCurve_ChangeArray1, None, StepGeom_HArray1OfBoundaryCurve)
StepGeom_HArray1OfBoundaryCurve_swigregister = _StepGeom.StepGeom_HArray1OfBoundaryCurve_swigregister
StepGeom_HArray1OfBoundaryCurve_swigregister(StepGeom_HArray1OfBoundaryCurve)

class Handle_StepGeom_HArray1OfBoundaryCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfBoundaryCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfBoundaryCurve
Handle_StepGeom_HArray1OfBoundaryCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_Nullify, None, Handle_StepGeom_HArray1OfBoundaryCurve)
Handle_StepGeom_HArray1OfBoundaryCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_IsNull, None, Handle_StepGeom_HArray1OfBoundaryCurve)
Handle_StepGeom_HArray1OfBoundaryCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_GetObject, None, Handle_StepGeom_HArray1OfBoundaryCurve)
Handle_StepGeom_HArray1OfBoundaryCurve_swigregister = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_swigregister
Handle_StepGeom_HArray1OfBoundaryCurve_swigregister(Handle_StepGeom_HArray1OfBoundaryCurve)

def Handle_StepGeom_HArray1OfBoundaryCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DownCast(AnObject)
Handle_StepGeom_HArray1OfBoundaryCurve_DownCast = _StepGeom.Handle_StepGeom_HArray1OfBoundaryCurve_DownCast

class StepGeom_HArray1OfCartesianPoint(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfCartesianPoint_swiginit(self, _StepGeom.new_StepGeom_HArray1OfCartesianPoint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfCartesianPoint

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfCartesianPoint

        """
        return _StepGeom.StepGeom_HArray1OfCartesianPoint_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfCartesianPoint(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfCartesianPoint
StepGeom_HArray1OfCartesianPoint.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_Init, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_Length, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_Lower, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_Upper, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_SetValue, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_Value, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_ChangeValue, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_Array1, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfCartesianPoint_ChangeArray1, None, StepGeom_HArray1OfCartesianPoint)
StepGeom_HArray1OfCartesianPoint_swigregister = _StepGeom.StepGeom_HArray1OfCartesianPoint_swigregister
StepGeom_HArray1OfCartesianPoint_swigregister(StepGeom_HArray1OfCartesianPoint)

class Handle_StepGeom_HArray1OfCartesianPoint(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfCartesianPoint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfCartesianPoint
Handle_StepGeom_HArray1OfCartesianPoint.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_Nullify, None, Handle_StepGeom_HArray1OfCartesianPoint)
Handle_StepGeom_HArray1OfCartesianPoint.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_IsNull, None, Handle_StepGeom_HArray1OfCartesianPoint)
Handle_StepGeom_HArray1OfCartesianPoint.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_GetObject, None, Handle_StepGeom_HArray1OfCartesianPoint)
Handle_StepGeom_HArray1OfCartesianPoint_swigregister = _StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_swigregister
Handle_StepGeom_HArray1OfCartesianPoint_swigregister(Handle_StepGeom_HArray1OfCartesianPoint)

def Handle_StepGeom_HArray1OfCartesianPoint_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_DownCast(AnObject)
Handle_StepGeom_HArray1OfCartesianPoint_DownCast = _StepGeom.Handle_StepGeom_HArray1OfCartesianPoint_DownCast

class StepGeom_HArray1OfCompositeCurveSegment(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepGeom_CompositeCurveSegment &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_swiginit(self, _StepGeom.new_StepGeom_HArray1OfCompositeCurveSegment(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_CompositeCurveSegment &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_CompositeCurveSegment &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfCompositeCurveSegment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfCompositeCurveSegment
StepGeom_HArray1OfCompositeCurveSegment.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Init, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Length, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Lower, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Upper, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_SetValue, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Value, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_ChangeValue, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_Array1, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfCompositeCurveSegment_ChangeArray1, None, StepGeom_HArray1OfCompositeCurveSegment)
StepGeom_HArray1OfCompositeCurveSegment_swigregister = _StepGeom.StepGeom_HArray1OfCompositeCurveSegment_swigregister
StepGeom_HArray1OfCompositeCurveSegment_swigregister(StepGeom_HArray1OfCompositeCurveSegment)

class Handle_StepGeom_HArray1OfCompositeCurveSegment(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfCompositeCurveSegment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfCompositeCurveSegment
Handle_StepGeom_HArray1OfCompositeCurveSegment.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_Nullify, None, Handle_StepGeom_HArray1OfCompositeCurveSegment)
Handle_StepGeom_HArray1OfCompositeCurveSegment.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_IsNull, None, Handle_StepGeom_HArray1OfCompositeCurveSegment)
Handle_StepGeom_HArray1OfCompositeCurveSegment.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_GetObject, None, Handle_StepGeom_HArray1OfCompositeCurveSegment)
Handle_StepGeom_HArray1OfCompositeCurveSegment_swigregister = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_swigregister
Handle_StepGeom_HArray1OfCompositeCurveSegment_swigregister(Handle_StepGeom_HArray1OfCompositeCurveSegment)

def Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast(AnObject)
Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast = _StepGeom.Handle_StepGeom_HArray1OfCompositeCurveSegment_DownCast

class StepGeom_HArray1OfCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepGeom_Curve &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfCurve_swiginit(self, _StepGeom.new_StepGeom_HArray1OfCurve(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfCurve_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCurve_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfCurve_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfCurve_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_HArray1OfCurve_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_HArray1OfCurve_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfCurve

        """
        return _StepGeom.StepGeom_HArray1OfCurve_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfCurve

        """
        return _StepGeom.StepGeom_HArray1OfCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfCurve
StepGeom_HArray1OfCurve.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_Init, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_Length, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_Lower, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_Upper, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_SetValue, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_Value, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_ChangeValue, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_Array1, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfCurve_ChangeArray1, None, StepGeom_HArray1OfCurve)
StepGeom_HArray1OfCurve_swigregister = _StepGeom.StepGeom_HArray1OfCurve_swigregister
StepGeom_HArray1OfCurve_swigregister(StepGeom_HArray1OfCurve)

class Handle_StepGeom_HArray1OfCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfCurve
Handle_StepGeom_HArray1OfCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCurve_Nullify, None, Handle_StepGeom_HArray1OfCurve)
Handle_StepGeom_HArray1OfCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCurve_IsNull, None, Handle_StepGeom_HArray1OfCurve)
Handle_StepGeom_HArray1OfCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfCurve_GetObject, None, Handle_StepGeom_HArray1OfCurve)
Handle_StepGeom_HArray1OfCurve_swigregister = _StepGeom.Handle_StepGeom_HArray1OfCurve_swigregister
Handle_StepGeom_HArray1OfCurve_swigregister(Handle_StepGeom_HArray1OfCurve)

def Handle_StepGeom_HArray1OfCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfCurve_DownCast(AnObject)
Handle_StepGeom_HArray1OfCurve_DownCast = _StepGeom.Handle_StepGeom_HArray1OfCurve_DownCast

class StepGeom_HArray1OfPcurveOrSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: StepGeom_PcurveOrSurface &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfPcurveOrSurface_swiginit(self, _StepGeom.new_StepGeom_HArray1OfPcurveOrSurface(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: StepGeom_PcurveOrSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepGeom_PcurveOrSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_PcurveOrSurface

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_PcurveOrSurface

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_HArray1OfPcurveOrSurface_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfPcurveOrSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfPcurveOrSurface
StepGeom_HArray1OfPcurveOrSurface.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_Init, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_Length, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_Lower, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_Upper, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_SetValue, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_Value, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_ChangeValue, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_Array1, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfPcurveOrSurface_ChangeArray1, None, StepGeom_HArray1OfPcurveOrSurface)
StepGeom_HArray1OfPcurveOrSurface_swigregister = _StepGeom.StepGeom_HArray1OfPcurveOrSurface_swigregister
StepGeom_HArray1OfPcurveOrSurface_swigregister(StepGeom_HArray1OfPcurveOrSurface)

class Handle_StepGeom_HArray1OfPcurveOrSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfPcurveOrSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfPcurveOrSurface
Handle_StepGeom_HArray1OfPcurveOrSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_Nullify, None, Handle_StepGeom_HArray1OfPcurveOrSurface)
Handle_StepGeom_HArray1OfPcurveOrSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_IsNull, None, Handle_StepGeom_HArray1OfPcurveOrSurface)
Handle_StepGeom_HArray1OfPcurveOrSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_GetObject, None, Handle_StepGeom_HArray1OfPcurveOrSurface)
Handle_StepGeom_HArray1OfPcurveOrSurface_swigregister = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_swigregister
Handle_StepGeom_HArray1OfPcurveOrSurface_swigregister(Handle_StepGeom_HArray1OfPcurveOrSurface)

def Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast(AnObject)
Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast = _StepGeom.Handle_StepGeom_HArray1OfPcurveOrSurface_DownCast

class StepGeom_HArray1OfSurfaceBoundary(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: StepGeom_SurfaceBoundary &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfSurfaceBoundary_swiginit(self, _StepGeom.new_StepGeom_HArray1OfSurfaceBoundary(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: StepGeom_SurfaceBoundary &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepGeom_SurfaceBoundary &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_SurfaceBoundary

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_SurfaceBoundary

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_HArray1OfSurfaceBoundary_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfSurfaceBoundary(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfSurfaceBoundary
StepGeom_HArray1OfSurfaceBoundary.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_Init, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_Length, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_Lower, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_Upper, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_SetValue, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_Value, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_ChangeValue, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_Array1, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfSurfaceBoundary_ChangeArray1, None, StepGeom_HArray1OfSurfaceBoundary)
StepGeom_HArray1OfSurfaceBoundary_swigregister = _StepGeom.StepGeom_HArray1OfSurfaceBoundary_swigregister
StepGeom_HArray1OfSurfaceBoundary_swigregister(StepGeom_HArray1OfSurfaceBoundary)

class Handle_StepGeom_HArray1OfSurfaceBoundary(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfSurfaceBoundary(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfSurfaceBoundary
Handle_StepGeom_HArray1OfSurfaceBoundary.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_Nullify, None, Handle_StepGeom_HArray1OfSurfaceBoundary)
Handle_StepGeom_HArray1OfSurfaceBoundary.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_IsNull, None, Handle_StepGeom_HArray1OfSurfaceBoundary)
Handle_StepGeom_HArray1OfSurfaceBoundary.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_GetObject, None, Handle_StepGeom_HArray1OfSurfaceBoundary)
Handle_StepGeom_HArray1OfSurfaceBoundary_swigregister = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_swigregister
Handle_StepGeom_HArray1OfSurfaceBoundary_swigregister(Handle_StepGeom_HArray1OfSurfaceBoundary)

def Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast(AnObject)
Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast = _StepGeom.Handle_StepGeom_HArray1OfSurfaceBoundary_DownCast

class StepGeom_HArray1OfTrimmingSelect(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: StepGeom_TrimmingSelect &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray1OfTrimmingSelect_swiginit(self, _StepGeom.new_StepGeom_HArray1OfTrimmingSelect(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: StepGeom_TrimmingSelect &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepGeom_TrimmingSelect &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: StepGeom_Array1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: StepGeom_Array1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_HArray1OfTrimmingSelect_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray1OfTrimmingSelect(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray1OfTrimmingSelect
StepGeom_HArray1OfTrimmingSelect.Init = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_Init, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.Length = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_Length, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.Lower = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_Lower, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.Upper = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_Upper, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_SetValue, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.Value = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_Value, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_ChangeValue, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.Array1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_Array1, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect.ChangeArray1 = new_instancemethod(_StepGeom.StepGeom_HArray1OfTrimmingSelect_ChangeArray1, None, StepGeom_HArray1OfTrimmingSelect)
StepGeom_HArray1OfTrimmingSelect_swigregister = _StepGeom.StepGeom_HArray1OfTrimmingSelect_swigregister
StepGeom_HArray1OfTrimmingSelect_swigregister(StepGeom_HArray1OfTrimmingSelect)

class Handle_StepGeom_HArray1OfTrimmingSelect(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray1OfTrimmingSelect(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray1OfTrimmingSelect
Handle_StepGeom_HArray1OfTrimmingSelect.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_Nullify, None, Handle_StepGeom_HArray1OfTrimmingSelect)
Handle_StepGeom_HArray1OfTrimmingSelect.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_IsNull, None, Handle_StepGeom_HArray1OfTrimmingSelect)
Handle_StepGeom_HArray1OfTrimmingSelect.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_GetObject, None, Handle_StepGeom_HArray1OfTrimmingSelect)
Handle_StepGeom_HArray1OfTrimmingSelect_swigregister = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_swigregister
Handle_StepGeom_HArray1OfTrimmingSelect_swigregister(Handle_StepGeom_HArray1OfTrimmingSelect)

def Handle_StepGeom_HArray1OfTrimmingSelect_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DownCast(AnObject)
Handle_StepGeom_HArray1OfTrimmingSelect_DownCast = _StepGeom.Handle_StepGeom_HArray1OfTrimmingSelect_DownCast

class StepGeom_HArray2OfCartesianPoint(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray2OfCartesianPoint_swiginit(self, _StepGeom.new_StepGeom_HArray2OfCartesianPoint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_Init(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_ChangeValue(self, *args)


    def Array2(self, *args):
        """
        :rtype: StepGeom_Array2OfCartesianPoint

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_Array2(self, *args)


    def ChangeArray2(self, *args):
        """
        :rtype: StepGeom_Array2OfCartesianPoint

        """
        return _StepGeom.StepGeom_HArray2OfCartesianPoint_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray2OfCartesianPoint(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray2OfCartesianPoint
StepGeom_HArray2OfCartesianPoint.Init = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_Init, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.ColLength = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_ColLength, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.RowLength = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_RowLength, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.LowerCol = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_LowerCol, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.LowerRow = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_LowerRow, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.UpperCol = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_UpperCol, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.UpperRow = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_UpperRow, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_SetValue, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.Value = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_Value, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_ChangeValue, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.Array2 = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_Array2, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint.ChangeArray2 = new_instancemethod(_StepGeom.StepGeom_HArray2OfCartesianPoint_ChangeArray2, None, StepGeom_HArray2OfCartesianPoint)
StepGeom_HArray2OfCartesianPoint_swigregister = _StepGeom.StepGeom_HArray2OfCartesianPoint_swigregister
StepGeom_HArray2OfCartesianPoint_swigregister(StepGeom_HArray2OfCartesianPoint)

class Handle_StepGeom_HArray2OfCartesianPoint(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray2OfCartesianPoint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray2OfCartesianPoint
Handle_StepGeom_HArray2OfCartesianPoint.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_Nullify, None, Handle_StepGeom_HArray2OfCartesianPoint)
Handle_StepGeom_HArray2OfCartesianPoint.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_IsNull, None, Handle_StepGeom_HArray2OfCartesianPoint)
Handle_StepGeom_HArray2OfCartesianPoint.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_GetObject, None, Handle_StepGeom_HArray2OfCartesianPoint)
Handle_StepGeom_HArray2OfCartesianPoint_swigregister = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_swigregister
Handle_StepGeom_HArray2OfCartesianPoint_swigregister(Handle_StepGeom_HArray2OfCartesianPoint)

def Handle_StepGeom_HArray2OfCartesianPoint_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DownCast(AnObject)
Handle_StepGeom_HArray2OfCartesianPoint_DownCast = _StepGeom.Handle_StepGeom_HArray2OfCartesianPoint_DownCast

class StepGeom_HArray2OfSurfacePatch(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: Handle_StepGeom_SurfacePatch &
        :rtype: None

        """
        _StepGeom.StepGeom_HArray2OfSurfacePatch_swiginit(self, _StepGeom.new_StepGeom_HArray2OfSurfacePatch(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_StepGeom_SurfacePatch &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_Init(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_StepGeom_SurfacePatch &
        :rtype: None

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_ChangeValue(self, *args)


    def Array2(self, *args):
        """
        :rtype: StepGeom_Array2OfSurfacePatch

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_Array2(self, *args)


    def ChangeArray2(self, *args):
        """
        :rtype: StepGeom_Array2OfSurfacePatch

        """
        return _StepGeom.StepGeom_HArray2OfSurfacePatch_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_HArray2OfSurfacePatch(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_HArray2OfSurfacePatch
StepGeom_HArray2OfSurfacePatch.Init = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_Init, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.ColLength = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_ColLength, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.RowLength = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_RowLength, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.LowerCol = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_LowerCol, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.LowerRow = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_LowerRow, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.UpperCol = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_UpperCol, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.UpperRow = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_UpperRow, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.SetValue = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_SetValue, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.Value = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_Value, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.ChangeValue = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_ChangeValue, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.Array2 = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_Array2, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch.ChangeArray2 = new_instancemethod(_StepGeom.StepGeom_HArray2OfSurfacePatch_ChangeArray2, None, StepGeom_HArray2OfSurfacePatch)
StepGeom_HArray2OfSurfacePatch_swigregister = _StepGeom.StepGeom_HArray2OfSurfacePatch_swigregister
StepGeom_HArray2OfSurfacePatch_swigregister(StepGeom_HArray2OfSurfacePatch)

class Handle_StepGeom_HArray2OfSurfacePatch(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_swiginit(self, _StepGeom.new_Handle_StepGeom_HArray2OfSurfacePatch(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_HArray2OfSurfacePatch
Handle_StepGeom_HArray2OfSurfacePatch.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_Nullify, None, Handle_StepGeom_HArray2OfSurfacePatch)
Handle_StepGeom_HArray2OfSurfacePatch.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_IsNull, None, Handle_StepGeom_HArray2OfSurfacePatch)
Handle_StepGeom_HArray2OfSurfacePatch.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_GetObject, None, Handle_StepGeom_HArray2OfSurfacePatch)
Handle_StepGeom_HArray2OfSurfacePatch_swigregister = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_swigregister
Handle_StepGeom_HArray2OfSurfacePatch_swigregister(Handle_StepGeom_HArray2OfSurfacePatch)

def Handle_StepGeom_HArray2OfSurfacePatch_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DownCast(AnObject)
Handle_StepGeom_HArray2OfSurfacePatch_DownCast = _StepGeom.Handle_StepGeom_HArray2OfSurfacePatch_DownCast

class StepGeom_PcurveOrSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PcurveOrSurface SelectType

        :rtype: None

        """
        _StepGeom.StepGeom_PcurveOrSurface_swiginit(self, _StepGeom.new_StepGeom_PcurveOrSurface(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a PcurveOrSurface Kind Entity that is : 1 -> Pcurve 2 -> Surface 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepGeom.StepGeom_PcurveOrSurface_CaseNum(self, *args)


    def Pcurve(self, *args):
        """
        * returns Value as a Pcurve (Null if another type)

        :rtype: Handle_StepGeom_Pcurve

        """
        return _StepGeom.StepGeom_PcurveOrSurface_Pcurve(self, *args)


    def Surface(self, *args):
        """
        * returns Value as a Surface (Null if another type)

        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_PcurveOrSurface_Surface(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_PcurveOrSurface
StepGeom_PcurveOrSurface.CaseNum = new_instancemethod(_StepGeom.StepGeom_PcurveOrSurface_CaseNum, None, StepGeom_PcurveOrSurface)
StepGeom_PcurveOrSurface.Pcurve = new_instancemethod(_StepGeom.StepGeom_PcurveOrSurface_Pcurve, None, StepGeom_PcurveOrSurface)
StepGeom_PcurveOrSurface.Surface = new_instancemethod(_StepGeom.StepGeom_PcurveOrSurface_Surface, None, StepGeom_PcurveOrSurface)
StepGeom_PcurveOrSurface_swigregister = _StepGeom.StepGeom_PcurveOrSurface_swigregister
StepGeom_PcurveOrSurface_swigregister(StepGeom_PcurveOrSurface)

class StepGeom_SurfaceBoundary(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepGeom.StepGeom_SurfaceBoundary_swiginit(self, _StepGeom.new_StepGeom_SurfaceBoundary(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a kind of SurfaceBoundary select type 1 -> BoundaryCurve from StepGeom 2 -> DegeneratePcurve from StepGeom 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepGeom.StepGeom_SurfaceBoundary_CaseNum(self, *args)


    def BoundaryCurve(self, *args):
        """
        * Returns Value as BoundaryCurve (or Null if another type)

        :rtype: Handle_StepGeom_BoundaryCurve

        """
        return _StepGeom.StepGeom_SurfaceBoundary_BoundaryCurve(self, *args)


    def DegeneratePcurve(self, *args):
        """
        * Returns Value as DegeneratePcurve (or Null if another type)

        :rtype: Handle_StepGeom_DegeneratePcurve

        """
        return _StepGeom.StepGeom_SurfaceBoundary_DegeneratePcurve(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceBoundary
StepGeom_SurfaceBoundary.CaseNum = new_instancemethod(_StepGeom.StepGeom_SurfaceBoundary_CaseNum, None, StepGeom_SurfaceBoundary)
StepGeom_SurfaceBoundary.BoundaryCurve = new_instancemethod(_StepGeom.StepGeom_SurfaceBoundary_BoundaryCurve, None, StepGeom_SurfaceBoundary)
StepGeom_SurfaceBoundary.DegeneratePcurve = new_instancemethod(_StepGeom.StepGeom_SurfaceBoundary_DegeneratePcurve, None, StepGeom_SurfaceBoundary)
StepGeom_SurfaceBoundary_swigregister = _StepGeom.StepGeom_SurfaceBoundary_swigregister
StepGeom_SurfaceBoundary_swigregister(StepGeom_SurfaceBoundary)

class StepGeom_SurfacePatch(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SurfacePatch

        :rtype: None

        """
        _StepGeom.StepGeom_SurfacePatch_swiginit(self, _StepGeom.new_StepGeom_SurfacePatch(*args))

    def Init(self, *args):
        """
        :param aParentSurface:
        :type aParentSurface: Handle_StepGeom_BoundedSurface &
        :param aUTransition:
        :type aUTransition: StepGeom_TransitionCode
        :param aVTransition:
        :type aVTransition: StepGeom_TransitionCode
        :param aUSense:
        :type aUSense: bool
        :param aVSense:
        :type aVSense: bool
        :rtype: void

        """
        return _StepGeom.StepGeom_SurfacePatch_Init(self, *args)


    def SetParentSurface(self, *args):
        """
        :param aParentSurface:
        :type aParentSurface: Handle_StepGeom_BoundedSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfacePatch_SetParentSurface(self, *args)


    def ParentSurface(self, *args):
        """
        :rtype: Handle_StepGeom_BoundedSurface

        """
        return _StepGeom.StepGeom_SurfacePatch_ParentSurface(self, *args)


    def SetUTransition(self, *args):
        """
        :param aUTransition:
        :type aUTransition: StepGeom_TransitionCode
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfacePatch_SetUTransition(self, *args)


    def UTransition(self, *args):
        """
        :rtype: StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_SurfacePatch_UTransition(self, *args)


    def SetVTransition(self, *args):
        """
        :param aVTransition:
        :type aVTransition: StepGeom_TransitionCode
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfacePatch_SetVTransition(self, *args)


    def VTransition(self, *args):
        """
        :rtype: StepGeom_TransitionCode

        """
        return _StepGeom.StepGeom_SurfacePatch_VTransition(self, *args)


    def SetUSense(self, *args):
        """
        :param aUSense:
        :type aUSense: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfacePatch_SetUSense(self, *args)


    def USense(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_SurfacePatch_USense(self, *args)


    def SetVSense(self, *args):
        """
        :param aVSense:
        :type aVSense: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfacePatch_SetVSense(self, *args)


    def VSense(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_SurfacePatch_VSense(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SurfacePatch(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfacePatch
StepGeom_SurfacePatch.Init = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_Init, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.SetParentSurface = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_SetParentSurface, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.ParentSurface = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_ParentSurface, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.SetUTransition = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_SetUTransition, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.UTransition = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_UTransition, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.SetVTransition = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_SetVTransition, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.VTransition = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_VTransition, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.SetUSense = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_SetUSense, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.USense = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_USense, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.SetVSense = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_SetVSense, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch.VSense = new_instancemethod(_StepGeom.StepGeom_SurfacePatch_VSense, None, StepGeom_SurfacePatch)
StepGeom_SurfacePatch_swigregister = _StepGeom.StepGeom_SurfacePatch_swigregister
StepGeom_SurfacePatch_swigregister(StepGeom_SurfacePatch)

class Handle_StepGeom_SurfacePatch(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SurfacePatch_swiginit(self, _StepGeom.new_Handle_StepGeom_SurfacePatch(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfacePatch_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfacePatch
Handle_StepGeom_SurfacePatch.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SurfacePatch_Nullify, None, Handle_StepGeom_SurfacePatch)
Handle_StepGeom_SurfacePatch.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SurfacePatch_IsNull, None, Handle_StepGeom_SurfacePatch)
Handle_StepGeom_SurfacePatch.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SurfacePatch_GetObject, None, Handle_StepGeom_SurfacePatch)
Handle_StepGeom_SurfacePatch_swigregister = _StepGeom.Handle_StepGeom_SurfacePatch_swigregister
Handle_StepGeom_SurfacePatch_swigregister(Handle_StepGeom_SurfacePatch)

def Handle_StepGeom_SurfacePatch_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SurfacePatch_DownCast(AnObject)
Handle_StepGeom_SurfacePatch_DownCast = _StepGeom.Handle_StepGeom_SurfacePatch_DownCast

class StepGeom_TrimmingMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepGeom.StepGeom_TrimmingMember_swiginit(self, _StepGeom.new_StepGeom_TrimmingMember(*args))

    def HasName(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_TrimmingMember_HasName(self, *args)


    def Name(self, *args):
        """
        :rtype: char *

        """
        return _StepGeom.StepGeom_TrimmingMember_Name(self, *args)


    def SetName(self, *args):
        """
        :param name:
        :type name: char *
        :rtype: bool

        """
        return _StepGeom.StepGeom_TrimmingMember_SetName(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_TrimmingMember(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_TrimmingMember
StepGeom_TrimmingMember.HasName = new_instancemethod(_StepGeom.StepGeom_TrimmingMember_HasName, None, StepGeom_TrimmingMember)
StepGeom_TrimmingMember.Name = new_instancemethod(_StepGeom.StepGeom_TrimmingMember_Name, None, StepGeom_TrimmingMember)
StepGeom_TrimmingMember.SetName = new_instancemethod(_StepGeom.StepGeom_TrimmingMember_SetName, None, StepGeom_TrimmingMember)
StepGeom_TrimmingMember_swigregister = _StepGeom.StepGeom_TrimmingMember_swigregister
StepGeom_TrimmingMember_swigregister(StepGeom_TrimmingMember)

class Handle_StepGeom_TrimmingMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_TrimmingMember_swiginit(self, _StepGeom.new_Handle_StepGeom_TrimmingMember(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_TrimmingMember_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_TrimmingMember
Handle_StepGeom_TrimmingMember.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_TrimmingMember_Nullify, None, Handle_StepGeom_TrimmingMember)
Handle_StepGeom_TrimmingMember.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_TrimmingMember_IsNull, None, Handle_StepGeom_TrimmingMember)
Handle_StepGeom_TrimmingMember.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_TrimmingMember_GetObject, None, Handle_StepGeom_TrimmingMember)
Handle_StepGeom_TrimmingMember_swigregister = _StepGeom.Handle_StepGeom_TrimmingMember_swigregister
Handle_StepGeom_TrimmingMember_swigregister(Handle_StepGeom_TrimmingMember)

def Handle_StepGeom_TrimmingMember_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_TrimmingMember_DownCast(AnObject)
Handle_StepGeom_TrimmingMember_DownCast = _StepGeom.Handle_StepGeom_TrimmingMember_DownCast

class StepGeom_TrimmingSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a TrimmingSelect SelectType

        :rtype: None

        """
        _StepGeom.StepGeom_TrimmingSelect_swiginit(self, _StepGeom.new_StepGeom_TrimmingSelect(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a TrimmingSelect Kind Entity that is : 1 -> CartesianPoint 0 else (i.e. Real)

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepGeom.StepGeom_TrimmingSelect_CaseNum(self, *args)


    def NewMember(self, *args):
        """
        * Returns a TrimmingMember (for PARAMETER_VALUE) as preferred

        :rtype: Handle_StepData_SelectMember

        """
        return _StepGeom.StepGeom_TrimmingSelect_NewMember(self, *args)


    def CaseMem(self, *args):
        """
        * Recognizes a SelectMember as Real, named as PARAMETER_VALUE  1 -> ParameterValue i.e. Real  0 else (i.e. Entity)

        :param ent:
        :type ent: Handle_StepData_SelectMember &
        :rtype: int

        """
        return _StepGeom.StepGeom_TrimmingSelect_CaseMem(self, *args)


    def CartesianPoint(self, *args):
        """
        * returns Value as a CartesianPoint (Null if another type)

        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_TrimmingSelect_CartesianPoint(self, *args)


    def SetParameterValue(self, *args):
        """
        * sets the ParameterValue as Real

        :param aParameterValue:
        :type aParameterValue: float
        :rtype: None

        """
        return _StepGeom.StepGeom_TrimmingSelect_SetParameterValue(self, *args)


    def ParameterValue(self, *args):
        """
        * returns Value as a Real (0.0 if not a Real)

        :rtype: float

        """
        return _StepGeom.StepGeom_TrimmingSelect_ParameterValue(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_TrimmingSelect
StepGeom_TrimmingSelect.CaseNum = new_instancemethod(_StepGeom.StepGeom_TrimmingSelect_CaseNum, None, StepGeom_TrimmingSelect)
StepGeom_TrimmingSelect.NewMember = new_instancemethod(_StepGeom.StepGeom_TrimmingSelect_NewMember, None, StepGeom_TrimmingSelect)
StepGeom_TrimmingSelect.CaseMem = new_instancemethod(_StepGeom.StepGeom_TrimmingSelect_CaseMem, None, StepGeom_TrimmingSelect)
StepGeom_TrimmingSelect.CartesianPoint = new_instancemethod(_StepGeom.StepGeom_TrimmingSelect_CartesianPoint, None, StepGeom_TrimmingSelect)
StepGeom_TrimmingSelect.SetParameterValue = new_instancemethod(_StepGeom.StepGeom_TrimmingSelect_SetParameterValue, None, StepGeom_TrimmingSelect)
StepGeom_TrimmingSelect.ParameterValue = new_instancemethod(_StepGeom.StepGeom_TrimmingSelect_ParameterValue, None, StepGeom_TrimmingSelect)
StepGeom_TrimmingSelect_swigregister = _StepGeom.StepGeom_TrimmingSelect_swigregister
StepGeom_TrimmingSelect_swigregister(StepGeom_TrimmingSelect)

class StepGeom_VectorOrDirection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a VectorOrDirection SelectType

        :rtype: None

        """
        _StepGeom.StepGeom_VectorOrDirection_swiginit(self, _StepGeom.new_StepGeom_VectorOrDirection(*args))

    def CaseNum(self, *args):
        """
        * Recognizes a VectorOrDirection Kind Entity that is : 1 -> Vector 2 -> Direction 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepGeom.StepGeom_VectorOrDirection_CaseNum(self, *args)


    def Vector(self, *args):
        """
        * returns Value as a Vector (Null if another type)

        :rtype: Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_VectorOrDirection_Vector(self, *args)


    def Direction(self, *args):
        """
        * returns Value as a Direction (Null if another type)

        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_VectorOrDirection_Direction(self, *args)

    __swig_destroy__ = _StepGeom.delete_StepGeom_VectorOrDirection
StepGeom_VectorOrDirection.CaseNum = new_instancemethod(_StepGeom.StepGeom_VectorOrDirection_CaseNum, None, StepGeom_VectorOrDirection)
StepGeom_VectorOrDirection.Vector = new_instancemethod(_StepGeom.StepGeom_VectorOrDirection_Vector, None, StepGeom_VectorOrDirection)
StepGeom_VectorOrDirection.Direction = new_instancemethod(_StepGeom.StepGeom_VectorOrDirection_Direction, None, StepGeom_VectorOrDirection)
StepGeom_VectorOrDirection_swigregister = _StepGeom.StepGeom_VectorOrDirection_swigregister
StepGeom_VectorOrDirection_swigregister(StepGeom_VectorOrDirection)

class StepGeom_CartesianTransformationOperator(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CartesianTransformationOperator

        :rtype: None

        """
        _StepGeom.StepGeom_CartesianTransformationOperator_swiginit(self, _StepGeom.new_StepGeom_CartesianTransformationOperator(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasAaxis1:
        :type hasAaxis1: bool
        :param aAxis1:
        :type aAxis1: Handle_StepGeom_Direction &
        :param hasAaxis2:
        :type hasAaxis2: bool
        :param aAxis2:
        :type aAxis2: Handle_StepGeom_Direction &
        :param aLocalOrigin:
        :type aLocalOrigin: Handle_StepGeom_CartesianPoint &
        :param hasAscale:
        :type hasAscale: bool
        :param aScale:
        :type aScale: float
        :rtype: void

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Init(self, *args)


    def SetAxis1(self, *args):
        """
        :param aAxis1:
        :type aAxis1: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetAxis1(self, *args)


    def UnSetAxis1(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_UnSetAxis1(self, *args)


    def Axis1(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Axis1(self, *args)


    def HasAxis1(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_HasAxis1(self, *args)


    def SetAxis2(self, *args):
        """
        :param aAxis2:
        :type aAxis2: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetAxis2(self, *args)


    def UnSetAxis2(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_UnSetAxis2(self, *args)


    def Axis2(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Axis2(self, *args)


    def HasAxis2(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_HasAxis2(self, *args)


    def SetLocalOrigin(self, *args):
        """
        :param aLocalOrigin:
        :type aLocalOrigin: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetLocalOrigin(self, *args)


    def LocalOrigin(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_LocalOrigin(self, *args)


    def SetScale(self, *args):
        """
        :param aScale:
        :type aScale: float
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_SetScale(self, *args)


    def UnSetScale(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_UnSetScale(self, *args)


    def Scale(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_Scale(self, *args)


    def HasScale(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator_HasScale(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CartesianTransformationOperator(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianTransformationOperator
StepGeom_CartesianTransformationOperator.Init = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_Init, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.SetAxis1 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_SetAxis1, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.UnSetAxis1 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_UnSetAxis1, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.Axis1 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_Axis1, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.HasAxis1 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_HasAxis1, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.SetAxis2 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_SetAxis2, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.UnSetAxis2 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_UnSetAxis2, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.Axis2 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_Axis2, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.HasAxis2 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_HasAxis2, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.SetLocalOrigin = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_SetLocalOrigin, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.LocalOrigin = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_LocalOrigin, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.SetScale = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_SetScale, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.UnSetScale = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_UnSetScale, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.Scale = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_Scale, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator.HasScale = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator_HasScale, None, StepGeom_CartesianTransformationOperator)
StepGeom_CartesianTransformationOperator_swigregister = _StepGeom.StepGeom_CartesianTransformationOperator_swigregister
StepGeom_CartesianTransformationOperator_swigregister(StepGeom_CartesianTransformationOperator)

class Handle_StepGeom_CartesianTransformationOperator(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CartesianTransformationOperator_swiginit(self, _StepGeom.new_Handle_StepGeom_CartesianTransformationOperator(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CartesianTransformationOperator
Handle_StepGeom_CartesianTransformationOperator.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator_Nullify, None, Handle_StepGeom_CartesianTransformationOperator)
Handle_StepGeom_CartesianTransformationOperator.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator_IsNull, None, Handle_StepGeom_CartesianTransformationOperator)
Handle_StepGeom_CartesianTransformationOperator.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator_GetObject, None, Handle_StepGeom_CartesianTransformationOperator)
Handle_StepGeom_CartesianTransformationOperator_swigregister = _StepGeom.Handle_StepGeom_CartesianTransformationOperator_swigregister
Handle_StepGeom_CartesianTransformationOperator_swigregister(Handle_StepGeom_CartesianTransformationOperator)

def Handle_StepGeom_CartesianTransformationOperator_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CartesianTransformationOperator_DownCast(AnObject)
Handle_StepGeom_CartesianTransformationOperator_DownCast = _StepGeom.Handle_StepGeom_CartesianTransformationOperator_DownCast

class StepGeom_Curve(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Curve

        :rtype: None

        """
        _StepGeom.StepGeom_Curve_swiginit(self, _StepGeom.new_StepGeom_Curve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Curve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Curve
StepGeom_Curve_swigregister = _StepGeom.StepGeom_Curve_swigregister
StepGeom_Curve_swigregister(StepGeom_Curve)

class Handle_StepGeom_Curve(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Curve_swiginit(self, _StepGeom.new_Handle_StepGeom_Curve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Curve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Curve
Handle_StepGeom_Curve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Curve_Nullify, None, Handle_StepGeom_Curve)
Handle_StepGeom_Curve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Curve_IsNull, None, Handle_StepGeom_Curve)
Handle_StepGeom_Curve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Curve_GetObject, None, Handle_StepGeom_Curve)
Handle_StepGeom_Curve_swigregister = _StepGeom.Handle_StepGeom_Curve_swigregister
Handle_StepGeom_Curve_swigregister(Handle_StepGeom_Curve)

def Handle_StepGeom_Curve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Curve_DownCast(AnObject)
Handle_StepGeom_Curve_DownCast = _StepGeom.Handle_StepGeom_Curve_DownCast

class StepGeom_Direction(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Direction

        :rtype: None

        """
        _StepGeom.StepGeom_Direction_swiginit(self, _StepGeom.new_StepGeom_Direction(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDirectionRatios:
        :type aDirectionRatios: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_Direction_Init(self, *args)


    def SetDirectionRatios(self, *args):
        """
        :param aDirectionRatios:
        :type aDirectionRatios: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_Direction_SetDirectionRatios(self, *args)


    def DirectionRatios(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_Direction_DirectionRatios(self, *args)


    def DirectionRatiosValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_Direction_DirectionRatiosValue(self, *args)


    def NbDirectionRatios(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Direction_NbDirectionRatios(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Direction(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Direction
StepGeom_Direction.Init = new_instancemethod(_StepGeom.StepGeom_Direction_Init, None, StepGeom_Direction)
StepGeom_Direction.SetDirectionRatios = new_instancemethod(_StepGeom.StepGeom_Direction_SetDirectionRatios, None, StepGeom_Direction)
StepGeom_Direction.DirectionRatios = new_instancemethod(_StepGeom.StepGeom_Direction_DirectionRatios, None, StepGeom_Direction)
StepGeom_Direction.DirectionRatiosValue = new_instancemethod(_StepGeom.StepGeom_Direction_DirectionRatiosValue, None, StepGeom_Direction)
StepGeom_Direction.NbDirectionRatios = new_instancemethod(_StepGeom.StepGeom_Direction_NbDirectionRatios, None, StepGeom_Direction)
StepGeom_Direction_swigregister = _StepGeom.StepGeom_Direction_swigregister
StepGeom_Direction_swigregister(StepGeom_Direction)

class Handle_StepGeom_Direction(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Direction_swiginit(self, _StepGeom.new_Handle_StepGeom_Direction(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Direction_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Direction
Handle_StepGeom_Direction.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Direction_Nullify, None, Handle_StepGeom_Direction)
Handle_StepGeom_Direction.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Direction_IsNull, None, Handle_StepGeom_Direction)
Handle_StepGeom_Direction.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Direction_GetObject, None, Handle_StepGeom_Direction)
Handle_StepGeom_Direction_swigregister = _StepGeom.Handle_StepGeom_Direction_swigregister
Handle_StepGeom_Direction_swigregister(Handle_StepGeom_Direction)

def Handle_StepGeom_Direction_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Direction_DownCast(AnObject)
Handle_StepGeom_Direction_DownCast = _StepGeom.Handle_StepGeom_Direction_DownCast

class StepGeom_Placement(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Placement

        :rtype: None

        """
        _StepGeom.StepGeom_Placement_swiginit(self, _StepGeom.new_StepGeom_Placement(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :rtype: void

        """
        return _StepGeom.StepGeom_Placement_Init(self, *args)


    def SetLocation(self, *args):
        """
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Placement_SetLocation(self, *args)


    def Location(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Placement_Location(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Placement(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Placement
StepGeom_Placement.Init = new_instancemethod(_StepGeom.StepGeom_Placement_Init, None, StepGeom_Placement)
StepGeom_Placement.SetLocation = new_instancemethod(_StepGeom.StepGeom_Placement_SetLocation, None, StepGeom_Placement)
StepGeom_Placement.Location = new_instancemethod(_StepGeom.StepGeom_Placement_Location, None, StepGeom_Placement)
StepGeom_Placement_swigregister = _StepGeom.StepGeom_Placement_swigregister
StepGeom_Placement_swigregister(StepGeom_Placement)

class Handle_StepGeom_Placement(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Placement_swiginit(self, _StepGeom.new_Handle_StepGeom_Placement(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Placement_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Placement
Handle_StepGeom_Placement.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Placement_Nullify, None, Handle_StepGeom_Placement)
Handle_StepGeom_Placement.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Placement_IsNull, None, Handle_StepGeom_Placement)
Handle_StepGeom_Placement.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Placement_GetObject, None, Handle_StepGeom_Placement)
Handle_StepGeom_Placement_swigregister = _StepGeom.Handle_StepGeom_Placement_swigregister
Handle_StepGeom_Placement_swigregister(Handle_StepGeom_Placement)

def Handle_StepGeom_Placement_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Placement_DownCast(AnObject)
Handle_StepGeom_Placement_DownCast = _StepGeom.Handle_StepGeom_Placement_DownCast

class StepGeom_Point(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Point

        :rtype: None

        """
        _StepGeom.StepGeom_Point_swiginit(self, _StepGeom.new_StepGeom_Point(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Point(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Point
StepGeom_Point_swigregister = _StepGeom.StepGeom_Point_swigregister
StepGeom_Point_swigregister(StepGeom_Point)

class Handle_StepGeom_Point(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Point_swiginit(self, _StepGeom.new_Handle_StepGeom_Point(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Point_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Point
Handle_StepGeom_Point.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Point_Nullify, None, Handle_StepGeom_Point)
Handle_StepGeom_Point.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Point_IsNull, None, Handle_StepGeom_Point)
Handle_StepGeom_Point.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Point_GetObject, None, Handle_StepGeom_Point)
Handle_StepGeom_Point_swigregister = _StepGeom.Handle_StepGeom_Point_swigregister
Handle_StepGeom_Point_swigregister(Handle_StepGeom_Point)

def Handle_StepGeom_Point_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Point_DownCast(AnObject)
Handle_StepGeom_Point_DownCast = _StepGeom.Handle_StepGeom_Point_DownCast

class StepGeom_ReparametrisedCompositeCurveSegment(StepGeom_CompositeCurveSegment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ReparametrisedCompositeCurveSegment

        :rtype: None

        """
        _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_swiginit(self, _StepGeom.new_StepGeom_ReparametrisedCompositeCurveSegment(*args))

    def Init(self, *args):
        """
        :param aTransition:
        :type aTransition: StepGeom_TransitionCode
        :param aSameSense:
        :type aSameSense: bool
        :param aParentCurve:
        :type aParentCurve: Handle_StepGeom_Curve &
        :rtype: void

        :param aTransition:
        :type aTransition: StepGeom_TransitionCode
        :param aSameSense:
        :type aSameSense: bool
        :param aParentCurve:
        :type aParentCurve: Handle_StepGeom_Curve &
        :param aParamLength:
        :type aParamLength: float
        :rtype: void

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_Init(self, *args)


    def SetParamLength(self, *args):
        """
        :param aParamLength:
        :type aParamLength: float
        :rtype: None

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_SetParamLength(self, *args)


    def ParamLength(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_ParamLength(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_ReparametrisedCompositeCurveSegment(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_ReparametrisedCompositeCurveSegment
StepGeom_ReparametrisedCompositeCurveSegment.Init = new_instancemethod(_StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_Init, None, StepGeom_ReparametrisedCompositeCurveSegment)
StepGeom_ReparametrisedCompositeCurveSegment.SetParamLength = new_instancemethod(_StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_SetParamLength, None, StepGeom_ReparametrisedCompositeCurveSegment)
StepGeom_ReparametrisedCompositeCurveSegment.ParamLength = new_instancemethod(_StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_ParamLength, None, StepGeom_ReparametrisedCompositeCurveSegment)
StepGeom_ReparametrisedCompositeCurveSegment_swigregister = _StepGeom.StepGeom_ReparametrisedCompositeCurveSegment_swigregister
StepGeom_ReparametrisedCompositeCurveSegment_swigregister(StepGeom_ReparametrisedCompositeCurveSegment)

class Handle_StepGeom_ReparametrisedCompositeCurveSegment(Handle_StepGeom_CompositeCurveSegment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_swiginit(self, _StepGeom.new_Handle_StepGeom_ReparametrisedCompositeCurveSegment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ReparametrisedCompositeCurveSegment
Handle_StepGeom_ReparametrisedCompositeCurveSegment.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_Nullify, None, Handle_StepGeom_ReparametrisedCompositeCurveSegment)
Handle_StepGeom_ReparametrisedCompositeCurveSegment.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_IsNull, None, Handle_StepGeom_ReparametrisedCompositeCurveSegment)
Handle_StepGeom_ReparametrisedCompositeCurveSegment.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_GetObject, None, Handle_StepGeom_ReparametrisedCompositeCurveSegment)
Handle_StepGeom_ReparametrisedCompositeCurveSegment_swigregister = _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_swigregister
Handle_StepGeom_ReparametrisedCompositeCurveSegment_swigregister(Handle_StepGeom_ReparametrisedCompositeCurveSegment)

def Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast(AnObject)
Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast = _StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment_DownCast

class StepGeom_Surface(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Surface

        :rtype: None

        """
        _StepGeom.StepGeom_Surface_swiginit(self, _StepGeom.new_StepGeom_Surface(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Surface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Surface
StepGeom_Surface_swigregister = _StepGeom.StepGeom_Surface_swigregister
StepGeom_Surface_swigregister(StepGeom_Surface)

class Handle_StepGeom_Surface(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Surface_swiginit(self, _StepGeom.new_Handle_StepGeom_Surface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Surface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Surface
Handle_StepGeom_Surface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Surface_Nullify, None, Handle_StepGeom_Surface)
Handle_StepGeom_Surface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Surface_IsNull, None, Handle_StepGeom_Surface)
Handle_StepGeom_Surface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Surface_GetObject, None, Handle_StepGeom_Surface)
Handle_StepGeom_Surface_swigregister = _StepGeom.Handle_StepGeom_Surface_swigregister
Handle_StepGeom_Surface_swigregister(Handle_StepGeom_Surface)

def Handle_StepGeom_Surface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Surface_DownCast(AnObject)
Handle_StepGeom_Surface_DownCast = _StepGeom.Handle_StepGeom_Surface_DownCast

class StepGeom_Vector(StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Vector

        :rtype: None

        """
        _StepGeom.StepGeom_Vector_swiginit(self, _StepGeom.new_StepGeom_Vector(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOrientation:
        :type aOrientation: Handle_StepGeom_Direction &
        :param aMagnitude:
        :type aMagnitude: float
        :rtype: void

        """
        return _StepGeom.StepGeom_Vector_Init(self, *args)


    def SetOrientation(self, *args):
        """
        :param aOrientation:
        :type aOrientation: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_Vector_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Vector_Orientation(self, *args)


    def SetMagnitude(self, *args):
        """
        :param aMagnitude:
        :type aMagnitude: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Vector_SetMagnitude(self, *args)


    def Magnitude(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Vector_Magnitude(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Vector(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Vector
StepGeom_Vector.Init = new_instancemethod(_StepGeom.StepGeom_Vector_Init, None, StepGeom_Vector)
StepGeom_Vector.SetOrientation = new_instancemethod(_StepGeom.StepGeom_Vector_SetOrientation, None, StepGeom_Vector)
StepGeom_Vector.Orientation = new_instancemethod(_StepGeom.StepGeom_Vector_Orientation, None, StepGeom_Vector)
StepGeom_Vector.SetMagnitude = new_instancemethod(_StepGeom.StepGeom_Vector_SetMagnitude, None, StepGeom_Vector)
StepGeom_Vector.Magnitude = new_instancemethod(_StepGeom.StepGeom_Vector_Magnitude, None, StepGeom_Vector)
StepGeom_Vector_swigregister = _StepGeom.StepGeom_Vector_swigregister
StepGeom_Vector_swigregister(StepGeom_Vector)

class Handle_StepGeom_Vector(Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Vector_swiginit(self, _StepGeom.new_Handle_StepGeom_Vector(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Vector_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Vector
Handle_StepGeom_Vector.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Vector_Nullify, None, Handle_StepGeom_Vector)
Handle_StepGeom_Vector.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Vector_IsNull, None, Handle_StepGeom_Vector)
Handle_StepGeom_Vector.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Vector_GetObject, None, Handle_StepGeom_Vector)
Handle_StepGeom_Vector_swigregister = _StepGeom.Handle_StepGeom_Vector_swigregister
Handle_StepGeom_Vector_swigregister(Handle_StepGeom_Vector)

def Handle_StepGeom_Vector_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Vector_DownCast(AnObject)
Handle_StepGeom_Vector_DownCast = _StepGeom.Handle_StepGeom_Vector_DownCast

class StepGeom_Axis1Placement(StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Axis1Placement

        :rtype: None

        """
        _StepGeom.StepGeom_Axis1Placement_swiginit(self, _StepGeom.new_StepGeom_Axis1Placement(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :param hasAaxis:
        :type hasAaxis: bool
        :param aAxis:
        :type aAxis: Handle_StepGeom_Direction &
        :rtype: void

        """
        return _StepGeom.StepGeom_Axis1Placement_Init(self, *args)


    def SetAxis(self, *args):
        """
        :param aAxis:
        :type aAxis: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis1Placement_SetAxis(self, *args)


    def UnSetAxis(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis1Placement_UnSetAxis(self, *args)


    def Axis(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis1Placement_Axis(self, *args)


    def HasAxis(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Axis1Placement_HasAxis(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Axis1Placement(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis1Placement
StepGeom_Axis1Placement.Init = new_instancemethod(_StepGeom.StepGeom_Axis1Placement_Init, None, StepGeom_Axis1Placement)
StepGeom_Axis1Placement.SetAxis = new_instancemethod(_StepGeom.StepGeom_Axis1Placement_SetAxis, None, StepGeom_Axis1Placement)
StepGeom_Axis1Placement.UnSetAxis = new_instancemethod(_StepGeom.StepGeom_Axis1Placement_UnSetAxis, None, StepGeom_Axis1Placement)
StepGeom_Axis1Placement.Axis = new_instancemethod(_StepGeom.StepGeom_Axis1Placement_Axis, None, StepGeom_Axis1Placement)
StepGeom_Axis1Placement.HasAxis = new_instancemethod(_StepGeom.StepGeom_Axis1Placement_HasAxis, None, StepGeom_Axis1Placement)
StepGeom_Axis1Placement_swigregister = _StepGeom.StepGeom_Axis1Placement_swigregister
StepGeom_Axis1Placement_swigregister(StepGeom_Axis1Placement)

class Handle_StepGeom_Axis1Placement(Handle_StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Axis1Placement_swiginit(self, _StepGeom.new_Handle_StepGeom_Axis1Placement(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Axis1Placement_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Axis1Placement
Handle_StepGeom_Axis1Placement.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Axis1Placement_Nullify, None, Handle_StepGeom_Axis1Placement)
Handle_StepGeom_Axis1Placement.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Axis1Placement_IsNull, None, Handle_StepGeom_Axis1Placement)
Handle_StepGeom_Axis1Placement.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Axis1Placement_GetObject, None, Handle_StepGeom_Axis1Placement)
Handle_StepGeom_Axis1Placement_swigregister = _StepGeom.Handle_StepGeom_Axis1Placement_swigregister
Handle_StepGeom_Axis1Placement_swigregister(Handle_StepGeom_Axis1Placement)

def Handle_StepGeom_Axis1Placement_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Axis1Placement_DownCast(AnObject)
Handle_StepGeom_Axis1Placement_DownCast = _StepGeom.Handle_StepGeom_Axis1Placement_DownCast

class StepGeom_Axis2Placement2d(StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Axis2Placement2d

        :rtype: None

        """
        _StepGeom.StepGeom_Axis2Placement2d_swiginit(self, _StepGeom.new_StepGeom_Axis2Placement2d(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :param hasArefDirection:
        :type hasArefDirection: bool
        :param aRefDirection:
        :type aRefDirection: Handle_StepGeom_Direction &
        :rtype: void

        """
        return _StepGeom.StepGeom_Axis2Placement2d_Init(self, *args)


    def SetRefDirection(self, *args):
        """
        :param aRefDirection:
        :type aRefDirection: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis2Placement2d_SetRefDirection(self, *args)


    def UnSetRefDirection(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis2Placement2d_UnSetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement2d_RefDirection(self, *args)


    def HasRefDirection(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Axis2Placement2d_HasRefDirection(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Axis2Placement2d(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis2Placement2d
StepGeom_Axis2Placement2d.Init = new_instancemethod(_StepGeom.StepGeom_Axis2Placement2d_Init, None, StepGeom_Axis2Placement2d)
StepGeom_Axis2Placement2d.SetRefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement2d_SetRefDirection, None, StepGeom_Axis2Placement2d)
StepGeom_Axis2Placement2d.UnSetRefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement2d_UnSetRefDirection, None, StepGeom_Axis2Placement2d)
StepGeom_Axis2Placement2d.RefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement2d_RefDirection, None, StepGeom_Axis2Placement2d)
StepGeom_Axis2Placement2d.HasRefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement2d_HasRefDirection, None, StepGeom_Axis2Placement2d)
StepGeom_Axis2Placement2d_swigregister = _StepGeom.StepGeom_Axis2Placement2d_swigregister
StepGeom_Axis2Placement2d_swigregister(StepGeom_Axis2Placement2d)

class Handle_StepGeom_Axis2Placement2d(Handle_StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Axis2Placement2d_swiginit(self, _StepGeom.new_Handle_StepGeom_Axis2Placement2d(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Axis2Placement2d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Axis2Placement2d
Handle_StepGeom_Axis2Placement2d.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Axis2Placement2d_Nullify, None, Handle_StepGeom_Axis2Placement2d)
Handle_StepGeom_Axis2Placement2d.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Axis2Placement2d_IsNull, None, Handle_StepGeom_Axis2Placement2d)
Handle_StepGeom_Axis2Placement2d.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Axis2Placement2d_GetObject, None, Handle_StepGeom_Axis2Placement2d)
Handle_StepGeom_Axis2Placement2d_swigregister = _StepGeom.Handle_StepGeom_Axis2Placement2d_swigregister
Handle_StepGeom_Axis2Placement2d_swigregister(Handle_StepGeom_Axis2Placement2d)

def Handle_StepGeom_Axis2Placement2d_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Axis2Placement2d_DownCast(AnObject)
Handle_StepGeom_Axis2Placement2d_DownCast = _StepGeom.Handle_StepGeom_Axis2Placement2d_DownCast

class StepGeom_Axis2Placement3d(StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Axis2Placement3d

        :rtype: None

        """
        _StepGeom.StepGeom_Axis2Placement3d_swiginit(self, _StepGeom.new_StepGeom_Axis2Placement3d(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLocation:
        :type aLocation: Handle_StepGeom_CartesianPoint &
        :param hasAaxis:
        :type hasAaxis: bool
        :param aAxis:
        :type aAxis: Handle_StepGeom_Direction &
        :param hasArefDirection:
        :type hasArefDirection: bool
        :param aRefDirection:
        :type aRefDirection: Handle_StepGeom_Direction &
        :rtype: void

        """
        return _StepGeom.StepGeom_Axis2Placement3d_Init(self, *args)


    def SetAxis(self, *args):
        """
        :param aAxis:
        :type aAxis: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis2Placement3d_SetAxis(self, *args)


    def UnSetAxis(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis2Placement3d_UnSetAxis(self, *args)


    def Axis(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_Axis(self, *args)


    def HasAxis(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Axis2Placement3d_HasAxis(self, *args)


    def SetRefDirection(self, *args):
        """
        :param aRefDirection:
        :type aRefDirection: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis2Placement3d_SetRefDirection(self, *args)


    def UnSetRefDirection(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_Axis2Placement3d_UnSetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_Axis2Placement3d_RefDirection(self, *args)


    def HasRefDirection(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_Axis2Placement3d_HasRefDirection(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Axis2Placement3d(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Axis2Placement3d
StepGeom_Axis2Placement3d.Init = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_Init, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.SetAxis = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_SetAxis, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.UnSetAxis = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_UnSetAxis, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.Axis = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_Axis, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.HasAxis = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_HasAxis, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.SetRefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_SetRefDirection, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.UnSetRefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_UnSetRefDirection, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.RefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_RefDirection, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d.HasRefDirection = new_instancemethod(_StepGeom.StepGeom_Axis2Placement3d_HasRefDirection, None, StepGeom_Axis2Placement3d)
StepGeom_Axis2Placement3d_swigregister = _StepGeom.StepGeom_Axis2Placement3d_swigregister
StepGeom_Axis2Placement3d_swigregister(StepGeom_Axis2Placement3d)

class Handle_StepGeom_Axis2Placement3d(Handle_StepGeom_Placement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Axis2Placement3d_swiginit(self, _StepGeom.new_Handle_StepGeom_Axis2Placement3d(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Axis2Placement3d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Axis2Placement3d
Handle_StepGeom_Axis2Placement3d.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Axis2Placement3d_Nullify, None, Handle_StepGeom_Axis2Placement3d)
Handle_StepGeom_Axis2Placement3d.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Axis2Placement3d_IsNull, None, Handle_StepGeom_Axis2Placement3d)
Handle_StepGeom_Axis2Placement3d.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Axis2Placement3d_GetObject, None, Handle_StepGeom_Axis2Placement3d)
Handle_StepGeom_Axis2Placement3d_swigregister = _StepGeom.Handle_StepGeom_Axis2Placement3d_swigregister
Handle_StepGeom_Axis2Placement3d_swigregister(Handle_StepGeom_Axis2Placement3d)

def Handle_StepGeom_Axis2Placement3d_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Axis2Placement3d_DownCast(AnObject)
Handle_StepGeom_Axis2Placement3d_DownCast = _StepGeom.Handle_StepGeom_Axis2Placement3d_DownCast

class StepGeom_BoundedCurve(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BoundedCurve

        :rtype: None

        """
        _StepGeom.StepGeom_BoundedCurve_swiginit(self, _StepGeom.new_StepGeom_BoundedCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BoundedCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BoundedCurve
StepGeom_BoundedCurve_swigregister = _StepGeom.StepGeom_BoundedCurve_swigregister
StepGeom_BoundedCurve_swigregister(StepGeom_BoundedCurve)

class Handle_StepGeom_BoundedCurve(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BoundedCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_BoundedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BoundedCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BoundedCurve
Handle_StepGeom_BoundedCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BoundedCurve_Nullify, None, Handle_StepGeom_BoundedCurve)
Handle_StepGeom_BoundedCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BoundedCurve_IsNull, None, Handle_StepGeom_BoundedCurve)
Handle_StepGeom_BoundedCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BoundedCurve_GetObject, None, Handle_StepGeom_BoundedCurve)
Handle_StepGeom_BoundedCurve_swigregister = _StepGeom.Handle_StepGeom_BoundedCurve_swigregister
Handle_StepGeom_BoundedCurve_swigregister(Handle_StepGeom_BoundedCurve)

def Handle_StepGeom_BoundedCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BoundedCurve_DownCast(AnObject)
Handle_StepGeom_BoundedCurve_DownCast = _StepGeom.Handle_StepGeom_BoundedCurve_DownCast

class StepGeom_BoundedSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BoundedSurface

        :rtype: None

        """
        _StepGeom.StepGeom_BoundedSurface_swiginit(self, _StepGeom.new_StepGeom_BoundedSurface(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BoundedSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BoundedSurface
StepGeom_BoundedSurface_swigregister = _StepGeom.StepGeom_BoundedSurface_swigregister
StepGeom_BoundedSurface_swigregister(StepGeom_BoundedSurface)

class Handle_StepGeom_BoundedSurface(Handle_StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BoundedSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_BoundedSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BoundedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BoundedSurface
Handle_StepGeom_BoundedSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BoundedSurface_Nullify, None, Handle_StepGeom_BoundedSurface)
Handle_StepGeom_BoundedSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BoundedSurface_IsNull, None, Handle_StepGeom_BoundedSurface)
Handle_StepGeom_BoundedSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BoundedSurface_GetObject, None, Handle_StepGeom_BoundedSurface)
Handle_StepGeom_BoundedSurface_swigregister = _StepGeom.Handle_StepGeom_BoundedSurface_swigregister
Handle_StepGeom_BoundedSurface_swigregister(Handle_StepGeom_BoundedSurface)

def Handle_StepGeom_BoundedSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BoundedSurface_DownCast(AnObject)
Handle_StepGeom_BoundedSurface_DownCast = _StepGeom.Handle_StepGeom_BoundedSurface_DownCast

class StepGeom_CartesianPoint(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CartesianPoint

        :rtype: None

        """
        _StepGeom.StepGeom_CartesianPoint_swiginit(self, _StepGeom.new_StepGeom_CartesianPoint(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aCoordinates:
        :type aCoordinates: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_CartesianPoint_Init(self, *args)


    def Init2D(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianPoint_Init2D(self, *args)


    def Init3D(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianPoint_Init3D(self, *args)


    def SetCoordinates(self, *args):
        """
        :param aCoordinates:
        :type aCoordinates: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianPoint_SetCoordinates(self, *args)


    def Coordinates(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_CartesianPoint_Coordinates(self, *args)


    def CoordinatesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_CartesianPoint_CoordinatesValue(self, *args)


    def NbCoordinates(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_CartesianPoint_NbCoordinates(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CartesianPoint(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianPoint
StepGeom_CartesianPoint.Init = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_Init, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint.Init2D = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_Init2D, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint.Init3D = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_Init3D, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint.SetCoordinates = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_SetCoordinates, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint.Coordinates = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_Coordinates, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint.CoordinatesValue = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_CoordinatesValue, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint.NbCoordinates = new_instancemethod(_StepGeom.StepGeom_CartesianPoint_NbCoordinates, None, StepGeom_CartesianPoint)
StepGeom_CartesianPoint_swigregister = _StepGeom.StepGeom_CartesianPoint_swigregister
StepGeom_CartesianPoint_swigregister(StepGeom_CartesianPoint)

class Handle_StepGeom_CartesianPoint(Handle_StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CartesianPoint_swiginit(self, _StepGeom.new_Handle_StepGeom_CartesianPoint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CartesianPoint_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CartesianPoint
Handle_StepGeom_CartesianPoint.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianPoint_Nullify, None, Handle_StepGeom_CartesianPoint)
Handle_StepGeom_CartesianPoint.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianPoint_IsNull, None, Handle_StepGeom_CartesianPoint)
Handle_StepGeom_CartesianPoint.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianPoint_GetObject, None, Handle_StepGeom_CartesianPoint)
Handle_StepGeom_CartesianPoint_swigregister = _StepGeom.Handle_StepGeom_CartesianPoint_swigregister
Handle_StepGeom_CartesianPoint_swigregister(Handle_StepGeom_CartesianPoint)

def Handle_StepGeom_CartesianPoint_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CartesianPoint_DownCast(AnObject)
Handle_StepGeom_CartesianPoint_DownCast = _StepGeom.Handle_StepGeom_CartesianPoint_DownCast

class StepGeom_CartesianTransformationOperator2d(StepGeom_CartesianTransformationOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepGeom.StepGeom_CartesianTransformationOperator2d_swiginit(self, _StepGeom.new_StepGeom_CartesianTransformationOperator2d(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CartesianTransformationOperator2d(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianTransformationOperator2d
StepGeom_CartesianTransformationOperator2d_swigregister = _StepGeom.StepGeom_CartesianTransformationOperator2d_swigregister
StepGeom_CartesianTransformationOperator2d_swigregister(StepGeom_CartesianTransformationOperator2d)

class Handle_StepGeom_CartesianTransformationOperator2d(Handle_StepGeom_CartesianTransformationOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_swiginit(self, _StepGeom.new_Handle_StepGeom_CartesianTransformationOperator2d(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CartesianTransformationOperator2d
Handle_StepGeom_CartesianTransformationOperator2d.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_Nullify, None, Handle_StepGeom_CartesianTransformationOperator2d)
Handle_StepGeom_CartesianTransformationOperator2d.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_IsNull, None, Handle_StepGeom_CartesianTransformationOperator2d)
Handle_StepGeom_CartesianTransformationOperator2d.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_GetObject, None, Handle_StepGeom_CartesianTransformationOperator2d)
Handle_StepGeom_CartesianTransformationOperator2d_swigregister = _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_swigregister
Handle_StepGeom_CartesianTransformationOperator2d_swigregister(Handle_StepGeom_CartesianTransformationOperator2d)

def Handle_StepGeom_CartesianTransformationOperator2d_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DownCast(AnObject)
Handle_StepGeom_CartesianTransformationOperator2d_DownCast = _StepGeom.Handle_StepGeom_CartesianTransformationOperator2d_DownCast

class StepGeom_CartesianTransformationOperator3d(StepGeom_CartesianTransformationOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CartesianTransformationOperator3d

        :rtype: None

        """
        _StepGeom.StepGeom_CartesianTransformationOperator3d_swiginit(self, _StepGeom.new_StepGeom_CartesianTransformationOperator3d(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasAaxis1:
        :type hasAaxis1: bool
        :param aAxis1:
        :type aAxis1: Handle_StepGeom_Direction &
        :param hasAaxis2:
        :type hasAaxis2: bool
        :param aAxis2:
        :type aAxis2: Handle_StepGeom_Direction &
        :param aLocalOrigin:
        :type aLocalOrigin: Handle_StepGeom_CartesianPoint &
        :param hasAscale:
        :type hasAscale: bool
        :param aScale:
        :type aScale: float
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param hasAaxis1:
        :type hasAaxis1: bool
        :param aAxis1:
        :type aAxis1: Handle_StepGeom_Direction &
        :param hasAaxis2:
        :type hasAaxis2: bool
        :param aAxis2:
        :type aAxis2: Handle_StepGeom_Direction &
        :param aLocalOrigin:
        :type aLocalOrigin: Handle_StepGeom_CartesianPoint &
        :param hasAscale:
        :type hasAscale: bool
        :param aScale:
        :type aScale: float
        :param hasAaxis3:
        :type hasAaxis3: bool
        :param aAxis3:
        :type aAxis3: Handle_StepGeom_Direction &
        :rtype: void

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_Init(self, *args)


    def SetAxis3(self, *args):
        """
        :param aAxis3:
        :type aAxis3: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_SetAxis3(self, *args)


    def UnSetAxis3(self, *args):
        """
        :rtype: None

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_UnSetAxis3(self, *args)


    def Axis3(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_Axis3(self, *args)


    def HasAxis3(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_CartesianTransformationOperator3d_HasAxis3(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CartesianTransformationOperator3d(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CartesianTransformationOperator3d
StepGeom_CartesianTransformationOperator3d.Init = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator3d_Init, None, StepGeom_CartesianTransformationOperator3d)
StepGeom_CartesianTransformationOperator3d.SetAxis3 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator3d_SetAxis3, None, StepGeom_CartesianTransformationOperator3d)
StepGeom_CartesianTransformationOperator3d.UnSetAxis3 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator3d_UnSetAxis3, None, StepGeom_CartesianTransformationOperator3d)
StepGeom_CartesianTransformationOperator3d.Axis3 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator3d_Axis3, None, StepGeom_CartesianTransformationOperator3d)
StepGeom_CartesianTransformationOperator3d.HasAxis3 = new_instancemethod(_StepGeom.StepGeom_CartesianTransformationOperator3d_HasAxis3, None, StepGeom_CartesianTransformationOperator3d)
StepGeom_CartesianTransformationOperator3d_swigregister = _StepGeom.StepGeom_CartesianTransformationOperator3d_swigregister
StepGeom_CartesianTransformationOperator3d_swigregister(StepGeom_CartesianTransformationOperator3d)

class Handle_StepGeom_CartesianTransformationOperator3d(Handle_StepGeom_CartesianTransformationOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_swiginit(self, _StepGeom.new_Handle_StepGeom_CartesianTransformationOperator3d(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CartesianTransformationOperator3d
Handle_StepGeom_CartesianTransformationOperator3d.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_Nullify, None, Handle_StepGeom_CartesianTransformationOperator3d)
Handle_StepGeom_CartesianTransformationOperator3d.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_IsNull, None, Handle_StepGeom_CartesianTransformationOperator3d)
Handle_StepGeom_CartesianTransformationOperator3d.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_GetObject, None, Handle_StepGeom_CartesianTransformationOperator3d)
Handle_StepGeom_CartesianTransformationOperator3d_swigregister = _StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_swigregister
Handle_StepGeom_CartesianTransformationOperator3d_swigregister(Handle_StepGeom_CartesianTransformationOperator3d)

def Handle_StepGeom_CartesianTransformationOperator3d_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_DownCast(AnObject)
Handle_StepGeom_CartesianTransformationOperator3d_DownCast = _StepGeom.Handle_StepGeom_CartesianTransformationOperator3d_DownCast

class StepGeom_Conic(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Conic

        :rtype: None

        """
        _StepGeom.StepGeom_Conic_swiginit(self, _StepGeom.new_StepGeom_Conic(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :rtype: void

        """
        return _StepGeom.StepGeom_Conic_Init(self, *args)


    def SetPosition(self, *args):
        """
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :rtype: None

        """
        return _StepGeom.StepGeom_Conic_SetPosition(self, *args)


    def Position(self, *args):
        """
        :rtype: StepGeom_Axis2Placement

        """
        return _StepGeom.StepGeom_Conic_Position(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Conic(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Conic
StepGeom_Conic.Init = new_instancemethod(_StepGeom.StepGeom_Conic_Init, None, StepGeom_Conic)
StepGeom_Conic.SetPosition = new_instancemethod(_StepGeom.StepGeom_Conic_SetPosition, None, StepGeom_Conic)
StepGeom_Conic.Position = new_instancemethod(_StepGeom.StepGeom_Conic_Position, None, StepGeom_Conic)
StepGeom_Conic_swigregister = _StepGeom.StepGeom_Conic_swigregister
StepGeom_Conic_swigregister(StepGeom_Conic)

class Handle_StepGeom_Conic(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Conic_swiginit(self, _StepGeom.new_Handle_StepGeom_Conic(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Conic_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Conic
Handle_StepGeom_Conic.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Conic_Nullify, None, Handle_StepGeom_Conic)
Handle_StepGeom_Conic.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Conic_IsNull, None, Handle_StepGeom_Conic)
Handle_StepGeom_Conic.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Conic_GetObject, None, Handle_StepGeom_Conic)
Handle_StepGeom_Conic_swigregister = _StepGeom.Handle_StepGeom_Conic_swigregister
Handle_StepGeom_Conic_swigregister(Handle_StepGeom_Conic)

def Handle_StepGeom_Conic_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Conic_DownCast(AnObject)
Handle_StepGeom_Conic_DownCast = _StepGeom.Handle_StepGeom_Conic_DownCast

class StepGeom_CurveReplica(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CurveReplica

        :rtype: None

        """
        _StepGeom.StepGeom_CurveReplica_swiginit(self, _StepGeom.new_StepGeom_CurveReplica(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aParentCurve:
        :type aParentCurve: Handle_StepGeom_Curve &
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator &
        :rtype: void

        """
        return _StepGeom.StepGeom_CurveReplica_Init(self, *args)


    def SetParentCurve(self, *args):
        """
        :param aParentCurve:
        :type aParentCurve: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_CurveReplica_SetParentCurve(self, *args)


    def ParentCurve(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_CurveReplica_ParentCurve(self, *args)


    def SetTransformation(self, *args):
        """
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator &
        :rtype: None

        """
        return _StepGeom.StepGeom_CurveReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_CurveReplica_Transformation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CurveReplica(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CurveReplica
StepGeom_CurveReplica.Init = new_instancemethod(_StepGeom.StepGeom_CurveReplica_Init, None, StepGeom_CurveReplica)
StepGeom_CurveReplica.SetParentCurve = new_instancemethod(_StepGeom.StepGeom_CurveReplica_SetParentCurve, None, StepGeom_CurveReplica)
StepGeom_CurveReplica.ParentCurve = new_instancemethod(_StepGeom.StepGeom_CurveReplica_ParentCurve, None, StepGeom_CurveReplica)
StepGeom_CurveReplica.SetTransformation = new_instancemethod(_StepGeom.StepGeom_CurveReplica_SetTransformation, None, StepGeom_CurveReplica)
StepGeom_CurveReplica.Transformation = new_instancemethod(_StepGeom.StepGeom_CurveReplica_Transformation, None, StepGeom_CurveReplica)
StepGeom_CurveReplica_swigregister = _StepGeom.StepGeom_CurveReplica_swigregister
StepGeom_CurveReplica_swigregister(StepGeom_CurveReplica)

class Handle_StepGeom_CurveReplica(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CurveReplica_swiginit(self, _StepGeom.new_Handle_StepGeom_CurveReplica(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CurveReplica_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CurveReplica
Handle_StepGeom_CurveReplica.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CurveReplica_Nullify, None, Handle_StepGeom_CurveReplica)
Handle_StepGeom_CurveReplica.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CurveReplica_IsNull, None, Handle_StepGeom_CurveReplica)
Handle_StepGeom_CurveReplica.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CurveReplica_GetObject, None, Handle_StepGeom_CurveReplica)
Handle_StepGeom_CurveReplica_swigregister = _StepGeom.Handle_StepGeom_CurveReplica_swigregister
Handle_StepGeom_CurveReplica_swigregister(Handle_StepGeom_CurveReplica)

def Handle_StepGeom_CurveReplica_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CurveReplica_DownCast(AnObject)
Handle_StepGeom_CurveReplica_DownCast = _StepGeom.Handle_StepGeom_CurveReplica_DownCast

class StepGeom_DegeneratePcurve(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DegeneratePcurve

        :rtype: None

        """
        _StepGeom.StepGeom_DegeneratePcurve_swiginit(self, _StepGeom.new_StepGeom_DegeneratePcurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aReferenceToCurve:
        :type aReferenceToCurve: Handle_StepRepr_DefinitionalRepresentation &
        :rtype: void

        """
        return _StepGeom.StepGeom_DegeneratePcurve_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_DegeneratePcurve_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_DegeneratePcurve_BasisSurface(self, *args)


    def SetReferenceToCurve(self, *args):
        """
        :param aReferenceToCurve:
        :type aReferenceToCurve: Handle_StepRepr_DefinitionalRepresentation &
        :rtype: None

        """
        return _StepGeom.StepGeom_DegeneratePcurve_SetReferenceToCurve(self, *args)


    def ReferenceToCurve(self, *args):
        """
        :rtype: Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_DegeneratePcurve_ReferenceToCurve(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_DegeneratePcurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_DegeneratePcurve
StepGeom_DegeneratePcurve.Init = new_instancemethod(_StepGeom.StepGeom_DegeneratePcurve_Init, None, StepGeom_DegeneratePcurve)
StepGeom_DegeneratePcurve.SetBasisSurface = new_instancemethod(_StepGeom.StepGeom_DegeneratePcurve_SetBasisSurface, None, StepGeom_DegeneratePcurve)
StepGeom_DegeneratePcurve.BasisSurface = new_instancemethod(_StepGeom.StepGeom_DegeneratePcurve_BasisSurface, None, StepGeom_DegeneratePcurve)
StepGeom_DegeneratePcurve.SetReferenceToCurve = new_instancemethod(_StepGeom.StepGeom_DegeneratePcurve_SetReferenceToCurve, None, StepGeom_DegeneratePcurve)
StepGeom_DegeneratePcurve.ReferenceToCurve = new_instancemethod(_StepGeom.StepGeom_DegeneratePcurve_ReferenceToCurve, None, StepGeom_DegeneratePcurve)
StepGeom_DegeneratePcurve_swigregister = _StepGeom.StepGeom_DegeneratePcurve_swigregister
StepGeom_DegeneratePcurve_swigregister(StepGeom_DegeneratePcurve)

class Handle_StepGeom_DegeneratePcurve(Handle_StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_DegeneratePcurve_swiginit(self, _StepGeom.new_Handle_StepGeom_DegeneratePcurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_DegeneratePcurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_DegeneratePcurve
Handle_StepGeom_DegeneratePcurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_DegeneratePcurve_Nullify, None, Handle_StepGeom_DegeneratePcurve)
Handle_StepGeom_DegeneratePcurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_DegeneratePcurve_IsNull, None, Handle_StepGeom_DegeneratePcurve)
Handle_StepGeom_DegeneratePcurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_DegeneratePcurve_GetObject, None, Handle_StepGeom_DegeneratePcurve)
Handle_StepGeom_DegeneratePcurve_swigregister = _StepGeom.Handle_StepGeom_DegeneratePcurve_swigregister
Handle_StepGeom_DegeneratePcurve_swigregister(Handle_StepGeom_DegeneratePcurve)

def Handle_StepGeom_DegeneratePcurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_DegeneratePcurve_DownCast(AnObject)
Handle_StepGeom_DegeneratePcurve_DownCast = _StepGeom.Handle_StepGeom_DegeneratePcurve_DownCast

class StepGeom_ElementarySurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ElementarySurface

        :rtype: None

        """
        _StepGeom.StepGeom_ElementarySurface_swiginit(self, _StepGeom.new_StepGeom_ElementarySurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: void

        """
        return _StepGeom.StepGeom_ElementarySurface_Init(self, *args)


    def SetPosition(self, *args):
        """
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: None

        """
        return _StepGeom.StepGeom_ElementarySurface_SetPosition(self, *args)


    def Position(self, *args):
        """
        :rtype: Handle_StepGeom_Axis2Placement3d

        """
        return _StepGeom.StepGeom_ElementarySurface_Position(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_ElementarySurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_ElementarySurface
StepGeom_ElementarySurface.Init = new_instancemethod(_StepGeom.StepGeom_ElementarySurface_Init, None, StepGeom_ElementarySurface)
StepGeom_ElementarySurface.SetPosition = new_instancemethod(_StepGeom.StepGeom_ElementarySurface_SetPosition, None, StepGeom_ElementarySurface)
StepGeom_ElementarySurface.Position = new_instancemethod(_StepGeom.StepGeom_ElementarySurface_Position, None, StepGeom_ElementarySurface)
StepGeom_ElementarySurface_swigregister = _StepGeom.StepGeom_ElementarySurface_swigregister
StepGeom_ElementarySurface_swigregister(StepGeom_ElementarySurface)

class Handle_StepGeom_ElementarySurface(Handle_StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_ElementarySurface_swiginit(self, _StepGeom.new_Handle_StepGeom_ElementarySurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ElementarySurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ElementarySurface
Handle_StepGeom_ElementarySurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_ElementarySurface_Nullify, None, Handle_StepGeom_ElementarySurface)
Handle_StepGeom_ElementarySurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_ElementarySurface_IsNull, None, Handle_StepGeom_ElementarySurface)
Handle_StepGeom_ElementarySurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_ElementarySurface_GetObject, None, Handle_StepGeom_ElementarySurface)
Handle_StepGeom_ElementarySurface_swigregister = _StepGeom.Handle_StepGeom_ElementarySurface_swigregister
Handle_StepGeom_ElementarySurface_swigregister(Handle_StepGeom_ElementarySurface)

def Handle_StepGeom_ElementarySurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_ElementarySurface_DownCast(AnObject)
Handle_StepGeom_ElementarySurface_DownCast = _StepGeom.Handle_StepGeom_ElementarySurface_DownCast

class StepGeom_Line(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Line

        :rtype: None

        """
        _StepGeom.StepGeom_Line_swiginit(self, _StepGeom.new_StepGeom_Line(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPnt:
        :type aPnt: Handle_StepGeom_CartesianPoint &
        :param aDir:
        :type aDir: Handle_StepGeom_Vector &
        :rtype: void

        """
        return _StepGeom.StepGeom_Line_Init(self, *args)


    def SetPnt(self, *args):
        """
        :param aPnt:
        :type aPnt: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Line_SetPnt(self, *args)


    def Pnt(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Line_Pnt(self, *args)


    def SetDir(self, *args):
        """
        :param aDir:
        :type aDir: Handle_StepGeom_Vector &
        :rtype: None

        """
        return _StepGeom.StepGeom_Line_SetDir(self, *args)


    def Dir(self, *args):
        """
        :rtype: Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_Line_Dir(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Line(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Line
StepGeom_Line.Init = new_instancemethod(_StepGeom.StepGeom_Line_Init, None, StepGeom_Line)
StepGeom_Line.SetPnt = new_instancemethod(_StepGeom.StepGeom_Line_SetPnt, None, StepGeom_Line)
StepGeom_Line.Pnt = new_instancemethod(_StepGeom.StepGeom_Line_Pnt, None, StepGeom_Line)
StepGeom_Line.SetDir = new_instancemethod(_StepGeom.StepGeom_Line_SetDir, None, StepGeom_Line)
StepGeom_Line.Dir = new_instancemethod(_StepGeom.StepGeom_Line_Dir, None, StepGeom_Line)
StepGeom_Line_swigregister = _StepGeom.StepGeom_Line_swigregister
StepGeom_Line_swigregister(StepGeom_Line)

class Handle_StepGeom_Line(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Line_swiginit(self, _StepGeom.new_Handle_StepGeom_Line(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Line_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Line
Handle_StepGeom_Line.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Line_Nullify, None, Handle_StepGeom_Line)
Handle_StepGeom_Line.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Line_IsNull, None, Handle_StepGeom_Line)
Handle_StepGeom_Line.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Line_GetObject, None, Handle_StepGeom_Line)
Handle_StepGeom_Line_swigregister = _StepGeom.Handle_StepGeom_Line_swigregister
Handle_StepGeom_Line_swigregister(Handle_StepGeom_Line)

def Handle_StepGeom_Line_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Line_DownCast(AnObject)
Handle_StepGeom_Line_DownCast = _StepGeom.Handle_StepGeom_Line_DownCast

class StepGeom_OffsetCurve3d(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OffsetCurve3d

        :rtype: None

        """
        _StepGeom.StepGeom_OffsetCurve3d_swiginit(self, _StepGeom.new_StepGeom_OffsetCurve3d(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisCurve:
        :type aBasisCurve: Handle_StepGeom_Curve &
        :param aDistance:
        :type aDistance: float
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aRefDirection:
        :type aRefDirection: Handle_StepGeom_Direction &
        :rtype: void

        """
        return _StepGeom.StepGeom_OffsetCurve3d_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        :param aBasisCurve:
        :type aBasisCurve: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_OffsetCurve3d_BasisCurve(self, *args)


    def SetDistance(self, *args):
        """
        :param aDistance:
        :type aDistance: float
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetDistance(self, *args)


    def Distance(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_OffsetCurve3d_Distance(self, *args)


    def SetSelfIntersect(self, *args):
        """
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SelfIntersect(self, *args)


    def SetRefDirection(self, *args):
        """
        :param aRefDirection:
        :type aRefDirection: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetCurve3d_SetRefDirection(self, *args)


    def RefDirection(self, *args):
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepGeom.StepGeom_OffsetCurve3d_RefDirection(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_OffsetCurve3d(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_OffsetCurve3d
StepGeom_OffsetCurve3d.Init = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_Init, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.SetBasisCurve = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_SetBasisCurve, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.BasisCurve = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_BasisCurve, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.SetDistance = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_SetDistance, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.Distance = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_Distance, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.SetSelfIntersect = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_SetSelfIntersect, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.SelfIntersect = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_SelfIntersect, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.SetRefDirection = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_SetRefDirection, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d.RefDirection = new_instancemethod(_StepGeom.StepGeom_OffsetCurve3d_RefDirection, None, StepGeom_OffsetCurve3d)
StepGeom_OffsetCurve3d_swigregister = _StepGeom.StepGeom_OffsetCurve3d_swigregister
StepGeom_OffsetCurve3d_swigregister(StepGeom_OffsetCurve3d)

class Handle_StepGeom_OffsetCurve3d(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_OffsetCurve3d_swiginit(self, _StepGeom.new_Handle_StepGeom_OffsetCurve3d(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OffsetCurve3d_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OffsetCurve3d
Handle_StepGeom_OffsetCurve3d.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_OffsetCurve3d_Nullify, None, Handle_StepGeom_OffsetCurve3d)
Handle_StepGeom_OffsetCurve3d.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_OffsetCurve3d_IsNull, None, Handle_StepGeom_OffsetCurve3d)
Handle_StepGeom_OffsetCurve3d.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_OffsetCurve3d_GetObject, None, Handle_StepGeom_OffsetCurve3d)
Handle_StepGeom_OffsetCurve3d_swigregister = _StepGeom.Handle_StepGeom_OffsetCurve3d_swigregister
Handle_StepGeom_OffsetCurve3d_swigregister(Handle_StepGeom_OffsetCurve3d)

def Handle_StepGeom_OffsetCurve3d_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_OffsetCurve3d_DownCast(AnObject)
Handle_StepGeom_OffsetCurve3d_DownCast = _StepGeom.Handle_StepGeom_OffsetCurve3d_DownCast

class StepGeom_OffsetSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OffsetSurface

        :rtype: None

        """
        _StepGeom.StepGeom_OffsetSurface_swiginit(self, _StepGeom.new_StepGeom_OffsetSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aDistance:
        :type aDistance: float
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        """
        return _StepGeom.StepGeom_OffsetSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_OffsetSurface_BasisSurface(self, *args)


    def SetDistance(self, *args):
        """
        :param aDistance:
        :type aDistance: float
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetSurface_SetDistance(self, *args)


    def Distance(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_OffsetSurface_Distance(self, *args)


    def SetSelfIntersect(self, *args):
        """
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_OffsetSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_OffsetSurface_SelfIntersect(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_OffsetSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_OffsetSurface
StepGeom_OffsetSurface.Init = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_Init, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface.SetBasisSurface = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_SetBasisSurface, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface.BasisSurface = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_BasisSurface, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface.SetDistance = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_SetDistance, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface.Distance = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_Distance, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface.SetSelfIntersect = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_SetSelfIntersect, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface.SelfIntersect = new_instancemethod(_StepGeom.StepGeom_OffsetSurface_SelfIntersect, None, StepGeom_OffsetSurface)
StepGeom_OffsetSurface_swigregister = _StepGeom.StepGeom_OffsetSurface_swigregister
StepGeom_OffsetSurface_swigregister(StepGeom_OffsetSurface)

class Handle_StepGeom_OffsetSurface(Handle_StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_OffsetSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_OffsetSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OffsetSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OffsetSurface
Handle_StepGeom_OffsetSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_OffsetSurface_Nullify, None, Handle_StepGeom_OffsetSurface)
Handle_StepGeom_OffsetSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_OffsetSurface_IsNull, None, Handle_StepGeom_OffsetSurface)
Handle_StepGeom_OffsetSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_OffsetSurface_GetObject, None, Handle_StepGeom_OffsetSurface)
Handle_StepGeom_OffsetSurface_swigregister = _StepGeom.Handle_StepGeom_OffsetSurface_swigregister
Handle_StepGeom_OffsetSurface_swigregister(Handle_StepGeom_OffsetSurface)

def Handle_StepGeom_OffsetSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_OffsetSurface_DownCast(AnObject)
Handle_StepGeom_OffsetSurface_DownCast = _StepGeom.Handle_StepGeom_OffsetSurface_DownCast

class StepGeom_OrientedSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepGeom.StepGeom_OrientedSurface_swiginit(self, _StepGeom.new_StepGeom_OrientedSurface(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_OrientedSurface_Init(self, *args)


    def Orientation(self, *args):
        """
        * Returns field Orientation

        :rtype: bool

        """
        return _StepGeom.StepGeom_OrientedSurface_Orientation(self, *args)


    def SetOrientation(self, *args):
        """
        * Set field Orientation

        :param Orientation:
        :type Orientation: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_OrientedSurface_SetOrientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_OrientedSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_OrientedSurface
StepGeom_OrientedSurface.Init = new_instancemethod(_StepGeom.StepGeom_OrientedSurface_Init, None, StepGeom_OrientedSurface)
StepGeom_OrientedSurface.Orientation = new_instancemethod(_StepGeom.StepGeom_OrientedSurface_Orientation, None, StepGeom_OrientedSurface)
StepGeom_OrientedSurface.SetOrientation = new_instancemethod(_StepGeom.StepGeom_OrientedSurface_SetOrientation, None, StepGeom_OrientedSurface)
StepGeom_OrientedSurface_swigregister = _StepGeom.StepGeom_OrientedSurface_swigregister
StepGeom_OrientedSurface_swigregister(StepGeom_OrientedSurface)

class Handle_StepGeom_OrientedSurface(Handle_StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_OrientedSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_OrientedSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OrientedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OrientedSurface
Handle_StepGeom_OrientedSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_OrientedSurface_Nullify, None, Handle_StepGeom_OrientedSurface)
Handle_StepGeom_OrientedSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_OrientedSurface_IsNull, None, Handle_StepGeom_OrientedSurface)
Handle_StepGeom_OrientedSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_OrientedSurface_GetObject, None, Handle_StepGeom_OrientedSurface)
Handle_StepGeom_OrientedSurface_swigregister = _StepGeom.Handle_StepGeom_OrientedSurface_swigregister
Handle_StepGeom_OrientedSurface_swigregister(Handle_StepGeom_OrientedSurface)

def Handle_StepGeom_OrientedSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_OrientedSurface_DownCast(AnObject)
Handle_StepGeom_OrientedSurface_DownCast = _StepGeom.Handle_StepGeom_OrientedSurface_DownCast

class StepGeom_Pcurve(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Pcurve

        :rtype: None

        """
        _StepGeom.StepGeom_Pcurve_swiginit(self, _StepGeom.new_StepGeom_Pcurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aReferenceToCurve:
        :type aReferenceToCurve: Handle_StepRepr_DefinitionalRepresentation &
        :rtype: void

        """
        return _StepGeom.StepGeom_Pcurve_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_Pcurve_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_Pcurve_BasisSurface(self, *args)


    def SetReferenceToCurve(self, *args):
        """
        :param aReferenceToCurve:
        :type aReferenceToCurve: Handle_StepRepr_DefinitionalRepresentation &
        :rtype: None

        """
        return _StepGeom.StepGeom_Pcurve_SetReferenceToCurve(self, *args)


    def ReferenceToCurve(self, *args):
        """
        :rtype: Handle_StepRepr_DefinitionalRepresentation

        """
        return _StepGeom.StepGeom_Pcurve_ReferenceToCurve(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Pcurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Pcurve
StepGeom_Pcurve.Init = new_instancemethod(_StepGeom.StepGeom_Pcurve_Init, None, StepGeom_Pcurve)
StepGeom_Pcurve.SetBasisSurface = new_instancemethod(_StepGeom.StepGeom_Pcurve_SetBasisSurface, None, StepGeom_Pcurve)
StepGeom_Pcurve.BasisSurface = new_instancemethod(_StepGeom.StepGeom_Pcurve_BasisSurface, None, StepGeom_Pcurve)
StepGeom_Pcurve.SetReferenceToCurve = new_instancemethod(_StepGeom.StepGeom_Pcurve_SetReferenceToCurve, None, StepGeom_Pcurve)
StepGeom_Pcurve.ReferenceToCurve = new_instancemethod(_StepGeom.StepGeom_Pcurve_ReferenceToCurve, None, StepGeom_Pcurve)
StepGeom_Pcurve_swigregister = _StepGeom.StepGeom_Pcurve_swigregister
StepGeom_Pcurve_swigregister(StepGeom_Pcurve)

class Handle_StepGeom_Pcurve(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Pcurve_swiginit(self, _StepGeom.new_Handle_StepGeom_Pcurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Pcurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Pcurve
Handle_StepGeom_Pcurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Pcurve_Nullify, None, Handle_StepGeom_Pcurve)
Handle_StepGeom_Pcurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Pcurve_IsNull, None, Handle_StepGeom_Pcurve)
Handle_StepGeom_Pcurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Pcurve_GetObject, None, Handle_StepGeom_Pcurve)
Handle_StepGeom_Pcurve_swigregister = _StepGeom.Handle_StepGeom_Pcurve_swigregister
Handle_StepGeom_Pcurve_swigregister(Handle_StepGeom_Pcurve)

def Handle_StepGeom_Pcurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Pcurve_DownCast(AnObject)
Handle_StepGeom_Pcurve_DownCast = _StepGeom.Handle_StepGeom_Pcurve_DownCast

class StepGeom_PointOnCurve(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PointOnCurve

        :rtype: None

        """
        _StepGeom.StepGeom_PointOnCurve_swiginit(self, _StepGeom.new_StepGeom_PointOnCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisCurve:
        :type aBasisCurve: Handle_StepGeom_Curve &
        :param aPointParameter:
        :type aPointParameter: float
        :rtype: void

        """
        return _StepGeom.StepGeom_PointOnCurve_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        :param aBasisCurve:
        :type aBasisCurve: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_PointOnCurve_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_PointOnCurve_BasisCurve(self, *args)


    def SetPointParameter(self, *args):
        """
        :param aPointParameter:
        :type aPointParameter: float
        :rtype: None

        """
        return _StepGeom.StepGeom_PointOnCurve_SetPointParameter(self, *args)


    def PointParameter(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_PointOnCurve_PointParameter(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_PointOnCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_PointOnCurve
StepGeom_PointOnCurve.Init = new_instancemethod(_StepGeom.StepGeom_PointOnCurve_Init, None, StepGeom_PointOnCurve)
StepGeom_PointOnCurve.SetBasisCurve = new_instancemethod(_StepGeom.StepGeom_PointOnCurve_SetBasisCurve, None, StepGeom_PointOnCurve)
StepGeom_PointOnCurve.BasisCurve = new_instancemethod(_StepGeom.StepGeom_PointOnCurve_BasisCurve, None, StepGeom_PointOnCurve)
StepGeom_PointOnCurve.SetPointParameter = new_instancemethod(_StepGeom.StepGeom_PointOnCurve_SetPointParameter, None, StepGeom_PointOnCurve)
StepGeom_PointOnCurve.PointParameter = new_instancemethod(_StepGeom.StepGeom_PointOnCurve_PointParameter, None, StepGeom_PointOnCurve)
StepGeom_PointOnCurve_swigregister = _StepGeom.StepGeom_PointOnCurve_swigregister
StepGeom_PointOnCurve_swigregister(StepGeom_PointOnCurve)

class Handle_StepGeom_PointOnCurve(Handle_StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_PointOnCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_PointOnCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_PointOnCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_PointOnCurve
Handle_StepGeom_PointOnCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_PointOnCurve_Nullify, None, Handle_StepGeom_PointOnCurve)
Handle_StepGeom_PointOnCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_PointOnCurve_IsNull, None, Handle_StepGeom_PointOnCurve)
Handle_StepGeom_PointOnCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_PointOnCurve_GetObject, None, Handle_StepGeom_PointOnCurve)
Handle_StepGeom_PointOnCurve_swigregister = _StepGeom.Handle_StepGeom_PointOnCurve_swigregister
Handle_StepGeom_PointOnCurve_swigregister(Handle_StepGeom_PointOnCurve)

def Handle_StepGeom_PointOnCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_PointOnCurve_DownCast(AnObject)
Handle_StepGeom_PointOnCurve_DownCast = _StepGeom.Handle_StepGeom_PointOnCurve_DownCast

class StepGeom_PointOnSurface(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PointOnSurface

        :rtype: None

        """
        _StepGeom.StepGeom_PointOnSurface_swiginit(self, _StepGeom.new_StepGeom_PointOnSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aPointParameterU:
        :type aPointParameterU: float
        :param aPointParameterV:
        :type aPointParameterV: float
        :rtype: void

        """
        return _StepGeom.StepGeom_PointOnSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_PointOnSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_PointOnSurface_BasisSurface(self, *args)


    def SetPointParameterU(self, *args):
        """
        :param aPointParameterU:
        :type aPointParameterU: float
        :rtype: None

        """
        return _StepGeom.StepGeom_PointOnSurface_SetPointParameterU(self, *args)


    def PointParameterU(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_PointOnSurface_PointParameterU(self, *args)


    def SetPointParameterV(self, *args):
        """
        :param aPointParameterV:
        :type aPointParameterV: float
        :rtype: None

        """
        return _StepGeom.StepGeom_PointOnSurface_SetPointParameterV(self, *args)


    def PointParameterV(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_PointOnSurface_PointParameterV(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_PointOnSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_PointOnSurface
StepGeom_PointOnSurface.Init = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_Init, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface.SetBasisSurface = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_SetBasisSurface, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface.BasisSurface = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_BasisSurface, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface.SetPointParameterU = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_SetPointParameterU, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface.PointParameterU = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_PointParameterU, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface.SetPointParameterV = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_SetPointParameterV, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface.PointParameterV = new_instancemethod(_StepGeom.StepGeom_PointOnSurface_PointParameterV, None, StepGeom_PointOnSurface)
StepGeom_PointOnSurface_swigregister = _StepGeom.StepGeom_PointOnSurface_swigregister
StepGeom_PointOnSurface_swigregister(StepGeom_PointOnSurface)

class Handle_StepGeom_PointOnSurface(Handle_StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_PointOnSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_PointOnSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_PointOnSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_PointOnSurface
Handle_StepGeom_PointOnSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_PointOnSurface_Nullify, None, Handle_StepGeom_PointOnSurface)
Handle_StepGeom_PointOnSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_PointOnSurface_IsNull, None, Handle_StepGeom_PointOnSurface)
Handle_StepGeom_PointOnSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_PointOnSurface_GetObject, None, Handle_StepGeom_PointOnSurface)
Handle_StepGeom_PointOnSurface_swigregister = _StepGeom.Handle_StepGeom_PointOnSurface_swigregister
Handle_StepGeom_PointOnSurface_swigregister(Handle_StepGeom_PointOnSurface)

def Handle_StepGeom_PointOnSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_PointOnSurface_DownCast(AnObject)
Handle_StepGeom_PointOnSurface_DownCast = _StepGeom.Handle_StepGeom_PointOnSurface_DownCast

class StepGeom_PointReplica(StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PointReplica

        :rtype: None

        """
        _StepGeom.StepGeom_PointReplica_swiginit(self, _StepGeom.new_StepGeom_PointReplica(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aParentPt:
        :type aParentPt: Handle_StepGeom_Point &
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator &
        :rtype: void

        """
        return _StepGeom.StepGeom_PointReplica_Init(self, *args)


    def SetParentPt(self, *args):
        """
        :param aParentPt:
        :type aParentPt: Handle_StepGeom_Point &
        :rtype: None

        """
        return _StepGeom.StepGeom_PointReplica_SetParentPt(self, *args)


    def ParentPt(self, *args):
        """
        :rtype: Handle_StepGeom_Point

        """
        return _StepGeom.StepGeom_PointReplica_ParentPt(self, *args)


    def SetTransformation(self, *args):
        """
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator &
        :rtype: None

        """
        return _StepGeom.StepGeom_PointReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianTransformationOperator

        """
        return _StepGeom.StepGeom_PointReplica_Transformation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_PointReplica(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_PointReplica
StepGeom_PointReplica.Init = new_instancemethod(_StepGeom.StepGeom_PointReplica_Init, None, StepGeom_PointReplica)
StepGeom_PointReplica.SetParentPt = new_instancemethod(_StepGeom.StepGeom_PointReplica_SetParentPt, None, StepGeom_PointReplica)
StepGeom_PointReplica.ParentPt = new_instancemethod(_StepGeom.StepGeom_PointReplica_ParentPt, None, StepGeom_PointReplica)
StepGeom_PointReplica.SetTransformation = new_instancemethod(_StepGeom.StepGeom_PointReplica_SetTransformation, None, StepGeom_PointReplica)
StepGeom_PointReplica.Transformation = new_instancemethod(_StepGeom.StepGeom_PointReplica_Transformation, None, StepGeom_PointReplica)
StepGeom_PointReplica_swigregister = _StepGeom.StepGeom_PointReplica_swigregister
StepGeom_PointReplica_swigregister(StepGeom_PointReplica)

class Handle_StepGeom_PointReplica(Handle_StepGeom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_PointReplica_swiginit(self, _StepGeom.new_Handle_StepGeom_PointReplica(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_PointReplica_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_PointReplica
Handle_StepGeom_PointReplica.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_PointReplica_Nullify, None, Handle_StepGeom_PointReplica)
Handle_StepGeom_PointReplica.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_PointReplica_IsNull, None, Handle_StepGeom_PointReplica)
Handle_StepGeom_PointReplica.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_PointReplica_GetObject, None, Handle_StepGeom_PointReplica)
Handle_StepGeom_PointReplica_swigregister = _StepGeom.Handle_StepGeom_PointReplica_swigregister
Handle_StepGeom_PointReplica_swigregister(Handle_StepGeom_PointReplica)

def Handle_StepGeom_PointReplica_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_PointReplica_DownCast(AnObject)
Handle_StepGeom_PointReplica_DownCast = _StepGeom.Handle_StepGeom_PointReplica_DownCast

class StepGeom_SurfaceCurve(StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SurfaceCurve

        :rtype: None

        """
        _StepGeom.StepGeom_SurfaceCurve_swiginit(self, _StepGeom.new_StepGeom_SurfaceCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aCurve3d:
        :type aCurve3d: Handle_StepGeom_Curve &
        :param aAssociatedGeometry:
        :type aAssociatedGeometry: Handle_StepGeom_HArray1OfPcurveOrSurface &
        :param aMasterRepresentation:
        :type aMasterRepresentation: StepGeom_PreferredSurfaceCurveRepresentation
        :rtype: void

        """
        return _StepGeom.StepGeom_SurfaceCurve_Init(self, *args)


    def SetCurve3d(self, *args):
        """
        :param aCurve3d:
        :type aCurve3d: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceCurve_SetCurve3d(self, *args)


    def Curve3d(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SurfaceCurve_Curve3d(self, *args)


    def SetAssociatedGeometry(self, *args):
        """
        :param aAssociatedGeometry:
        :type aAssociatedGeometry: Handle_StepGeom_HArray1OfPcurveOrSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceCurve_SetAssociatedGeometry(self, *args)


    def AssociatedGeometry(self, *args):
        """
        :rtype: Handle_StepGeom_HArray1OfPcurveOrSurface

        """
        return _StepGeom.StepGeom_SurfaceCurve_AssociatedGeometry(self, *args)


    def AssociatedGeometryValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: StepGeom_PcurveOrSurface

        """
        return _StepGeom.StepGeom_SurfaceCurve_AssociatedGeometryValue(self, *args)


    def NbAssociatedGeometry(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_SurfaceCurve_NbAssociatedGeometry(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        :param aMasterRepresentation:
        :type aMasterRepresentation: StepGeom_PreferredSurfaceCurveRepresentation
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        :rtype: StepGeom_PreferredSurfaceCurveRepresentation

        """
        return _StepGeom.StepGeom_SurfaceCurve_MasterRepresentation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SurfaceCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceCurve
StepGeom_SurfaceCurve.Init = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_Init, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.SetCurve3d = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_SetCurve3d, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.Curve3d = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_Curve3d, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.SetAssociatedGeometry = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_SetAssociatedGeometry, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.AssociatedGeometry = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_AssociatedGeometry, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.AssociatedGeometryValue = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_AssociatedGeometryValue, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.NbAssociatedGeometry = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_NbAssociatedGeometry, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.SetMasterRepresentation = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_SetMasterRepresentation, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve.MasterRepresentation = new_instancemethod(_StepGeom.StepGeom_SurfaceCurve_MasterRepresentation, None, StepGeom_SurfaceCurve)
StepGeom_SurfaceCurve_swigregister = _StepGeom.StepGeom_SurfaceCurve_swigregister
StepGeom_SurfaceCurve_swigregister(StepGeom_SurfaceCurve)

class Handle_StepGeom_SurfaceCurve(Handle_StepGeom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SurfaceCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_SurfaceCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceCurve
Handle_StepGeom_SurfaceCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceCurve_Nullify, None, Handle_StepGeom_SurfaceCurve)
Handle_StepGeom_SurfaceCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceCurve_IsNull, None, Handle_StepGeom_SurfaceCurve)
Handle_StepGeom_SurfaceCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceCurve_GetObject, None, Handle_StepGeom_SurfaceCurve)
Handle_StepGeom_SurfaceCurve_swigregister = _StepGeom.Handle_StepGeom_SurfaceCurve_swigregister
Handle_StepGeom_SurfaceCurve_swigregister(Handle_StepGeom_SurfaceCurve)

def Handle_StepGeom_SurfaceCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SurfaceCurve_DownCast(AnObject)
Handle_StepGeom_SurfaceCurve_DownCast = _StepGeom.Handle_StepGeom_SurfaceCurve_DownCast

class StepGeom_SurfaceReplica(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SurfaceReplica

        :rtype: None

        """
        _StepGeom.StepGeom_SurfaceReplica_swiginit(self, _StepGeom.new_StepGeom_SurfaceReplica(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aParentSurface:
        :type aParentSurface: Handle_StepGeom_Surface &
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator3d &
        :rtype: void

        """
        return _StepGeom.StepGeom_SurfaceReplica_Init(self, *args)


    def SetParentSurface(self, *args):
        """
        :param aParentSurface:
        :type aParentSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceReplica_SetParentSurface(self, *args)


    def ParentSurface(self, *args):
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_SurfaceReplica_ParentSurface(self, *args)


    def SetTransformation(self, *args):
        """
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator3d &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceReplica_SetTransformation(self, *args)


    def Transformation(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepGeom.StepGeom_SurfaceReplica_Transformation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SurfaceReplica(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceReplica
StepGeom_SurfaceReplica.Init = new_instancemethod(_StepGeom.StepGeom_SurfaceReplica_Init, None, StepGeom_SurfaceReplica)
StepGeom_SurfaceReplica.SetParentSurface = new_instancemethod(_StepGeom.StepGeom_SurfaceReplica_SetParentSurface, None, StepGeom_SurfaceReplica)
StepGeom_SurfaceReplica.ParentSurface = new_instancemethod(_StepGeom.StepGeom_SurfaceReplica_ParentSurface, None, StepGeom_SurfaceReplica)
StepGeom_SurfaceReplica.SetTransformation = new_instancemethod(_StepGeom.StepGeom_SurfaceReplica_SetTransformation, None, StepGeom_SurfaceReplica)
StepGeom_SurfaceReplica.Transformation = new_instancemethod(_StepGeom.StepGeom_SurfaceReplica_Transformation, None, StepGeom_SurfaceReplica)
StepGeom_SurfaceReplica_swigregister = _StepGeom.StepGeom_SurfaceReplica_swigregister
StepGeom_SurfaceReplica_swigregister(StepGeom_SurfaceReplica)

class Handle_StepGeom_SurfaceReplica(Handle_StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SurfaceReplica_swiginit(self, _StepGeom.new_Handle_StepGeom_SurfaceReplica(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceReplica_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceReplica
Handle_StepGeom_SurfaceReplica.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceReplica_Nullify, None, Handle_StepGeom_SurfaceReplica)
Handle_StepGeom_SurfaceReplica.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceReplica_IsNull, None, Handle_StepGeom_SurfaceReplica)
Handle_StepGeom_SurfaceReplica.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceReplica_GetObject, None, Handle_StepGeom_SurfaceReplica)
Handle_StepGeom_SurfaceReplica_swigregister = _StepGeom.Handle_StepGeom_SurfaceReplica_swigregister
Handle_StepGeom_SurfaceReplica_swigregister(Handle_StepGeom_SurfaceReplica)

def Handle_StepGeom_SurfaceReplica_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SurfaceReplica_DownCast(AnObject)
Handle_StepGeom_SurfaceReplica_DownCast = _StepGeom.Handle_StepGeom_SurfaceReplica_DownCast

class StepGeom_SweptSurface(StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SweptSurface

        :rtype: None

        """
        _StepGeom.StepGeom_SweptSurface_swiginit(self, _StepGeom.new_StepGeom_SweptSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptCurve:
        :type aSweptCurve: Handle_StepGeom_Curve &
        :rtype: void

        """
        return _StepGeom.StepGeom_SweptSurface_Init(self, *args)


    def SetSweptCurve(self, *args):
        """
        :param aSweptCurve:
        :type aSweptCurve: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_SweptSurface_SetSweptCurve(self, *args)


    def SweptCurve(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_SweptSurface_SweptCurve(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SweptSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SweptSurface
StepGeom_SweptSurface.Init = new_instancemethod(_StepGeom.StepGeom_SweptSurface_Init, None, StepGeom_SweptSurface)
StepGeom_SweptSurface.SetSweptCurve = new_instancemethod(_StepGeom.StepGeom_SweptSurface_SetSweptCurve, None, StepGeom_SweptSurface)
StepGeom_SweptSurface.SweptCurve = new_instancemethod(_StepGeom.StepGeom_SweptSurface_SweptCurve, None, StepGeom_SweptSurface)
StepGeom_SweptSurface_swigregister = _StepGeom.StepGeom_SweptSurface_swigregister
StepGeom_SweptSurface_swigregister(StepGeom_SweptSurface)

class Handle_StepGeom_SweptSurface(Handle_StepGeom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SweptSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_SweptSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SweptSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SweptSurface
Handle_StepGeom_SweptSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SweptSurface_Nullify, None, Handle_StepGeom_SweptSurface)
Handle_StepGeom_SweptSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SweptSurface_IsNull, None, Handle_StepGeom_SweptSurface)
Handle_StepGeom_SweptSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SweptSurface_GetObject, None, Handle_StepGeom_SweptSurface)
Handle_StepGeom_SweptSurface_swigregister = _StepGeom.Handle_StepGeom_SweptSurface_swigregister
Handle_StepGeom_SweptSurface_swigregister(Handle_StepGeom_SweptSurface)

def Handle_StepGeom_SweptSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SweptSurface_DownCast(AnObject)
Handle_StepGeom_SweptSurface_DownCast = _StepGeom.Handle_StepGeom_SweptSurface_DownCast

class StepGeom_BSplineCurve(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BSplineCurve

        :rtype: None

        """
        _StepGeom.StepGeom_BSplineCurve_swiginit(self, _StepGeom.new_StepGeom_BSplineCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        """
        return _StepGeom.StepGeom_BSplineCurve_Init(self, *args)


    def SetDegree(self, *args):
        """
        :param aDegree:
        :type aDegree: int
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurve_SetDegree(self, *args)


    def Degree(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurve_Degree(self, *args)


    def SetControlPointsList(self, *args):
        """
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurve_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        :rtype: Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_BSplineCurve_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_BSplineCurve_ControlPointsListValue(self, *args)


    def NbControlPointsList(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurve_NbControlPointsList(self, *args)


    def SetCurveForm(self, *args):
        """
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurve_SetCurveForm(self, *args)


    def CurveForm(self, *args):
        """
        :rtype: StepGeom_BSplineCurveForm

        """
        return _StepGeom.StepGeom_BSplineCurve_CurveForm(self, *args)


    def SetClosedCurve(self, *args):
        """
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurve_SetClosedCurve(self, *args)


    def ClosedCurve(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_ClosedCurve(self, *args)


    def SetSelfIntersect(self, *args):
        """
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineCurve_SelfIntersect(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BSplineCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineCurve
StepGeom_BSplineCurve.Init = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_Init, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.SetDegree = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_SetDegree, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.Degree = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_Degree, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.SetControlPointsList = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_SetControlPointsList, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.ControlPointsList = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_ControlPointsList, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.ControlPointsListValue = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_ControlPointsListValue, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.NbControlPointsList = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_NbControlPointsList, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.SetCurveForm = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_SetCurveForm, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.CurveForm = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_CurveForm, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.SetClosedCurve = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_SetClosedCurve, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.ClosedCurve = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_ClosedCurve, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.SetSelfIntersect = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_SetSelfIntersect, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve.SelfIntersect = new_instancemethod(_StepGeom.StepGeom_BSplineCurve_SelfIntersect, None, StepGeom_BSplineCurve)
StepGeom_BSplineCurve_swigregister = _StepGeom.StepGeom_BSplineCurve_swigregister
StepGeom_BSplineCurve_swigregister(StepGeom_BSplineCurve)

class Handle_StepGeom_BSplineCurve(Handle_StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BSplineCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_BSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineCurve
Handle_StepGeom_BSplineCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurve_Nullify, None, Handle_StepGeom_BSplineCurve)
Handle_StepGeom_BSplineCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurve_IsNull, None, Handle_StepGeom_BSplineCurve)
Handle_StepGeom_BSplineCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurve_GetObject, None, Handle_StepGeom_BSplineCurve)
Handle_StepGeom_BSplineCurve_swigregister = _StepGeom.Handle_StepGeom_BSplineCurve_swigregister
Handle_StepGeom_BSplineCurve_swigregister(Handle_StepGeom_BSplineCurve)

def Handle_StepGeom_BSplineCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BSplineCurve_DownCast(AnObject)
Handle_StepGeom_BSplineCurve_DownCast = _StepGeom.Handle_StepGeom_BSplineCurve_DownCast

class StepGeom_BSplineSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BSplineSurface

        :rtype: None

        """
        _StepGeom.StepGeom_BSplineSurface_swiginit(self, _StepGeom.new_StepGeom_BSplineSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        """
        return _StepGeom.StepGeom_BSplineSurface_Init(self, *args)


    def SetUDegree(self, *args):
        """
        :param aUDegree:
        :type aUDegree: int
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetUDegree(self, *args)


    def UDegree(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurface_UDegree(self, *args)


    def SetVDegree(self, *args):
        """
        :param aVDegree:
        :type aVDegree: int
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetVDegree(self, *args)


    def VDegree(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurface_VDegree(self, *args)


    def SetControlPointsList(self, *args):
        """
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetControlPointsList(self, *args)


    def ControlPointsList(self, *args):
        """
        :rtype: Handle_StepGeom_HArray2OfCartesianPoint

        """
        return _StepGeom.StepGeom_BSplineSurface_ControlPointsList(self, *args)


    def ControlPointsListValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_BSplineSurface_ControlPointsListValue(self, *args)


    def NbControlPointsListI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurface_NbControlPointsListI(self, *args)


    def NbControlPointsListJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurface_NbControlPointsListJ(self, *args)


    def SetSurfaceForm(self, *args):
        """
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetSurfaceForm(self, *args)


    def SurfaceForm(self, *args):
        """
        :rtype: StepGeom_BSplineSurfaceForm

        """
        return _StepGeom.StepGeom_BSplineSurface_SurfaceForm(self, *args)


    def SetUClosed(self, *args):
        """
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetUClosed(self, *args)


    def UClosed(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_UClosed(self, *args)


    def SetVClosed(self, *args):
        """
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetVClosed(self, *args)


    def VClosed(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_VClosed(self, *args)


    def SetSelfIntersect(self, *args):
        """
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurface_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_BSplineSurface_SelfIntersect(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BSplineSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineSurface
StepGeom_BSplineSurface.Init = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_Init, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetUDegree = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetUDegree, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.UDegree = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_UDegree, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetVDegree = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetVDegree, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.VDegree = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_VDegree, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetControlPointsList = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetControlPointsList, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.ControlPointsList = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_ControlPointsList, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.ControlPointsListValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_ControlPointsListValue, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.NbControlPointsListI = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_NbControlPointsListI, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.NbControlPointsListJ = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_NbControlPointsListJ, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetSurfaceForm = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetSurfaceForm, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SurfaceForm = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SurfaceForm, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetUClosed = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetUClosed, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.UClosed = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_UClosed, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetVClosed = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetVClosed, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.VClosed = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_VClosed, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SetSelfIntersect = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SetSelfIntersect, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface.SelfIntersect = new_instancemethod(_StepGeom.StepGeom_BSplineSurface_SelfIntersect, None, StepGeom_BSplineSurface)
StepGeom_BSplineSurface_swigregister = _StepGeom.StepGeom_BSplineSurface_swigregister
StepGeom_BSplineSurface_swigregister(StepGeom_BSplineSurface)

class Handle_StepGeom_BSplineSurface(Handle_StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BSplineSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_BSplineSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineSurface
Handle_StepGeom_BSplineSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurface_Nullify, None, Handle_StepGeom_BSplineSurface)
Handle_StepGeom_BSplineSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurface_IsNull, None, Handle_StepGeom_BSplineSurface)
Handle_StepGeom_BSplineSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurface_GetObject, None, Handle_StepGeom_BSplineSurface)
Handle_StepGeom_BSplineSurface_swigregister = _StepGeom.Handle_StepGeom_BSplineSurface_swigregister
Handle_StepGeom_BSplineSurface_swigregister(Handle_StepGeom_BSplineSurface)

def Handle_StepGeom_BSplineSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BSplineSurface_DownCast(AnObject)
Handle_StepGeom_BSplineSurface_DownCast = _StepGeom.Handle_StepGeom_BSplineSurface_DownCast

class StepGeom_Circle(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Circle

        :rtype: None

        """
        _StepGeom.StepGeom_Circle_swiginit(self, _StepGeom.new_StepGeom_Circle(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :param aRadius:
        :type aRadius: float
        :rtype: void

        """
        return _StepGeom.StepGeom_Circle_Init(self, *args)


    def SetRadius(self, *args):
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Circle_SetRadius(self, *args)


    def Radius(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Circle_Radius(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Circle(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Circle
StepGeom_Circle.Init = new_instancemethod(_StepGeom.StepGeom_Circle_Init, None, StepGeom_Circle)
StepGeom_Circle.SetRadius = new_instancemethod(_StepGeom.StepGeom_Circle_SetRadius, None, StepGeom_Circle)
StepGeom_Circle.Radius = new_instancemethod(_StepGeom.StepGeom_Circle_Radius, None, StepGeom_Circle)
StepGeom_Circle_swigregister = _StepGeom.StepGeom_Circle_swigregister
StepGeom_Circle_swigregister(StepGeom_Circle)

class Handle_StepGeom_Circle(Handle_StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Circle_swiginit(self, _StepGeom.new_Handle_StepGeom_Circle(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Circle_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Circle
Handle_StepGeom_Circle.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Circle_Nullify, None, Handle_StepGeom_Circle)
Handle_StepGeom_Circle.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Circle_IsNull, None, Handle_StepGeom_Circle)
Handle_StepGeom_Circle.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Circle_GetObject, None, Handle_StepGeom_Circle)
Handle_StepGeom_Circle_swigregister = _StepGeom.Handle_StepGeom_Circle_swigregister
Handle_StepGeom_Circle_swigregister(Handle_StepGeom_Circle)

def Handle_StepGeom_Circle_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Circle_DownCast(AnObject)
Handle_StepGeom_Circle_DownCast = _StepGeom.Handle_StepGeom_Circle_DownCast

class StepGeom_CompositeCurve(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CompositeCurve

        :rtype: None

        """
        _StepGeom.StepGeom_CompositeCurve_swiginit(self, _StepGeom.new_StepGeom_CompositeCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSegments:
        :type aSegments: Handle_StepGeom_HArray1OfCompositeCurveSegment &
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        """
        return _StepGeom.StepGeom_CompositeCurve_Init(self, *args)


    def SetSegments(self, *args):
        """
        :param aSegments:
        :type aSegments: Handle_StepGeom_HArray1OfCompositeCurveSegment &
        :rtype: None

        """
        return _StepGeom.StepGeom_CompositeCurve_SetSegments(self, *args)


    def Segments(self, *args):
        """
        :rtype: Handle_StepGeom_HArray1OfCompositeCurveSegment

        """
        return _StepGeom.StepGeom_CompositeCurve_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepGeom_CompositeCurveSegment

        """
        return _StepGeom.StepGeom_CompositeCurve_SegmentsValue(self, *args)


    def NbSegments(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_CompositeCurve_NbSegments(self, *args)


    def SetSelfIntersect(self, *args):
        """
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: None

        """
        return _StepGeom.StepGeom_CompositeCurve_SetSelfIntersect(self, *args)


    def SelfIntersect(self, *args):
        """
        :rtype: StepData_Logical

        """
        return _StepGeom.StepGeom_CompositeCurve_SelfIntersect(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CompositeCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CompositeCurve
StepGeom_CompositeCurve.Init = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_Init, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve.SetSegments = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_SetSegments, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve.Segments = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_Segments, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve.SegmentsValue = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_SegmentsValue, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve.NbSegments = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_NbSegments, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve.SetSelfIntersect = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_SetSelfIntersect, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve.SelfIntersect = new_instancemethod(_StepGeom.StepGeom_CompositeCurve_SelfIntersect, None, StepGeom_CompositeCurve)
StepGeom_CompositeCurve_swigregister = _StepGeom.StepGeom_CompositeCurve_swigregister
StepGeom_CompositeCurve_swigregister(StepGeom_CompositeCurve)

class Handle_StepGeom_CompositeCurve(Handle_StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CompositeCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_CompositeCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CompositeCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CompositeCurve
Handle_StepGeom_CompositeCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurve_Nullify, None, Handle_StepGeom_CompositeCurve)
Handle_StepGeom_CompositeCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurve_IsNull, None, Handle_StepGeom_CompositeCurve)
Handle_StepGeom_CompositeCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurve_GetObject, None, Handle_StepGeom_CompositeCurve)
Handle_StepGeom_CompositeCurve_swigregister = _StepGeom.Handle_StepGeom_CompositeCurve_swigregister
Handle_StepGeom_CompositeCurve_swigregister(Handle_StepGeom_CompositeCurve)

def Handle_StepGeom_CompositeCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CompositeCurve_DownCast(AnObject)
Handle_StepGeom_CompositeCurve_DownCast = _StepGeom.Handle_StepGeom_CompositeCurve_DownCast

class StepGeom_ConicalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConicalSurface

        :rtype: None

        """
        _StepGeom.StepGeom_ConicalSurface_swiginit(self, _StepGeom.new_StepGeom_ConicalSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aRadius:
        :type aRadius: float
        :param aSemiAngle:
        :type aSemiAngle: float
        :rtype: void

        """
        return _StepGeom.StepGeom_ConicalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepGeom.StepGeom_ConicalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_ConicalSurface_Radius(self, *args)


    def SetSemiAngle(self, *args):
        """
        :param aSemiAngle:
        :type aSemiAngle: float
        :rtype: None

        """
        return _StepGeom.StepGeom_ConicalSurface_SetSemiAngle(self, *args)


    def SemiAngle(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_ConicalSurface_SemiAngle(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_ConicalSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_ConicalSurface
StepGeom_ConicalSurface.Init = new_instancemethod(_StepGeom.StepGeom_ConicalSurface_Init, None, StepGeom_ConicalSurface)
StepGeom_ConicalSurface.SetRadius = new_instancemethod(_StepGeom.StepGeom_ConicalSurface_SetRadius, None, StepGeom_ConicalSurface)
StepGeom_ConicalSurface.Radius = new_instancemethod(_StepGeom.StepGeom_ConicalSurface_Radius, None, StepGeom_ConicalSurface)
StepGeom_ConicalSurface.SetSemiAngle = new_instancemethod(_StepGeom.StepGeom_ConicalSurface_SetSemiAngle, None, StepGeom_ConicalSurface)
StepGeom_ConicalSurface.SemiAngle = new_instancemethod(_StepGeom.StepGeom_ConicalSurface_SemiAngle, None, StepGeom_ConicalSurface)
StepGeom_ConicalSurface_swigregister = _StepGeom.StepGeom_ConicalSurface_swigregister
StepGeom_ConicalSurface_swigregister(StepGeom_ConicalSurface)

class Handle_StepGeom_ConicalSurface(Handle_StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_ConicalSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_ConicalSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ConicalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ConicalSurface
Handle_StepGeom_ConicalSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_ConicalSurface_Nullify, None, Handle_StepGeom_ConicalSurface)
Handle_StepGeom_ConicalSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_ConicalSurface_IsNull, None, Handle_StepGeom_ConicalSurface)
Handle_StepGeom_ConicalSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_ConicalSurface_GetObject, None, Handle_StepGeom_ConicalSurface)
Handle_StepGeom_ConicalSurface_swigregister = _StepGeom.Handle_StepGeom_ConicalSurface_swigregister
Handle_StepGeom_ConicalSurface_swigregister(Handle_StepGeom_ConicalSurface)

def Handle_StepGeom_ConicalSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_ConicalSurface_DownCast(AnObject)
Handle_StepGeom_ConicalSurface_DownCast = _StepGeom.Handle_StepGeom_ConicalSurface_DownCast

class StepGeom_CurveBoundedSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepGeom.StepGeom_CurveBoundedSurface_swiginit(self, _StepGeom.new_StepGeom_CurveBoundedSurface(*args))

    def Init(self, *args):
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aBoundaries:
        :type aBoundaries: Handle_StepGeom_HArray1OfSurfaceBoundary &
        :param aImplicitOuter:
        :type aImplicitOuter: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_Init(self, *args)


    def BasisSurface(self, *args):
        """
        * Returns field BasisSurface

        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_BasisSurface(self, *args)


    def SetBasisSurface(self, *args):
        """
        * Set field BasisSurface

        :param BasisSurface:
        :type BasisSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_SetBasisSurface(self, *args)


    def Boundaries(self, *args):
        """
        * Returns field Boundaries

        :rtype: Handle_StepGeom_HArray1OfSurfaceBoundary

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        * Set field Boundaries

        :param Boundaries:
        :type Boundaries: Handle_StepGeom_HArray1OfSurfaceBoundary &
        :rtype: None

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_SetBoundaries(self, *args)


    def ImplicitOuter(self, *args):
        """
        * Returns field ImplicitOuter

        :rtype: bool

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_ImplicitOuter(self, *args)


    def SetImplicitOuter(self, *args):
        """
        * Set field ImplicitOuter

        :param ImplicitOuter:
        :type ImplicitOuter: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_CurveBoundedSurface_SetImplicitOuter(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CurveBoundedSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CurveBoundedSurface
StepGeom_CurveBoundedSurface.Init = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_Init, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface.BasisSurface = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_BasisSurface, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface.SetBasisSurface = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_SetBasisSurface, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface.Boundaries = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_Boundaries, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface.SetBoundaries = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_SetBoundaries, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface.ImplicitOuter = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_ImplicitOuter, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface.SetImplicitOuter = new_instancemethod(_StepGeom.StepGeom_CurveBoundedSurface_SetImplicitOuter, None, StepGeom_CurveBoundedSurface)
StepGeom_CurveBoundedSurface_swigregister = _StepGeom.StepGeom_CurveBoundedSurface_swigregister
StepGeom_CurveBoundedSurface_swigregister(StepGeom_CurveBoundedSurface)

class Handle_StepGeom_CurveBoundedSurface(Handle_StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CurveBoundedSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_CurveBoundedSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CurveBoundedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CurveBoundedSurface
Handle_StepGeom_CurveBoundedSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CurveBoundedSurface_Nullify, None, Handle_StepGeom_CurveBoundedSurface)
Handle_StepGeom_CurveBoundedSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CurveBoundedSurface_IsNull, None, Handle_StepGeom_CurveBoundedSurface)
Handle_StepGeom_CurveBoundedSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CurveBoundedSurface_GetObject, None, Handle_StepGeom_CurveBoundedSurface)
Handle_StepGeom_CurveBoundedSurface_swigregister = _StepGeom.Handle_StepGeom_CurveBoundedSurface_swigregister
Handle_StepGeom_CurveBoundedSurface_swigregister(Handle_StepGeom_CurveBoundedSurface)

def Handle_StepGeom_CurveBoundedSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CurveBoundedSurface_DownCast(AnObject)
Handle_StepGeom_CurveBoundedSurface_DownCast = _StepGeom.Handle_StepGeom_CurveBoundedSurface_DownCast

class StepGeom_CylindricalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CylindricalSurface

        :rtype: None

        """
        _StepGeom.StepGeom_CylindricalSurface_swiginit(self, _StepGeom.new_StepGeom_CylindricalSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aRadius:
        :type aRadius: float
        :rtype: void

        """
        return _StepGeom.StepGeom_CylindricalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepGeom.StepGeom_CylindricalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_CylindricalSurface_Radius(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CylindricalSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CylindricalSurface
StepGeom_CylindricalSurface.Init = new_instancemethod(_StepGeom.StepGeom_CylindricalSurface_Init, None, StepGeom_CylindricalSurface)
StepGeom_CylindricalSurface.SetRadius = new_instancemethod(_StepGeom.StepGeom_CylindricalSurface_SetRadius, None, StepGeom_CylindricalSurface)
StepGeom_CylindricalSurface.Radius = new_instancemethod(_StepGeom.StepGeom_CylindricalSurface_Radius, None, StepGeom_CylindricalSurface)
StepGeom_CylindricalSurface_swigregister = _StepGeom.StepGeom_CylindricalSurface_swigregister
StepGeom_CylindricalSurface_swigregister(StepGeom_CylindricalSurface)

class Handle_StepGeom_CylindricalSurface(Handle_StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CylindricalSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_CylindricalSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CylindricalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CylindricalSurface
Handle_StepGeom_CylindricalSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CylindricalSurface_Nullify, None, Handle_StepGeom_CylindricalSurface)
Handle_StepGeom_CylindricalSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CylindricalSurface_IsNull, None, Handle_StepGeom_CylindricalSurface)
Handle_StepGeom_CylindricalSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CylindricalSurface_GetObject, None, Handle_StepGeom_CylindricalSurface)
Handle_StepGeom_CylindricalSurface_swigregister = _StepGeom.Handle_StepGeom_CylindricalSurface_swigregister
Handle_StepGeom_CylindricalSurface_swigregister(Handle_StepGeom_CylindricalSurface)

def Handle_StepGeom_CylindricalSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CylindricalSurface_DownCast(AnObject)
Handle_StepGeom_CylindricalSurface_DownCast = _StepGeom.Handle_StepGeom_CylindricalSurface_DownCast

class StepGeom_Ellipse(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Ellipse

        :rtype: None

        """
        _StepGeom.StepGeom_Ellipse_swiginit(self, _StepGeom.new_StepGeom_Ellipse(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :param aSemiAxis1:
        :type aSemiAxis1: float
        :param aSemiAxis2:
        :type aSemiAxis2: float
        :rtype: void

        """
        return _StepGeom.StepGeom_Ellipse_Init(self, *args)


    def SetSemiAxis1(self, *args):
        """
        :param aSemiAxis1:
        :type aSemiAxis1: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Ellipse_SetSemiAxis1(self, *args)


    def SemiAxis1(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Ellipse_SemiAxis1(self, *args)


    def SetSemiAxis2(self, *args):
        """
        :param aSemiAxis2:
        :type aSemiAxis2: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Ellipse_SetSemiAxis2(self, *args)


    def SemiAxis2(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Ellipse_SemiAxis2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Ellipse(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Ellipse
StepGeom_Ellipse.Init = new_instancemethod(_StepGeom.StepGeom_Ellipse_Init, None, StepGeom_Ellipse)
StepGeom_Ellipse.SetSemiAxis1 = new_instancemethod(_StepGeom.StepGeom_Ellipse_SetSemiAxis1, None, StepGeom_Ellipse)
StepGeom_Ellipse.SemiAxis1 = new_instancemethod(_StepGeom.StepGeom_Ellipse_SemiAxis1, None, StepGeom_Ellipse)
StepGeom_Ellipse.SetSemiAxis2 = new_instancemethod(_StepGeom.StepGeom_Ellipse_SetSemiAxis2, None, StepGeom_Ellipse)
StepGeom_Ellipse.SemiAxis2 = new_instancemethod(_StepGeom.StepGeom_Ellipse_SemiAxis2, None, StepGeom_Ellipse)
StepGeom_Ellipse_swigregister = _StepGeom.StepGeom_Ellipse_swigregister
StepGeom_Ellipse_swigregister(StepGeom_Ellipse)

class Handle_StepGeom_Ellipse(Handle_StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Ellipse_swiginit(self, _StepGeom.new_Handle_StepGeom_Ellipse(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Ellipse_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Ellipse
Handle_StepGeom_Ellipse.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Ellipse_Nullify, None, Handle_StepGeom_Ellipse)
Handle_StepGeom_Ellipse.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Ellipse_IsNull, None, Handle_StepGeom_Ellipse)
Handle_StepGeom_Ellipse.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Ellipse_GetObject, None, Handle_StepGeom_Ellipse)
Handle_StepGeom_Ellipse_swigregister = _StepGeom.Handle_StepGeom_Ellipse_swigregister
Handle_StepGeom_Ellipse_swigregister(Handle_StepGeom_Ellipse)

def Handle_StepGeom_Ellipse_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Ellipse_DownCast(AnObject)
Handle_StepGeom_Ellipse_DownCast = _StepGeom.Handle_StepGeom_Ellipse_DownCast

class StepGeom_EvaluatedDegeneratePcurve(StepGeom_DegeneratePcurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a EvaluatedDegeneratePcurve

        :rtype: None

        """
        _StepGeom.StepGeom_EvaluatedDegeneratePcurve_swiginit(self, _StepGeom.new_StepGeom_EvaluatedDegeneratePcurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aReferenceToCurve:
        :type aReferenceToCurve: Handle_StepRepr_DefinitionalRepresentation &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aReferenceToCurve:
        :type aReferenceToCurve: Handle_StepRepr_DefinitionalRepresentation &
        :param aEquivalentPoint:
        :type aEquivalentPoint: Handle_StepGeom_CartesianPoint &
        :rtype: void

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_Init(self, *args)


    def SetEquivalentPoint(self, *args):
        """
        :param aEquivalentPoint:
        :type aEquivalentPoint: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_SetEquivalentPoint(self, *args)


    def EquivalentPoint(self, *args):
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_EvaluatedDegeneratePcurve_EquivalentPoint(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_EvaluatedDegeneratePcurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_EvaluatedDegeneratePcurve
StepGeom_EvaluatedDegeneratePcurve.Init = new_instancemethod(_StepGeom.StepGeom_EvaluatedDegeneratePcurve_Init, None, StepGeom_EvaluatedDegeneratePcurve)
StepGeom_EvaluatedDegeneratePcurve.SetEquivalentPoint = new_instancemethod(_StepGeom.StepGeom_EvaluatedDegeneratePcurve_SetEquivalentPoint, None, StepGeom_EvaluatedDegeneratePcurve)
StepGeom_EvaluatedDegeneratePcurve.EquivalentPoint = new_instancemethod(_StepGeom.StepGeom_EvaluatedDegeneratePcurve_EquivalentPoint, None, StepGeom_EvaluatedDegeneratePcurve)
StepGeom_EvaluatedDegeneratePcurve_swigregister = _StepGeom.StepGeom_EvaluatedDegeneratePcurve_swigregister
StepGeom_EvaluatedDegeneratePcurve_swigregister(StepGeom_EvaluatedDegeneratePcurve)

class Handle_StepGeom_EvaluatedDegeneratePcurve(Handle_StepGeom_DegeneratePcurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_swiginit(self, _StepGeom.new_Handle_StepGeom_EvaluatedDegeneratePcurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_EvaluatedDegeneratePcurve
Handle_StepGeom_EvaluatedDegeneratePcurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_Nullify, None, Handle_StepGeom_EvaluatedDegeneratePcurve)
Handle_StepGeom_EvaluatedDegeneratePcurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_IsNull, None, Handle_StepGeom_EvaluatedDegeneratePcurve)
Handle_StepGeom_EvaluatedDegeneratePcurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_GetObject, None, Handle_StepGeom_EvaluatedDegeneratePcurve)
Handle_StepGeom_EvaluatedDegeneratePcurve_swigregister = _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_swigregister
Handle_StepGeom_EvaluatedDegeneratePcurve_swigregister(Handle_StepGeom_EvaluatedDegeneratePcurve)

def Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast(AnObject)
Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast = _StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve_DownCast

class StepGeom_Hyperbola(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Hyperbola

        :rtype: None

        """
        _StepGeom.StepGeom_Hyperbola_swiginit(self, _StepGeom.new_StepGeom_Hyperbola(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :param aSemiAxis:
        :type aSemiAxis: float
        :param aSemiImagAxis:
        :type aSemiImagAxis: float
        :rtype: void

        """
        return _StepGeom.StepGeom_Hyperbola_Init(self, *args)


    def SetSemiAxis(self, *args):
        """
        :param aSemiAxis:
        :type aSemiAxis: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Hyperbola_SetSemiAxis(self, *args)


    def SemiAxis(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Hyperbola_SemiAxis(self, *args)


    def SetSemiImagAxis(self, *args):
        """
        :param aSemiImagAxis:
        :type aSemiImagAxis: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Hyperbola_SetSemiImagAxis(self, *args)


    def SemiImagAxis(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Hyperbola_SemiImagAxis(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Hyperbola(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Hyperbola
StepGeom_Hyperbola.Init = new_instancemethod(_StepGeom.StepGeom_Hyperbola_Init, None, StepGeom_Hyperbola)
StepGeom_Hyperbola.SetSemiAxis = new_instancemethod(_StepGeom.StepGeom_Hyperbola_SetSemiAxis, None, StepGeom_Hyperbola)
StepGeom_Hyperbola.SemiAxis = new_instancemethod(_StepGeom.StepGeom_Hyperbola_SemiAxis, None, StepGeom_Hyperbola)
StepGeom_Hyperbola.SetSemiImagAxis = new_instancemethod(_StepGeom.StepGeom_Hyperbola_SetSemiImagAxis, None, StepGeom_Hyperbola)
StepGeom_Hyperbola.SemiImagAxis = new_instancemethod(_StepGeom.StepGeom_Hyperbola_SemiImagAxis, None, StepGeom_Hyperbola)
StepGeom_Hyperbola_swigregister = _StepGeom.StepGeom_Hyperbola_swigregister
StepGeom_Hyperbola_swigregister(StepGeom_Hyperbola)

class Handle_StepGeom_Hyperbola(Handle_StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Hyperbola_swiginit(self, _StepGeom.new_Handle_StepGeom_Hyperbola(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Hyperbola_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Hyperbola
Handle_StepGeom_Hyperbola.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Hyperbola_Nullify, None, Handle_StepGeom_Hyperbola)
Handle_StepGeom_Hyperbola.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Hyperbola_IsNull, None, Handle_StepGeom_Hyperbola)
Handle_StepGeom_Hyperbola.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Hyperbola_GetObject, None, Handle_StepGeom_Hyperbola)
Handle_StepGeom_Hyperbola_swigregister = _StepGeom.Handle_StepGeom_Hyperbola_swigregister
Handle_StepGeom_Hyperbola_swigregister(Handle_StepGeom_Hyperbola)

def Handle_StepGeom_Hyperbola_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Hyperbola_DownCast(AnObject)
Handle_StepGeom_Hyperbola_DownCast = _StepGeom.Handle_StepGeom_Hyperbola_DownCast

class StepGeom_IntersectionCurve(StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a IntersectionCurve

        :rtype: None

        """
        _StepGeom.StepGeom_IntersectionCurve_swiginit(self, _StepGeom.new_StepGeom_IntersectionCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_IntersectionCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_IntersectionCurve
StepGeom_IntersectionCurve_swigregister = _StepGeom.StepGeom_IntersectionCurve_swigregister
StepGeom_IntersectionCurve_swigregister(StepGeom_IntersectionCurve)

class Handle_StepGeom_IntersectionCurve(Handle_StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_IntersectionCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_IntersectionCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_IntersectionCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_IntersectionCurve
Handle_StepGeom_IntersectionCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_IntersectionCurve_Nullify, None, Handle_StepGeom_IntersectionCurve)
Handle_StepGeom_IntersectionCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_IntersectionCurve_IsNull, None, Handle_StepGeom_IntersectionCurve)
Handle_StepGeom_IntersectionCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_IntersectionCurve_GetObject, None, Handle_StepGeom_IntersectionCurve)
Handle_StepGeom_IntersectionCurve_swigregister = _StepGeom.Handle_StepGeom_IntersectionCurve_swigregister
Handle_StepGeom_IntersectionCurve_swigregister(Handle_StepGeom_IntersectionCurve)

def Handle_StepGeom_IntersectionCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_IntersectionCurve_DownCast(AnObject)
Handle_StepGeom_IntersectionCurve_DownCast = _StepGeom.Handle_StepGeom_IntersectionCurve_DownCast

class StepGeom_Parabola(StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Parabola

        :rtype: None

        """
        _StepGeom.StepGeom_Parabola_swiginit(self, _StepGeom.new_StepGeom_Parabola(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: StepGeom_Axis2Placement &
        :param aFocalDist:
        :type aFocalDist: float
        :rtype: void

        """
        return _StepGeom.StepGeom_Parabola_Init(self, *args)


    def SetFocalDist(self, *args):
        """
        :param aFocalDist:
        :type aFocalDist: float
        :rtype: None

        """
        return _StepGeom.StepGeom_Parabola_SetFocalDist(self, *args)


    def FocalDist(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_Parabola_FocalDist(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Parabola(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Parabola
StepGeom_Parabola.Init = new_instancemethod(_StepGeom.StepGeom_Parabola_Init, None, StepGeom_Parabola)
StepGeom_Parabola.SetFocalDist = new_instancemethod(_StepGeom.StepGeom_Parabola_SetFocalDist, None, StepGeom_Parabola)
StepGeom_Parabola.FocalDist = new_instancemethod(_StepGeom.StepGeom_Parabola_FocalDist, None, StepGeom_Parabola)
StepGeom_Parabola_swigregister = _StepGeom.StepGeom_Parabola_swigregister
StepGeom_Parabola_swigregister(StepGeom_Parabola)

class Handle_StepGeom_Parabola(Handle_StepGeom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Parabola_swiginit(self, _StepGeom.new_Handle_StepGeom_Parabola(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Parabola_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Parabola
Handle_StepGeom_Parabola.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Parabola_Nullify, None, Handle_StepGeom_Parabola)
Handle_StepGeom_Parabola.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Parabola_IsNull, None, Handle_StepGeom_Parabola)
Handle_StepGeom_Parabola.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Parabola_GetObject, None, Handle_StepGeom_Parabola)
Handle_StepGeom_Parabola_swigregister = _StepGeom.Handle_StepGeom_Parabola_swigregister
Handle_StepGeom_Parabola_swigregister(Handle_StepGeom_Parabola)

def Handle_StepGeom_Parabola_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Parabola_DownCast(AnObject)
Handle_StepGeom_Parabola_DownCast = _StepGeom.Handle_StepGeom_Parabola_DownCast

class StepGeom_Plane(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Plane

        :rtype: None

        """
        _StepGeom.StepGeom_Plane_swiginit(self, _StepGeom.new_StepGeom_Plane(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Plane(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Plane
StepGeom_Plane_swigregister = _StepGeom.StepGeom_Plane_swigregister
StepGeom_Plane_swigregister(StepGeom_Plane)

class Handle_StepGeom_Plane(Handle_StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Plane_swiginit(self, _StepGeom.new_Handle_StepGeom_Plane(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Plane_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Plane
Handle_StepGeom_Plane.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Plane_Nullify, None, Handle_StepGeom_Plane)
Handle_StepGeom_Plane.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Plane_IsNull, None, Handle_StepGeom_Plane)
Handle_StepGeom_Plane.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Plane_GetObject, None, Handle_StepGeom_Plane)
Handle_StepGeom_Plane_swigregister = _StepGeom.Handle_StepGeom_Plane_swigregister
Handle_StepGeom_Plane_swigregister(Handle_StepGeom_Plane)

def Handle_StepGeom_Plane_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Plane_DownCast(AnObject)
Handle_StepGeom_Plane_DownCast = _StepGeom.Handle_StepGeom_Plane_DownCast

class StepGeom_Polyline(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Polyline

        :rtype: None

        """
        _StepGeom.StepGeom_Polyline_swiginit(self, _StepGeom.new_StepGeom_Polyline(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPoints:
        :type aPoints: Handle_StepGeom_HArray1OfCartesianPoint &
        :rtype: void

        """
        return _StepGeom.StepGeom_Polyline_Init(self, *args)


    def SetPoints(self, *args):
        """
        :param aPoints:
        :type aPoints: Handle_StepGeom_HArray1OfCartesianPoint &
        :rtype: None

        """
        return _StepGeom.StepGeom_Polyline_SetPoints(self, *args)


    def Points(self, *args):
        """
        :rtype: Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepGeom.StepGeom_Polyline_Points(self, *args)


    def PointsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepGeom.StepGeom_Polyline_PointsValue(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_Polyline_NbPoints(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_Polyline(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_Polyline
StepGeom_Polyline.Init = new_instancemethod(_StepGeom.StepGeom_Polyline_Init, None, StepGeom_Polyline)
StepGeom_Polyline.SetPoints = new_instancemethod(_StepGeom.StepGeom_Polyline_SetPoints, None, StepGeom_Polyline)
StepGeom_Polyline.Points = new_instancemethod(_StepGeom.StepGeom_Polyline_Points, None, StepGeom_Polyline)
StepGeom_Polyline.PointsValue = new_instancemethod(_StepGeom.StepGeom_Polyline_PointsValue, None, StepGeom_Polyline)
StepGeom_Polyline.NbPoints = new_instancemethod(_StepGeom.StepGeom_Polyline_NbPoints, None, StepGeom_Polyline)
StepGeom_Polyline_swigregister = _StepGeom.StepGeom_Polyline_swigregister
StepGeom_Polyline_swigregister(StepGeom_Polyline)

class Handle_StepGeom_Polyline(Handle_StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_Polyline_swiginit(self, _StepGeom.new_Handle_StepGeom_Polyline(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_Polyline_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_Polyline
Handle_StepGeom_Polyline.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_Polyline_Nullify, None, Handle_StepGeom_Polyline)
Handle_StepGeom_Polyline.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_Polyline_IsNull, None, Handle_StepGeom_Polyline)
Handle_StepGeom_Polyline.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_Polyline_GetObject, None, Handle_StepGeom_Polyline)
Handle_StepGeom_Polyline_swigregister = _StepGeom.Handle_StepGeom_Polyline_swigregister
Handle_StepGeom_Polyline_swigregister(Handle_StepGeom_Polyline)

def Handle_StepGeom_Polyline_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_Polyline_DownCast(AnObject)
Handle_StepGeom_Polyline_DownCast = _StepGeom.Handle_StepGeom_Polyline_DownCast

class StepGeom_RectangularCompositeSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RectangularCompositeSurface

        :rtype: None

        """
        _StepGeom.StepGeom_RectangularCompositeSurface_swiginit(self, _StepGeom.new_StepGeom_RectangularCompositeSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSegments:
        :type aSegments: Handle_StepGeom_HArray2OfSurfacePatch &
        :rtype: void

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_Init(self, *args)


    def SetSegments(self, *args):
        """
        :param aSegments:
        :type aSegments: Handle_StepGeom_HArray2OfSurfacePatch &
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_SetSegments(self, *args)


    def Segments(self, *args):
        """
        :rtype: Handle_StepGeom_HArray2OfSurfacePatch

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_Segments(self, *args)


    def SegmentsValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: Handle_StepGeom_SurfacePatch

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_SegmentsValue(self, *args)


    def NbSegmentsI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_NbSegmentsI(self, *args)


    def NbSegmentsJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_RectangularCompositeSurface_NbSegmentsJ(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_RectangularCompositeSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_RectangularCompositeSurface
StepGeom_RectangularCompositeSurface.Init = new_instancemethod(_StepGeom.StepGeom_RectangularCompositeSurface_Init, None, StepGeom_RectangularCompositeSurface)
StepGeom_RectangularCompositeSurface.SetSegments = new_instancemethod(_StepGeom.StepGeom_RectangularCompositeSurface_SetSegments, None, StepGeom_RectangularCompositeSurface)
StepGeom_RectangularCompositeSurface.Segments = new_instancemethod(_StepGeom.StepGeom_RectangularCompositeSurface_Segments, None, StepGeom_RectangularCompositeSurface)
StepGeom_RectangularCompositeSurface.SegmentsValue = new_instancemethod(_StepGeom.StepGeom_RectangularCompositeSurface_SegmentsValue, None, StepGeom_RectangularCompositeSurface)
StepGeom_RectangularCompositeSurface.NbSegmentsI = new_instancemethod(_StepGeom.StepGeom_RectangularCompositeSurface_NbSegmentsI, None, StepGeom_RectangularCompositeSurface)
StepGeom_RectangularCompositeSurface.NbSegmentsJ = new_instancemethod(_StepGeom.StepGeom_RectangularCompositeSurface_NbSegmentsJ, None, StepGeom_RectangularCompositeSurface)
StepGeom_RectangularCompositeSurface_swigregister = _StepGeom.StepGeom_RectangularCompositeSurface_swigregister
StepGeom_RectangularCompositeSurface_swigregister(StepGeom_RectangularCompositeSurface)

class Handle_StepGeom_RectangularCompositeSurface(Handle_StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_RectangularCompositeSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_RectangularCompositeSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RectangularCompositeSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RectangularCompositeSurface
Handle_StepGeom_RectangularCompositeSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_RectangularCompositeSurface_Nullify, None, Handle_StepGeom_RectangularCompositeSurface)
Handle_StepGeom_RectangularCompositeSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_RectangularCompositeSurface_IsNull, None, Handle_StepGeom_RectangularCompositeSurface)
Handle_StepGeom_RectangularCompositeSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_RectangularCompositeSurface_GetObject, None, Handle_StepGeom_RectangularCompositeSurface)
Handle_StepGeom_RectangularCompositeSurface_swigregister = _StepGeom.Handle_StepGeom_RectangularCompositeSurface_swigregister
Handle_StepGeom_RectangularCompositeSurface_swigregister(Handle_StepGeom_RectangularCompositeSurface)

def Handle_StepGeom_RectangularCompositeSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_RectangularCompositeSurface_DownCast(AnObject)
Handle_StepGeom_RectangularCompositeSurface_DownCast = _StepGeom.Handle_StepGeom_RectangularCompositeSurface_DownCast

class StepGeom_RectangularTrimmedSurface(StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RectangularTrimmedSurface

        :rtype: None

        """
        _StepGeom.StepGeom_RectangularTrimmedSurface_swiginit(self, _StepGeom.new_StepGeom_RectangularTrimmedSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :param aU1:
        :type aU1: float
        :param aU2:
        :type aU2: float
        :param aV1:
        :type aV1: float
        :param aV2:
        :type aV2: float
        :param aUsense:
        :type aUsense: bool
        :param aVsense:
        :type aVsense: bool
        :rtype: void

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_Init(self, *args)


    def SetBasisSurface(self, *args):
        """
        :param aBasisSurface:
        :type aBasisSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetBasisSurface(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_BasisSurface(self, *args)


    def SetU1(self, *args):
        """
        :param aU1:
        :type aU1: float
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetU1(self, *args)


    def U1(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_U1(self, *args)


    def SetU2(self, *args):
        """
        :param aU2:
        :type aU2: float
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetU2(self, *args)


    def U2(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_U2(self, *args)


    def SetV1(self, *args):
        """
        :param aV1:
        :type aV1: float
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetV1(self, *args)


    def V1(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_V1(self, *args)


    def SetV2(self, *args):
        """
        :param aV2:
        :type aV2: float
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetV2(self, *args)


    def V2(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_V2(self, *args)


    def SetUsense(self, *args):
        """
        :param aUsense:
        :type aUsense: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetUsense(self, *args)


    def Usense(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_Usense(self, *args)


    def SetVsense(self, *args):
        """
        :param aVsense:
        :type aVsense: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_SetVsense(self, *args)


    def Vsense(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_RectangularTrimmedSurface_Vsense(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_RectangularTrimmedSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_RectangularTrimmedSurface
StepGeom_RectangularTrimmedSurface.Init = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_Init, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetBasisSurface = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetBasisSurface, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.BasisSurface = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_BasisSurface, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetU1 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetU1, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.U1 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_U1, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetU2 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetU2, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.U2 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_U2, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetV1 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetV1, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.V1 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_V1, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetV2 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetV2, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.V2 = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_V2, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetUsense = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetUsense, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.Usense = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_Usense, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.SetVsense = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_SetVsense, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface.Vsense = new_instancemethod(_StepGeom.StepGeom_RectangularTrimmedSurface_Vsense, None, StepGeom_RectangularTrimmedSurface)
StepGeom_RectangularTrimmedSurface_swigregister = _StepGeom.StepGeom_RectangularTrimmedSurface_swigregister
StepGeom_RectangularTrimmedSurface_swigregister(StepGeom_RectangularTrimmedSurface)

class Handle_StepGeom_RectangularTrimmedSurface(Handle_StepGeom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_RectangularTrimmedSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RectangularTrimmedSurface
Handle_StepGeom_RectangularTrimmedSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_RectangularTrimmedSurface_Nullify, None, Handle_StepGeom_RectangularTrimmedSurface)
Handle_StepGeom_RectangularTrimmedSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_RectangularTrimmedSurface_IsNull, None, Handle_StepGeom_RectangularTrimmedSurface)
Handle_StepGeom_RectangularTrimmedSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_RectangularTrimmedSurface_GetObject, None, Handle_StepGeom_RectangularTrimmedSurface)
Handle_StepGeom_RectangularTrimmedSurface_swigregister = _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_swigregister
Handle_StepGeom_RectangularTrimmedSurface_swigregister(Handle_StepGeom_RectangularTrimmedSurface)

def Handle_StepGeom_RectangularTrimmedSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DownCast(AnObject)
Handle_StepGeom_RectangularTrimmedSurface_DownCast = _StepGeom.Handle_StepGeom_RectangularTrimmedSurface_DownCast

class StepGeom_SeamCurve(StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SeamCurve

        :rtype: None

        """
        _StepGeom.StepGeom_SeamCurve_swiginit(self, _StepGeom.new_StepGeom_SeamCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SeamCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SeamCurve
StepGeom_SeamCurve_swigregister = _StepGeom.StepGeom_SeamCurve_swigregister
StepGeom_SeamCurve_swigregister(StepGeom_SeamCurve)

class Handle_StepGeom_SeamCurve(Handle_StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SeamCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_SeamCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SeamCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SeamCurve
Handle_StepGeom_SeamCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SeamCurve_Nullify, None, Handle_StepGeom_SeamCurve)
Handle_StepGeom_SeamCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SeamCurve_IsNull, None, Handle_StepGeom_SeamCurve)
Handle_StepGeom_SeamCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SeamCurve_GetObject, None, Handle_StepGeom_SeamCurve)
Handle_StepGeom_SeamCurve_swigregister = _StepGeom.Handle_StepGeom_SeamCurve_swigregister
Handle_StepGeom_SeamCurve_swigregister(Handle_StepGeom_SeamCurve)

def Handle_StepGeom_SeamCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SeamCurve_DownCast(AnObject)
Handle_StepGeom_SeamCurve_DownCast = _StepGeom.Handle_StepGeom_SeamCurve_DownCast

class StepGeom_SphericalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SphericalSurface

        :rtype: None

        """
        _StepGeom.StepGeom_SphericalSurface_swiginit(self, _StepGeom.new_StepGeom_SphericalSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aRadius:
        :type aRadius: float
        :rtype: void

        """
        return _StepGeom.StepGeom_SphericalSurface_Init(self, *args)


    def SetRadius(self, *args):
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepGeom.StepGeom_SphericalSurface_SetRadius(self, *args)


    def Radius(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_SphericalSurface_Radius(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SphericalSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SphericalSurface
StepGeom_SphericalSurface.Init = new_instancemethod(_StepGeom.StepGeom_SphericalSurface_Init, None, StepGeom_SphericalSurface)
StepGeom_SphericalSurface.SetRadius = new_instancemethod(_StepGeom.StepGeom_SphericalSurface_SetRadius, None, StepGeom_SphericalSurface)
StepGeom_SphericalSurface.Radius = new_instancemethod(_StepGeom.StepGeom_SphericalSurface_Radius, None, StepGeom_SphericalSurface)
StepGeom_SphericalSurface_swigregister = _StepGeom.StepGeom_SphericalSurface_swigregister
StepGeom_SphericalSurface_swigregister(StepGeom_SphericalSurface)

class Handle_StepGeom_SphericalSurface(Handle_StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SphericalSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_SphericalSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SphericalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SphericalSurface
Handle_StepGeom_SphericalSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SphericalSurface_Nullify, None, Handle_StepGeom_SphericalSurface)
Handle_StepGeom_SphericalSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SphericalSurface_IsNull, None, Handle_StepGeom_SphericalSurface)
Handle_StepGeom_SphericalSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SphericalSurface_GetObject, None, Handle_StepGeom_SphericalSurface)
Handle_StepGeom_SphericalSurface_swigregister = _StepGeom.Handle_StepGeom_SphericalSurface_swigregister
Handle_StepGeom_SphericalSurface_swigregister(Handle_StepGeom_SphericalSurface)

def Handle_StepGeom_SphericalSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SphericalSurface_DownCast(AnObject)
Handle_StepGeom_SphericalSurface_DownCast = _StepGeom.Handle_StepGeom_SphericalSurface_DownCast

class StepGeom_SurfaceCurveAndBoundedCurve(StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates empty object

        :rtype: None

        """
        _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_swiginit(self, _StepGeom.new_StepGeom_SurfaceCurveAndBoundedCurve(*args))

    def BoundedCurve(self, *args):
        """
        * returns field BoundedCurve

        :rtype: Handle_StepGeom_BoundedCurve

        """
        return _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_BoundedCurve(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SurfaceCurveAndBoundedCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceCurveAndBoundedCurve
StepGeom_SurfaceCurveAndBoundedCurve.BoundedCurve = new_instancemethod(_StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_BoundedCurve, None, StepGeom_SurfaceCurveAndBoundedCurve)
StepGeom_SurfaceCurveAndBoundedCurve_swigregister = _StepGeom.StepGeom_SurfaceCurveAndBoundedCurve_swigregister
StepGeom_SurfaceCurveAndBoundedCurve_swigregister(StepGeom_SurfaceCurveAndBoundedCurve)

class Handle_StepGeom_SurfaceCurveAndBoundedCurve(Handle_StepGeom_SurfaceCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_SurfaceCurveAndBoundedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceCurveAndBoundedCurve
Handle_StepGeom_SurfaceCurveAndBoundedCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_Nullify, None, Handle_StepGeom_SurfaceCurveAndBoundedCurve)
Handle_StepGeom_SurfaceCurveAndBoundedCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_IsNull, None, Handle_StepGeom_SurfaceCurveAndBoundedCurve)
Handle_StepGeom_SurfaceCurveAndBoundedCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_GetObject, None, Handle_StepGeom_SurfaceCurveAndBoundedCurve)
Handle_StepGeom_SurfaceCurveAndBoundedCurve_swigregister = _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_swigregister
Handle_StepGeom_SurfaceCurveAndBoundedCurve_swigregister(Handle_StepGeom_SurfaceCurveAndBoundedCurve)

def Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast(AnObject)
Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast = _StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve_DownCast

class StepGeom_SurfaceOfLinearExtrusion(StepGeom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SurfaceOfLinearExtrusion

        :rtype: None

        """
        _StepGeom.StepGeom_SurfaceOfLinearExtrusion_swiginit(self, _StepGeom.new_StepGeom_SurfaceOfLinearExtrusion(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptCurve:
        :type aSweptCurve: Handle_StepGeom_Curve &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptCurve:
        :type aSweptCurve: Handle_StepGeom_Curve &
        :param aExtrusionAxis:
        :type aExtrusionAxis: Handle_StepGeom_Vector &
        :rtype: void

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_Init(self, *args)


    def SetExtrusionAxis(self, *args):
        """
        :param aExtrusionAxis:
        :type aExtrusionAxis: Handle_StepGeom_Vector &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_SetExtrusionAxis(self, *args)


    def ExtrusionAxis(self, *args):
        """
        :rtype: Handle_StepGeom_Vector

        """
        return _StepGeom.StepGeom_SurfaceOfLinearExtrusion_ExtrusionAxis(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SurfaceOfLinearExtrusion(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceOfLinearExtrusion
StepGeom_SurfaceOfLinearExtrusion.Init = new_instancemethod(_StepGeom.StepGeom_SurfaceOfLinearExtrusion_Init, None, StepGeom_SurfaceOfLinearExtrusion)
StepGeom_SurfaceOfLinearExtrusion.SetExtrusionAxis = new_instancemethod(_StepGeom.StepGeom_SurfaceOfLinearExtrusion_SetExtrusionAxis, None, StepGeom_SurfaceOfLinearExtrusion)
StepGeom_SurfaceOfLinearExtrusion.ExtrusionAxis = new_instancemethod(_StepGeom.StepGeom_SurfaceOfLinearExtrusion_ExtrusionAxis, None, StepGeom_SurfaceOfLinearExtrusion)
StepGeom_SurfaceOfLinearExtrusion_swigregister = _StepGeom.StepGeom_SurfaceOfLinearExtrusion_swigregister
StepGeom_SurfaceOfLinearExtrusion_swigregister(StepGeom_SurfaceOfLinearExtrusion)

class Handle_StepGeom_SurfaceOfLinearExtrusion(Handle_StepGeom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_swiginit(self, _StepGeom.new_Handle_StepGeom_SurfaceOfLinearExtrusion(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceOfLinearExtrusion
Handle_StepGeom_SurfaceOfLinearExtrusion.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_Nullify, None, Handle_StepGeom_SurfaceOfLinearExtrusion)
Handle_StepGeom_SurfaceOfLinearExtrusion.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_IsNull, None, Handle_StepGeom_SurfaceOfLinearExtrusion)
Handle_StepGeom_SurfaceOfLinearExtrusion.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_GetObject, None, Handle_StepGeom_SurfaceOfLinearExtrusion)
Handle_StepGeom_SurfaceOfLinearExtrusion_swigregister = _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_swigregister
Handle_StepGeom_SurfaceOfLinearExtrusion_swigregister(Handle_StepGeom_SurfaceOfLinearExtrusion)

def Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast(AnObject)
Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast = _StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion_DownCast

class StepGeom_SurfaceOfRevolution(StepGeom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SurfaceOfRevolution

        :rtype: None

        """
        _StepGeom.StepGeom_SurfaceOfRevolution_swiginit(self, _StepGeom.new_StepGeom_SurfaceOfRevolution(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptCurve:
        :type aSweptCurve: Handle_StepGeom_Curve &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptCurve:
        :type aSweptCurve: Handle_StepGeom_Curve &
        :param aAxisPosition:
        :type aAxisPosition: Handle_StepGeom_Axis1Placement &
        :rtype: void

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_Init(self, *args)


    def SetAxisPosition(self, *args):
        """
        :param aAxisPosition:
        :type aAxisPosition: Handle_StepGeom_Axis1Placement &
        :rtype: None

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_SetAxisPosition(self, *args)


    def AxisPosition(self, *args):
        """
        :rtype: Handle_StepGeom_Axis1Placement

        """
        return _StepGeom.StepGeom_SurfaceOfRevolution_AxisPosition(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_SurfaceOfRevolution(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_SurfaceOfRevolution
StepGeom_SurfaceOfRevolution.Init = new_instancemethod(_StepGeom.StepGeom_SurfaceOfRevolution_Init, None, StepGeom_SurfaceOfRevolution)
StepGeom_SurfaceOfRevolution.SetAxisPosition = new_instancemethod(_StepGeom.StepGeom_SurfaceOfRevolution_SetAxisPosition, None, StepGeom_SurfaceOfRevolution)
StepGeom_SurfaceOfRevolution.AxisPosition = new_instancemethod(_StepGeom.StepGeom_SurfaceOfRevolution_AxisPosition, None, StepGeom_SurfaceOfRevolution)
StepGeom_SurfaceOfRevolution_swigregister = _StepGeom.StepGeom_SurfaceOfRevolution_swigregister
StepGeom_SurfaceOfRevolution_swigregister(StepGeom_SurfaceOfRevolution)

class Handle_StepGeom_SurfaceOfRevolution(Handle_StepGeom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_SurfaceOfRevolution_swiginit(self, _StepGeom.new_Handle_StepGeom_SurfaceOfRevolution(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_SurfaceOfRevolution_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_SurfaceOfRevolution
Handle_StepGeom_SurfaceOfRevolution.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceOfRevolution_Nullify, None, Handle_StepGeom_SurfaceOfRevolution)
Handle_StepGeom_SurfaceOfRevolution.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceOfRevolution_IsNull, None, Handle_StepGeom_SurfaceOfRevolution)
Handle_StepGeom_SurfaceOfRevolution.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_SurfaceOfRevolution_GetObject, None, Handle_StepGeom_SurfaceOfRevolution)
Handle_StepGeom_SurfaceOfRevolution_swigregister = _StepGeom.Handle_StepGeom_SurfaceOfRevolution_swigregister
Handle_StepGeom_SurfaceOfRevolution_swigregister(Handle_StepGeom_SurfaceOfRevolution)

def Handle_StepGeom_SurfaceOfRevolution_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_SurfaceOfRevolution_DownCast(AnObject)
Handle_StepGeom_SurfaceOfRevolution_DownCast = _StepGeom.Handle_StepGeom_SurfaceOfRevolution_DownCast

class StepGeom_ToroidalSurface(StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ToroidalSurface

        :rtype: None

        """
        _StepGeom.StepGeom_ToroidalSurface_swiginit(self, _StepGeom.new_StepGeom_ToroidalSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aMajorRadius:
        :type aMajorRadius: float
        :param aMinorRadius:
        :type aMinorRadius: float
        :rtype: void

        """
        return _StepGeom.StepGeom_ToroidalSurface_Init(self, *args)


    def SetMajorRadius(self, *args):
        """
        :param aMajorRadius:
        :type aMajorRadius: float
        :rtype: None

        """
        return _StepGeom.StepGeom_ToroidalSurface_SetMajorRadius(self, *args)


    def MajorRadius(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_ToroidalSurface_MajorRadius(self, *args)


    def SetMinorRadius(self, *args):
        """
        :param aMinorRadius:
        :type aMinorRadius: float
        :rtype: None

        """
        return _StepGeom.StepGeom_ToroidalSurface_SetMinorRadius(self, *args)


    def MinorRadius(self, *args):
        """
        :rtype: float

        """
        return _StepGeom.StepGeom_ToroidalSurface_MinorRadius(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_ToroidalSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_ToroidalSurface
StepGeom_ToroidalSurface.Init = new_instancemethod(_StepGeom.StepGeom_ToroidalSurface_Init, None, StepGeom_ToroidalSurface)
StepGeom_ToroidalSurface.SetMajorRadius = new_instancemethod(_StepGeom.StepGeom_ToroidalSurface_SetMajorRadius, None, StepGeom_ToroidalSurface)
StepGeom_ToroidalSurface.MajorRadius = new_instancemethod(_StepGeom.StepGeom_ToroidalSurface_MajorRadius, None, StepGeom_ToroidalSurface)
StepGeom_ToroidalSurface.SetMinorRadius = new_instancemethod(_StepGeom.StepGeom_ToroidalSurface_SetMinorRadius, None, StepGeom_ToroidalSurface)
StepGeom_ToroidalSurface.MinorRadius = new_instancemethod(_StepGeom.StepGeom_ToroidalSurface_MinorRadius, None, StepGeom_ToroidalSurface)
StepGeom_ToroidalSurface_swigregister = _StepGeom.StepGeom_ToroidalSurface_swigregister
StepGeom_ToroidalSurface_swigregister(StepGeom_ToroidalSurface)

class Handle_StepGeom_ToroidalSurface(Handle_StepGeom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_ToroidalSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_ToroidalSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_ToroidalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_ToroidalSurface
Handle_StepGeom_ToroidalSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_ToroidalSurface_Nullify, None, Handle_StepGeom_ToroidalSurface)
Handle_StepGeom_ToroidalSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_ToroidalSurface_IsNull, None, Handle_StepGeom_ToroidalSurface)
Handle_StepGeom_ToroidalSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_ToroidalSurface_GetObject, None, Handle_StepGeom_ToroidalSurface)
Handle_StepGeom_ToroidalSurface_swigregister = _StepGeom.Handle_StepGeom_ToroidalSurface_swigregister
Handle_StepGeom_ToroidalSurface_swigregister(Handle_StepGeom_ToroidalSurface)

def Handle_StepGeom_ToroidalSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_ToroidalSurface_DownCast(AnObject)
Handle_StepGeom_ToroidalSurface_DownCast = _StepGeom.Handle_StepGeom_ToroidalSurface_DownCast

class StepGeom_TrimmedCurve(StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a TrimmedCurve

        :rtype: None

        """
        _StepGeom.StepGeom_TrimmedCurve_swiginit(self, _StepGeom.new_StepGeom_TrimmedCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBasisCurve:
        :type aBasisCurve: Handle_StepGeom_Curve &
        :param aTrim1:
        :type aTrim1: Handle_StepGeom_HArray1OfTrimmingSelect &
        :param aTrim2:
        :type aTrim2: Handle_StepGeom_HArray1OfTrimmingSelect &
        :param aSenseAgreement:
        :type aSenseAgreement: bool
        :param aMasterRepresentation:
        :type aMasterRepresentation: StepGeom_TrimmingPreference
        :rtype: void

        """
        return _StepGeom.StepGeom_TrimmedCurve_Init(self, *args)


    def SetBasisCurve(self, *args):
        """
        :param aBasisCurve:
        :type aBasisCurve: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetBasisCurve(self, *args)


    def BasisCurve(self, *args):
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepGeom.StepGeom_TrimmedCurve_BasisCurve(self, *args)


    def SetTrim1(self, *args):
        """
        :param aTrim1:
        :type aTrim1: Handle_StepGeom_HArray1OfTrimmingSelect &
        :rtype: None

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetTrim1(self, *args)


    def Trim1(self, *args):
        """
        :rtype: Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim1(self, *args)


    def Trim1Value(self, *args):
        """
        :param num:
        :type num: int
        :rtype: StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim1Value(self, *args)


    def NbTrim1(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_TrimmedCurve_NbTrim1(self, *args)


    def SetTrim2(self, *args):
        """
        :param aTrim2:
        :type aTrim2: Handle_StepGeom_HArray1OfTrimmingSelect &
        :rtype: None

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetTrim2(self, *args)


    def Trim2(self, *args):
        """
        :rtype: Handle_StepGeom_HArray1OfTrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim2(self, *args)


    def Trim2Value(self, *args):
        """
        :param num:
        :type num: int
        :rtype: StepGeom_TrimmingSelect

        """
        return _StepGeom.StepGeom_TrimmedCurve_Trim2Value(self, *args)


    def NbTrim2(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_TrimmedCurve_NbTrim2(self, *args)


    def SetSenseAgreement(self, *args):
        """
        :param aSenseAgreement:
        :type aSenseAgreement: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetSenseAgreement(self, *args)


    def SenseAgreement(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_TrimmedCurve_SenseAgreement(self, *args)


    def SetMasterRepresentation(self, *args):
        """
        :param aMasterRepresentation:
        :type aMasterRepresentation: StepGeom_TrimmingPreference
        :rtype: None

        """
        return _StepGeom.StepGeom_TrimmedCurve_SetMasterRepresentation(self, *args)


    def MasterRepresentation(self, *args):
        """
        :rtype: StepGeom_TrimmingPreference

        """
        return _StepGeom.StepGeom_TrimmedCurve_MasterRepresentation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_TrimmedCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_TrimmedCurve
StepGeom_TrimmedCurve.Init = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_Init, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.SetBasisCurve = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_SetBasisCurve, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.BasisCurve = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_BasisCurve, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.SetTrim1 = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_SetTrim1, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.Trim1 = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_Trim1, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.Trim1Value = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_Trim1Value, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.NbTrim1 = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_NbTrim1, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.SetTrim2 = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_SetTrim2, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.Trim2 = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_Trim2, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.Trim2Value = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_Trim2Value, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.NbTrim2 = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_NbTrim2, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.SetSenseAgreement = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_SetSenseAgreement, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.SenseAgreement = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_SenseAgreement, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.SetMasterRepresentation = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_SetMasterRepresentation, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve.MasterRepresentation = new_instancemethod(_StepGeom.StepGeom_TrimmedCurve_MasterRepresentation, None, StepGeom_TrimmedCurve)
StepGeom_TrimmedCurve_swigregister = _StepGeom.StepGeom_TrimmedCurve_swigregister
StepGeom_TrimmedCurve_swigregister(StepGeom_TrimmedCurve)

class Handle_StepGeom_TrimmedCurve(Handle_StepGeom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_TrimmedCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_TrimmedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_TrimmedCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_TrimmedCurve
Handle_StepGeom_TrimmedCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_TrimmedCurve_Nullify, None, Handle_StepGeom_TrimmedCurve)
Handle_StepGeom_TrimmedCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_TrimmedCurve_IsNull, None, Handle_StepGeom_TrimmedCurve)
Handle_StepGeom_TrimmedCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_TrimmedCurve_GetObject, None, Handle_StepGeom_TrimmedCurve)
Handle_StepGeom_TrimmedCurve_swigregister = _StepGeom.Handle_StepGeom_TrimmedCurve_swigregister
Handle_StepGeom_TrimmedCurve_swigregister(Handle_StepGeom_TrimmedCurve)

def Handle_StepGeom_TrimmedCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_TrimmedCurve_DownCast(AnObject)
Handle_StepGeom_TrimmedCurve_DownCast = _StepGeom.Handle_StepGeom_TrimmedCurve_DownCast

class StepGeom_BSplineCurveWithKnots(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BSplineCurveWithKnots

        :rtype: None

        """
        _StepGeom.StepGeom_BSplineCurveWithKnots_swiginit(self, _StepGeom.new_StepGeom_BSplineCurveWithKnots(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aKnotMultiplicities:
        :type aKnotMultiplicities: Handle_TColStd_HArray1OfInteger &
        :param aKnots:
        :type aKnots: Handle_TColStd_HArray1OfReal &
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :rtype: void

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_Init(self, *args)


    def SetKnotMultiplicities(self, *args):
        """
        :param aKnotMultiplicities:
        :type aKnotMultiplicities: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_SetKnotMultiplicities(self, *args)


    def KnotMultiplicities(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotMultiplicities(self, *args)


    def KnotMultiplicitiesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotMultiplicitiesValue(self, *args)


    def NbKnotMultiplicities(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_NbKnotMultiplicities(self, *args)


    def SetKnots(self, *args):
        """
        :param aKnots:
        :type aKnots: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_SetKnots(self, *args)


    def Knots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_Knots(self, *args)


    def KnotsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotsValue(self, *args)


    def NbKnots(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_NbKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        :rtype: StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnots_KnotSpec(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BSplineCurveWithKnots(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineCurveWithKnots
StepGeom_BSplineCurveWithKnots.Init = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_Init, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.SetKnotMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_SetKnotMultiplicities, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.KnotMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_KnotMultiplicities, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.KnotMultiplicitiesValue = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_KnotMultiplicitiesValue, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.NbKnotMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_NbKnotMultiplicities, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.SetKnots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_SetKnots, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.Knots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_Knots, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.KnotsValue = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_KnotsValue, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.NbKnots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_NbKnots, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.SetKnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_SetKnotSpec, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots.KnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnots_KnotSpec, None, StepGeom_BSplineCurveWithKnots)
StepGeom_BSplineCurveWithKnots_swigregister = _StepGeom.StepGeom_BSplineCurveWithKnots_swigregister
StepGeom_BSplineCurveWithKnots_swigregister(StepGeom_BSplineCurveWithKnots)

class Handle_StepGeom_BSplineCurveWithKnots(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_swiginit(self, _StepGeom.new_Handle_StepGeom_BSplineCurveWithKnots(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineCurveWithKnots
Handle_StepGeom_BSplineCurveWithKnots.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnots_Nullify, None, Handle_StepGeom_BSplineCurveWithKnots)
Handle_StepGeom_BSplineCurveWithKnots.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnots_IsNull, None, Handle_StepGeom_BSplineCurveWithKnots)
Handle_StepGeom_BSplineCurveWithKnots.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnots_GetObject, None, Handle_StepGeom_BSplineCurveWithKnots)
Handle_StepGeom_BSplineCurveWithKnots_swigregister = _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_swigregister
Handle_StepGeom_BSplineCurveWithKnots_swigregister(Handle_StepGeom_BSplineCurveWithKnots)

def Handle_StepGeom_BSplineCurveWithKnots_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DownCast(AnObject)
Handle_StepGeom_BSplineCurveWithKnots_DownCast = _StepGeom.Handle_StepGeom_BSplineCurveWithKnots_DownCast

class StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BSplineCurveWithKnotsAndRationalBSplineCurve

        :rtype: None

        """
        _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swiginit(self, _StepGeom.new_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aBSplineCurveWithKnots:
        :type aBSplineCurveWithKnots: Handle_StepGeom_BSplineCurveWithKnots &
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aKnotMultiplicities:
        :type aKnotMultiplicities: Handle_TColStd_HArray1OfInteger &
        :param aKnots:
        :type aKnots: Handle_TColStd_HArray1OfReal &
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Init(self, *args)


    def SetBSplineCurveWithKnots(self, *args):
        """
        :param aBSplineCurveWithKnots:
        :type aBSplineCurveWithKnots: Handle_StepGeom_BSplineCurveWithKnots &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetBSplineCurveWithKnots(self, *args)


    def BSplineCurveWithKnots(self, *args):
        """
        :rtype: Handle_StepGeom_BSplineCurveWithKnots

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_BSplineCurveWithKnots(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetKnotMultiplicities(self, *args):
        """
        :param aKnotMultiplicities:
        :type aKnotMultiplicities: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotMultiplicities(self, *args)


    def KnotMultiplicities(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicities(self, *args)


    def KnotMultiplicitiesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicitiesValue(self, *args)


    def NbKnotMultiplicities(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnotMultiplicities(self, *args)


    def SetKnots(self, *args):
        """
        :param aKnots:
        :type aKnots: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnots(self, *args)


    def Knots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Knots(self, *args)


    def KnotsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotsValue(self, *args)


    def NbKnots(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        :rtype: StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotSpec(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbWeightsData(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.Init = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Init, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.SetBSplineCurveWithKnots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetBSplineCurveWithKnots, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.BSplineCurveWithKnots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_BSplineCurveWithKnots, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.SetRationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetRationalBSplineCurve, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.RationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_RationalBSplineCurve, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.SetKnotMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotMultiplicities, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.KnotMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicities, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.KnotMultiplicitiesValue = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotMultiplicitiesValue, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.NbKnotMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnotMultiplicities, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.SetKnots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnots, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.Knots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Knots, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.KnotsValue = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotsValue, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.NbKnots = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbKnots, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.SetKnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetKnotSpec, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.KnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_KnotSpec, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_SetWeightsData, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.WeightsData = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsData, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_WeightsDataValue, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.NbWeightsData = new_instancemethod(_StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_NbWeightsData, None, StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)

class Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_Nullify, None, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_IsNull, None, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_GetObject, None, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve)

def Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast(AnObject)
Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve_DownCast

class StepGeom_BSplineSurfaceWithKnots(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BSplineSurfaceWithKnots

        :rtype: None

        """
        _StepGeom.StepGeom_BSplineSurfaceWithKnots_swiginit(self, _StepGeom.new_StepGeom_BSplineSurfaceWithKnots(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aUMultiplicities:
        :type aUMultiplicities: Handle_TColStd_HArray1OfInteger &
        :param aVMultiplicities:
        :type aVMultiplicities: Handle_TColStd_HArray1OfInteger &
        :param aUKnots:
        :type aUKnots: Handle_TColStd_HArray1OfReal &
        :param aVKnots:
        :type aVKnots: Handle_TColStd_HArray1OfReal &
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :rtype: void

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_Init(self, *args)


    def SetUMultiplicities(self, *args):
        """
        :param aUMultiplicities:
        :type aUMultiplicities: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetUMultiplicities(self, *args)


    def UMultiplicities(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UMultiplicities(self, *args)


    def UMultiplicitiesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UMultiplicitiesValue(self, *args)


    def NbUMultiplicities(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbUMultiplicities(self, *args)


    def SetVMultiplicities(self, *args):
        """
        :param aVMultiplicities:
        :type aVMultiplicities: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetVMultiplicities(self, *args)


    def VMultiplicities(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VMultiplicities(self, *args)


    def VMultiplicitiesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VMultiplicitiesValue(self, *args)


    def NbVMultiplicities(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbVMultiplicities(self, *args)


    def SetUKnots(self, *args):
        """
        :param aUKnots:
        :type aUKnots: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetUKnots(self, *args)


    def UKnots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UKnots(self, *args)


    def UKnotsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_UKnotsValue(self, *args)


    def NbUKnots(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbUKnots(self, *args)


    def SetVKnots(self, *args):
        """
        :param aVKnots:
        :type aVKnots: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetVKnots(self, *args)


    def VKnots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VKnots(self, *args)


    def VKnotsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_VKnotsValue(self, *args)


    def NbVKnots(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_NbVKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        :rtype: StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnots_KnotSpec(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BSplineSurfaceWithKnots(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineSurfaceWithKnots
StepGeom_BSplineSurfaceWithKnots.Init = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_Init, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.SetUMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_SetUMultiplicities, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.UMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_UMultiplicities, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.UMultiplicitiesValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_UMultiplicitiesValue, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.NbUMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_NbUMultiplicities, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.SetVMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_SetVMultiplicities, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.VMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_VMultiplicities, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.VMultiplicitiesValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_VMultiplicitiesValue, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.NbVMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_NbVMultiplicities, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.SetUKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_SetUKnots, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.UKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_UKnots, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.UKnotsValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_UKnotsValue, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.NbUKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_NbUKnots, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.SetVKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_SetVKnots, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.VKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_VKnots, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.VKnotsValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_VKnotsValue, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.NbVKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_NbVKnots, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.SetKnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_SetKnotSpec, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots.KnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnots_KnotSpec, None, StepGeom_BSplineSurfaceWithKnots)
StepGeom_BSplineSurfaceWithKnots_swigregister = _StepGeom.StepGeom_BSplineSurfaceWithKnots_swigregister
StepGeom_BSplineSurfaceWithKnots_swigregister(StepGeom_BSplineSurfaceWithKnots)

class Handle_StepGeom_BSplineSurfaceWithKnots(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_swiginit(self, _StepGeom.new_Handle_StepGeom_BSplineSurfaceWithKnots(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineSurfaceWithKnots
Handle_StepGeom_BSplineSurfaceWithKnots.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_Nullify, None, Handle_StepGeom_BSplineSurfaceWithKnots)
Handle_StepGeom_BSplineSurfaceWithKnots.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_IsNull, None, Handle_StepGeom_BSplineSurfaceWithKnots)
Handle_StepGeom_BSplineSurfaceWithKnots.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_GetObject, None, Handle_StepGeom_BSplineSurfaceWithKnots)
Handle_StepGeom_BSplineSurfaceWithKnots_swigregister = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_swigregister
Handle_StepGeom_BSplineSurfaceWithKnots_swigregister(Handle_StepGeom_BSplineSurfaceWithKnots)

def Handle_StepGeom_BSplineSurfaceWithKnots_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DownCast(AnObject)
Handle_StepGeom_BSplineSurfaceWithKnots_DownCast = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots_DownCast

class StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BSplineSurfaceWithKnotsAndRationalBSplineSurface

        :rtype: None

        """
        _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swiginit(self, _StepGeom.new_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aBSplineSurfaceWithKnots:
        :type aBSplineSurfaceWithKnots: Handle_StepGeom_BSplineSurfaceWithKnots &
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aUMultiplicities:
        :type aUMultiplicities: Handle_TColStd_HArray1OfInteger &
        :param aVMultiplicities:
        :type aVMultiplicities: Handle_TColStd_HArray1OfInteger &
        :param aUKnots:
        :type aUKnots: Handle_TColStd_HArray1OfReal &
        :param aVKnots:
        :type aVKnots: Handle_TColStd_HArray1OfReal &
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Init(self, *args)


    def SetBSplineSurfaceWithKnots(self, *args):
        """
        :param aBSplineSurfaceWithKnots:
        :type aBSplineSurfaceWithKnots: Handle_StepGeom_BSplineSurfaceWithKnots &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetBSplineSurfaceWithKnots(self, *args)


    def BSplineSurfaceWithKnots(self, *args):
        """
        :rtype: Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_BSplineSurfaceWithKnots(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetUMultiplicities(self, *args):
        """
        :param aUMultiplicities:
        :type aUMultiplicities: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUMultiplicities(self, *args)


    def UMultiplicities(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicities(self, *args)


    def UMultiplicitiesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicitiesValue(self, *args)


    def NbUMultiplicities(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUMultiplicities(self, *args)


    def SetVMultiplicities(self, *args):
        """
        :param aVMultiplicities:
        :type aVMultiplicities: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVMultiplicities(self, *args)


    def VMultiplicities(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicities(self, *args)


    def VMultiplicitiesValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicitiesValue(self, *args)


    def NbVMultiplicities(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVMultiplicities(self, *args)


    def SetUKnots(self, *args):
        """
        :param aUKnots:
        :type aUKnots: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUKnots(self, *args)


    def UKnots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnots(self, *args)


    def UKnotsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnotsValue(self, *args)


    def NbUKnots(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUKnots(self, *args)


    def SetVKnots(self, *args):
        """
        :param aVKnots:
        :type aVKnots: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVKnots(self, *args)


    def VKnots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnots(self, *args)


    def VKnotsValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnotsValue(self, *args)


    def NbVKnots(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVKnots(self, *args)


    def SetKnotSpec(self, *args):
        """
        :param aKnotSpec:
        :type aKnotSpec: StepGeom_KnotType
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetKnotSpec(self, *args)


    def KnotSpec(self, *args):
        """
        :rtype: StepGeom_KnotType

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_KnotSpec(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.Init = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Init, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetBSplineSurfaceWithKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetBSplineSurfaceWithKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.BSplineSurfaceWithKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_BSplineSurfaceWithKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetRationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetRationalBSplineSurface, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.RationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_RationalBSplineSurface, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetUMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUMultiplicities, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.UMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicities, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.UMultiplicitiesValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UMultiplicitiesValue, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.NbUMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUMultiplicities, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetVMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVMultiplicities, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.VMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicities, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.VMultiplicitiesValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VMultiplicitiesValue, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.NbVMultiplicities = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVMultiplicities, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetUKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetUKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.UKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.UKnotsValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_UKnotsValue, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.NbUKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbUKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetVKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetVKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.VKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.VKnotsValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_VKnotsValue, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.NbVKnots = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbVKnots, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetKnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetKnotSpec, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.KnotSpec = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_KnotSpec, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_SetWeightsData, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.WeightsData = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsData, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_WeightsDataValue, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.NbWeightsDataI = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataI, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.NbWeightsDataJ = new_instancemethod(_StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_NbWeightsDataJ, None, StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)

class Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_Nullify, None, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_IsNull, None, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_GetObject, None, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface)

def Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast(AnObject)
Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface_DownCast

class StepGeom_BezierCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BezierCurve

        :rtype: None

        """
        _StepGeom.StepGeom_BezierCurve_swiginit(self, _StepGeom.new_StepGeom_BezierCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BezierCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierCurve
StepGeom_BezierCurve_swigregister = _StepGeom.StepGeom_BezierCurve_swigregister
StepGeom_BezierCurve_swigregister(StepGeom_BezierCurve)

class Handle_StepGeom_BezierCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BezierCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_BezierCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierCurve
Handle_StepGeom_BezierCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BezierCurve_Nullify, None, Handle_StepGeom_BezierCurve)
Handle_StepGeom_BezierCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BezierCurve_IsNull, None, Handle_StepGeom_BezierCurve)
Handle_StepGeom_BezierCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BezierCurve_GetObject, None, Handle_StepGeom_BezierCurve)
Handle_StepGeom_BezierCurve_swigregister = _StepGeom.Handle_StepGeom_BezierCurve_swigregister
Handle_StepGeom_BezierCurve_swigregister(Handle_StepGeom_BezierCurve)

def Handle_StepGeom_BezierCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BezierCurve_DownCast(AnObject)
Handle_StepGeom_BezierCurve_DownCast = _StepGeom.Handle_StepGeom_BezierCurve_DownCast

class StepGeom_BezierCurveAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BezierCurveAndRationalBSplineCurve

        :rtype: None

        """
        _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_swiginit(self, _StepGeom.new_StepGeom_BezierCurveAndRationalBSplineCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aBezierCurve:
        :type aBezierCurve: Handle_StepGeom_BezierCurve &
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_Init(self, *args)


    def SetBezierCurve(self, *args):
        """
        :param aBezierCurve:
        :type aBezierCurve: Handle_StepGeom_BezierCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetBezierCurve(self, *args)


    def BezierCurve(self, *args):
        """
        :rtype: Handle_StepGeom_BezierCurve

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_BezierCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BezierCurveAndRationalBSplineCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierCurveAndRationalBSplineCurve
StepGeom_BezierCurveAndRationalBSplineCurve.Init = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_Init, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.SetBezierCurve = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetBezierCurve, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.BezierCurve = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_BezierCurve, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.SetRationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetRationalBSplineCurve, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.RationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_RationalBSplineCurve, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_SetWeightsData, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.WeightsData = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_WeightsData, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_WeightsDataValue, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve.NbWeightsData = new_instancemethod(_StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_NbWeightsData, None, StepGeom_BezierCurveAndRationalBSplineCurve)
StepGeom_BezierCurveAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_BezierCurveAndRationalBSplineCurve_swigregister
StepGeom_BezierCurveAndRationalBSplineCurve_swigregister(StepGeom_BezierCurveAndRationalBSplineCurve)

class Handle_StepGeom_BezierCurveAndRationalBSplineCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_BezierCurveAndRationalBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierCurveAndRationalBSplineCurve
Handle_StepGeom_BezierCurveAndRationalBSplineCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_Nullify, None, Handle_StepGeom_BezierCurveAndRationalBSplineCurve)
Handle_StepGeom_BezierCurveAndRationalBSplineCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_IsNull, None, Handle_StepGeom_BezierCurveAndRationalBSplineCurve)
Handle_StepGeom_BezierCurveAndRationalBSplineCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_GetObject, None, Handle_StepGeom_BezierCurveAndRationalBSplineCurve)
Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swigregister
Handle_StepGeom_BezierCurveAndRationalBSplineCurve_swigregister(Handle_StepGeom_BezierCurveAndRationalBSplineCurve)

def Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast(AnObject)
Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve_DownCast

class StepGeom_BezierSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BezierSurface

        :rtype: None

        """
        _StepGeom.StepGeom_BezierSurface_swiginit(self, _StepGeom.new_StepGeom_BezierSurface(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BezierSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierSurface
StepGeom_BezierSurface_swigregister = _StepGeom.StepGeom_BezierSurface_swigregister
StepGeom_BezierSurface_swigregister(StepGeom_BezierSurface)

class Handle_StepGeom_BezierSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BezierSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_BezierSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierSurface
Handle_StepGeom_BezierSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BezierSurface_Nullify, None, Handle_StepGeom_BezierSurface)
Handle_StepGeom_BezierSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BezierSurface_IsNull, None, Handle_StepGeom_BezierSurface)
Handle_StepGeom_BezierSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BezierSurface_GetObject, None, Handle_StepGeom_BezierSurface)
Handle_StepGeom_BezierSurface_swigregister = _StepGeom.Handle_StepGeom_BezierSurface_swigregister
Handle_StepGeom_BezierSurface_swigregister(Handle_StepGeom_BezierSurface)

def Handle_StepGeom_BezierSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BezierSurface_DownCast(AnObject)
Handle_StepGeom_BezierSurface_DownCast = _StepGeom.Handle_StepGeom_BezierSurface_DownCast

class StepGeom_BezierSurfaceAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BezierSurfaceAndRationalBSplineSurface

        :rtype: None

        """
        _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_swiginit(self, _StepGeom.new_StepGeom_BezierSurfaceAndRationalBSplineSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aBezierSurface:
        :type aBezierSurface: Handle_StepGeom_BezierSurface &
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetBezierSurface(self, *args):
        """
        :param aBezierSurface:
        :type aBezierSurface: Handle_StepGeom_BezierSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetBezierSurface(self, *args)


    def BezierSurface(self, *args):
        """
        :rtype: Handle_StepGeom_BezierSurface

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_BezierSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: float

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BezierSurfaceAndRationalBSplineSurface
StepGeom_BezierSurfaceAndRationalBSplineSurface.Init = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_Init, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.SetBezierSurface = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetBezierSurface, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.BezierSurface = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_BezierSurface, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.SetRationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.RationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_RationalBSplineSurface, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_SetWeightsData, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.WeightsData = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsData, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_WeightsDataValue, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.NbWeightsDataI = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataI, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface.NbWeightsDataJ = new_instancemethod(_StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_NbWeightsDataJ, None, StepGeom_BezierSurfaceAndRationalBSplineSurface)
StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister
StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister(StepGeom_BezierSurfaceAndRationalBSplineSurface)

class Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_Nullify, None, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface)
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_IsNull, None, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface)
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_GetObject, None, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface)
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_swigregister(Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface)

def Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast(AnObject)
Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface_DownCast

class StepGeom_CompositeCurveOnSurface(StepGeom_CompositeCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CompositeCurveOnSurface

        :rtype: None

        """
        _StepGeom.StepGeom_CompositeCurveOnSurface_swiginit(self, _StepGeom.new_StepGeom_CompositeCurveOnSurface(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_CompositeCurveOnSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_CompositeCurveOnSurface
StepGeom_CompositeCurveOnSurface_swigregister = _StepGeom.StepGeom_CompositeCurveOnSurface_swigregister
StepGeom_CompositeCurveOnSurface_swigregister(StepGeom_CompositeCurveOnSurface)

class Handle_StepGeom_CompositeCurveOnSurface(Handle_StepGeom_CompositeCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_CompositeCurveOnSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_CompositeCurveOnSurface
Handle_StepGeom_CompositeCurveOnSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurveOnSurface_Nullify, None, Handle_StepGeom_CompositeCurveOnSurface)
Handle_StepGeom_CompositeCurveOnSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurveOnSurface_IsNull, None, Handle_StepGeom_CompositeCurveOnSurface)
Handle_StepGeom_CompositeCurveOnSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_CompositeCurveOnSurface_GetObject, None, Handle_StepGeom_CompositeCurveOnSurface)
Handle_StepGeom_CompositeCurveOnSurface_swigregister = _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_swigregister
Handle_StepGeom_CompositeCurveOnSurface_swigregister(Handle_StepGeom_CompositeCurveOnSurface)

def Handle_StepGeom_CompositeCurveOnSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DownCast(AnObject)
Handle_StepGeom_CompositeCurveOnSurface_DownCast = _StepGeom.Handle_StepGeom_CompositeCurveOnSurface_DownCast

class StepGeom_DegenerateToroidalSurface(StepGeom_ToroidalSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a DegenerateToroidalSurface

        :rtype: None

        """
        _StepGeom.StepGeom_DegenerateToroidalSurface_swiginit(self, _StepGeom.new_StepGeom_DegenerateToroidalSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aMajorRadius:
        :type aMajorRadius: float
        :param aMinorRadius:
        :type aMinorRadius: float
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aMajorRadius:
        :type aMajorRadius: float
        :param aMinorRadius:
        :type aMinorRadius: float
        :param aSelectOuter:
        :type aSelectOuter: bool
        :rtype: void

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_Init(self, *args)


    def SetSelectOuter(self, *args):
        """
        :param aSelectOuter:
        :type aSelectOuter: bool
        :rtype: None

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_SetSelectOuter(self, *args)


    def SelectOuter(self, *args):
        """
        :rtype: bool

        """
        return _StepGeom.StepGeom_DegenerateToroidalSurface_SelectOuter(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_DegenerateToroidalSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_DegenerateToroidalSurface
StepGeom_DegenerateToroidalSurface.Init = new_instancemethod(_StepGeom.StepGeom_DegenerateToroidalSurface_Init, None, StepGeom_DegenerateToroidalSurface)
StepGeom_DegenerateToroidalSurface.SetSelectOuter = new_instancemethod(_StepGeom.StepGeom_DegenerateToroidalSurface_SetSelectOuter, None, StepGeom_DegenerateToroidalSurface)
StepGeom_DegenerateToroidalSurface.SelectOuter = new_instancemethod(_StepGeom.StepGeom_DegenerateToroidalSurface_SelectOuter, None, StepGeom_DegenerateToroidalSurface)
StepGeom_DegenerateToroidalSurface_swigregister = _StepGeom.StepGeom_DegenerateToroidalSurface_swigregister
StepGeom_DegenerateToroidalSurface_swigregister(StepGeom_DegenerateToroidalSurface)

class Handle_StepGeom_DegenerateToroidalSurface(Handle_StepGeom_ToroidalSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_DegenerateToroidalSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_DegenerateToroidalSurface
Handle_StepGeom_DegenerateToroidalSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_DegenerateToroidalSurface_Nullify, None, Handle_StepGeom_DegenerateToroidalSurface)
Handle_StepGeom_DegenerateToroidalSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_DegenerateToroidalSurface_IsNull, None, Handle_StepGeom_DegenerateToroidalSurface)
Handle_StepGeom_DegenerateToroidalSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_DegenerateToroidalSurface_GetObject, None, Handle_StepGeom_DegenerateToroidalSurface)
Handle_StepGeom_DegenerateToroidalSurface_swigregister = _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_swigregister
Handle_StepGeom_DegenerateToroidalSurface_swigregister(Handle_StepGeom_DegenerateToroidalSurface)

def Handle_StepGeom_DegenerateToroidalSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DownCast(AnObject)
Handle_StepGeom_DegenerateToroidalSurface_DownCast = _StepGeom.Handle_StepGeom_DegenerateToroidalSurface_DownCast

class StepGeom_QuasiUniformCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a QuasiUniformCurve

        :rtype: None

        """
        _StepGeom.StepGeom_QuasiUniformCurve_swiginit(self, _StepGeom.new_StepGeom_QuasiUniformCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_QuasiUniformCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformCurve
StepGeom_QuasiUniformCurve_swigregister = _StepGeom.StepGeom_QuasiUniformCurve_swigregister
StepGeom_QuasiUniformCurve_swigregister(StepGeom_QuasiUniformCurve)

class Handle_StepGeom_QuasiUniformCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_QuasiUniformCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_QuasiUniformCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformCurve
Handle_StepGeom_QuasiUniformCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformCurve_Nullify, None, Handle_StepGeom_QuasiUniformCurve)
Handle_StepGeom_QuasiUniformCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformCurve_IsNull, None, Handle_StepGeom_QuasiUniformCurve)
Handle_StepGeom_QuasiUniformCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformCurve_GetObject, None, Handle_StepGeom_QuasiUniformCurve)
Handle_StepGeom_QuasiUniformCurve_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformCurve_swigregister
Handle_StepGeom_QuasiUniformCurve_swigregister(Handle_StepGeom_QuasiUniformCurve)

def Handle_StepGeom_QuasiUniformCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_QuasiUniformCurve_DownCast(AnObject)
Handle_StepGeom_QuasiUniformCurve_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformCurve_DownCast

class StepGeom_QuasiUniformCurveAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a QuasiUniformCurveAndRationalBSplineCurve

        :rtype: None

        """
        _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swiginit(self, _StepGeom.new_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aQuasiUniformCurve:
        :type aQuasiUniformCurve: Handle_StepGeom_QuasiUniformCurve &
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Init(self, *args)


    def SetQuasiUniformCurve(self, *args):
        """
        :param aQuasiUniformCurve:
        :type aQuasiUniformCurve: Handle_StepGeom_QuasiUniformCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetQuasiUniformCurve(self, *args)


    def QuasiUniformCurve(self, *args):
        """
        :rtype: Handle_StepGeom_QuasiUniformCurve

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_QuasiUniformCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.Init = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Init, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.SetQuasiUniformCurve = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetQuasiUniformCurve, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.QuasiUniformCurve = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_QuasiUniformCurve, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.SetRationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.RationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_RationalBSplineCurve, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_SetWeightsData, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.WeightsData = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsData, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_WeightsDataValue, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve.NbWeightsData = new_instancemethod(_StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_NbWeightsData, None, StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister
StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister(StepGeom_QuasiUniformCurveAndRationalBSplineCurve)

class Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_Nullify, None, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_IsNull, None, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_GetObject, None, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve)
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_swigregister(Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve)

def Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast(AnObject)
Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve_DownCast

class StepGeom_QuasiUniformSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a QuasiUniformSurface

        :rtype: None

        """
        _StepGeom.StepGeom_QuasiUniformSurface_swiginit(self, _StepGeom.new_StepGeom_QuasiUniformSurface(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_QuasiUniformSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformSurface
StepGeom_QuasiUniformSurface_swigregister = _StepGeom.StepGeom_QuasiUniformSurface_swigregister
StepGeom_QuasiUniformSurface_swigregister(StepGeom_QuasiUniformSurface)

class Handle_StepGeom_QuasiUniformSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_QuasiUniformSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_QuasiUniformSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformSurface
Handle_StepGeom_QuasiUniformSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformSurface_Nullify, None, Handle_StepGeom_QuasiUniformSurface)
Handle_StepGeom_QuasiUniformSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformSurface_IsNull, None, Handle_StepGeom_QuasiUniformSurface)
Handle_StepGeom_QuasiUniformSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformSurface_GetObject, None, Handle_StepGeom_QuasiUniformSurface)
Handle_StepGeom_QuasiUniformSurface_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformSurface_swigregister
Handle_StepGeom_QuasiUniformSurface_swigregister(Handle_StepGeom_QuasiUniformSurface)

def Handle_StepGeom_QuasiUniformSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_QuasiUniformSurface_DownCast(AnObject)
Handle_StepGeom_QuasiUniformSurface_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformSurface_DownCast

class StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a QuasiUniformSurfaceAndRationalBSplineSurface

        :rtype: None

        """
        _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swiginit(self, _StepGeom.new_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aQuasiUniformSurface:
        :type aQuasiUniformSurface: Handle_StepGeom_QuasiUniformSurface &
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetQuasiUniformSurface(self, *args):
        """
        :param aQuasiUniformSurface:
        :type aQuasiUniformSurface: Handle_StepGeom_QuasiUniformSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetQuasiUniformSurface(self, *args)


    def QuasiUniformSurface(self, *args):
        """
        :rtype: Handle_StepGeom_QuasiUniformSurface

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_QuasiUniformSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: float

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.Init = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Init, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.SetQuasiUniformSurface = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetQuasiUniformSurface, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.QuasiUniformSurface = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_QuasiUniformSurface, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.SetRationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.RationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_SetWeightsData, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.WeightsData = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsData, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_WeightsDataValue, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.NbWeightsDataI = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataI, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.NbWeightsDataJ = new_instancemethod(_StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ, None, StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister
StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister(StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)

class Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_Nullify, None, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_IsNull, None, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_GetObject, None, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_swigregister(Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface)

def Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast(AnObject)
Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface_DownCast

class StepGeom_RationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RationalBSplineCurve

        :rtype: None

        """
        _StepGeom.StepGeom_RationalBSplineCurve_swiginit(self, _StepGeom.new_StepGeom_RationalBSplineCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_Init(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_RationalBSplineCurve_NbWeightsData(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_RationalBSplineCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_RationalBSplineCurve
StepGeom_RationalBSplineCurve.Init = new_instancemethod(_StepGeom.StepGeom_RationalBSplineCurve_Init, None, StepGeom_RationalBSplineCurve)
StepGeom_RationalBSplineCurve.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_RationalBSplineCurve_SetWeightsData, None, StepGeom_RationalBSplineCurve)
StepGeom_RationalBSplineCurve.WeightsData = new_instancemethod(_StepGeom.StepGeom_RationalBSplineCurve_WeightsData, None, StepGeom_RationalBSplineCurve)
StepGeom_RationalBSplineCurve.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_RationalBSplineCurve_WeightsDataValue, None, StepGeom_RationalBSplineCurve)
StepGeom_RationalBSplineCurve.NbWeightsData = new_instancemethod(_StepGeom.StepGeom_RationalBSplineCurve_NbWeightsData, None, StepGeom_RationalBSplineCurve)
StepGeom_RationalBSplineCurve_swigregister = _StepGeom.StepGeom_RationalBSplineCurve_swigregister
StepGeom_RationalBSplineCurve_swigregister(StepGeom_RationalBSplineCurve)

class Handle_StepGeom_RationalBSplineCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_RationalBSplineCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_RationalBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RationalBSplineCurve
Handle_StepGeom_RationalBSplineCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_RationalBSplineCurve_Nullify, None, Handle_StepGeom_RationalBSplineCurve)
Handle_StepGeom_RationalBSplineCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_RationalBSplineCurve_IsNull, None, Handle_StepGeom_RationalBSplineCurve)
Handle_StepGeom_RationalBSplineCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_RationalBSplineCurve_GetObject, None, Handle_StepGeom_RationalBSplineCurve)
Handle_StepGeom_RationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_RationalBSplineCurve_swigregister
Handle_StepGeom_RationalBSplineCurve_swigregister(Handle_StepGeom_RationalBSplineCurve)

def Handle_StepGeom_RationalBSplineCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_RationalBSplineCurve_DownCast(AnObject)
Handle_StepGeom_RationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_RationalBSplineCurve_DownCast

class StepGeom_RationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RationalBSplineSurface

        :rtype: None

        """
        _StepGeom.StepGeom_RationalBSplineSurface_swiginit(self, _StepGeom.new_StepGeom_RationalBSplineSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_Init(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: float

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_RationalBSplineSurface_NbWeightsDataJ(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_RationalBSplineSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_RationalBSplineSurface
StepGeom_RationalBSplineSurface.Init = new_instancemethod(_StepGeom.StepGeom_RationalBSplineSurface_Init, None, StepGeom_RationalBSplineSurface)
StepGeom_RationalBSplineSurface.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_RationalBSplineSurface_SetWeightsData, None, StepGeom_RationalBSplineSurface)
StepGeom_RationalBSplineSurface.WeightsData = new_instancemethod(_StepGeom.StepGeom_RationalBSplineSurface_WeightsData, None, StepGeom_RationalBSplineSurface)
StepGeom_RationalBSplineSurface.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_RationalBSplineSurface_WeightsDataValue, None, StepGeom_RationalBSplineSurface)
StepGeom_RationalBSplineSurface.NbWeightsDataI = new_instancemethod(_StepGeom.StepGeom_RationalBSplineSurface_NbWeightsDataI, None, StepGeom_RationalBSplineSurface)
StepGeom_RationalBSplineSurface.NbWeightsDataJ = new_instancemethod(_StepGeom.StepGeom_RationalBSplineSurface_NbWeightsDataJ, None, StepGeom_RationalBSplineSurface)
StepGeom_RationalBSplineSurface_swigregister = _StepGeom.StepGeom_RationalBSplineSurface_swigregister
StepGeom_RationalBSplineSurface_swigregister(StepGeom_RationalBSplineSurface)

class Handle_StepGeom_RationalBSplineSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_RationalBSplineSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_RationalBSplineSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_RationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_RationalBSplineSurface
Handle_StepGeom_RationalBSplineSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_RationalBSplineSurface_Nullify, None, Handle_StepGeom_RationalBSplineSurface)
Handle_StepGeom_RationalBSplineSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_RationalBSplineSurface_IsNull, None, Handle_StepGeom_RationalBSplineSurface)
Handle_StepGeom_RationalBSplineSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_RationalBSplineSurface_GetObject, None, Handle_StepGeom_RationalBSplineSurface)
Handle_StepGeom_RationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_RationalBSplineSurface_swigregister
Handle_StepGeom_RationalBSplineSurface_swigregister(Handle_StepGeom_RationalBSplineSurface)

def Handle_StepGeom_RationalBSplineSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_RationalBSplineSurface_DownCast(AnObject)
Handle_StepGeom_RationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_RationalBSplineSurface_DownCast

class StepGeom_UniformCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a UniformCurve

        :rtype: None

        """
        _StepGeom.StepGeom_UniformCurve_swiginit(self, _StepGeom.new_StepGeom_UniformCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_UniformCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformCurve
StepGeom_UniformCurve_swigregister = _StepGeom.StepGeom_UniformCurve_swigregister
StepGeom_UniformCurve_swigregister(StepGeom_UniformCurve)

class Handle_StepGeom_UniformCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_UniformCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_UniformCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformCurve
Handle_StepGeom_UniformCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_UniformCurve_Nullify, None, Handle_StepGeom_UniformCurve)
Handle_StepGeom_UniformCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_UniformCurve_IsNull, None, Handle_StepGeom_UniformCurve)
Handle_StepGeom_UniformCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_UniformCurve_GetObject, None, Handle_StepGeom_UniformCurve)
Handle_StepGeom_UniformCurve_swigregister = _StepGeom.Handle_StepGeom_UniformCurve_swigregister
Handle_StepGeom_UniformCurve_swigregister(Handle_StepGeom_UniformCurve)

def Handle_StepGeom_UniformCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_UniformCurve_DownCast(AnObject)
Handle_StepGeom_UniformCurve_DownCast = _StepGeom.Handle_StepGeom_UniformCurve_DownCast

class StepGeom_UniformCurveAndRationalBSplineCurve(StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a UniformCurveAndRationalBSplineCurve

        :rtype: None

        """
        _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_swiginit(self, _StepGeom.new_StepGeom_UniformCurveAndRationalBSplineCurve(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aUniformCurve:
        :type aUniformCurve: Handle_StepGeom_UniformCurve &
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDegree:
        :type aDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray1OfCartesianPoint &
        :param aCurveForm:
        :type aCurveForm: StepGeom_BSplineCurveForm
        :param aClosedCurve:
        :type aClosedCurve: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_Init(self, *args)


    def SetUniformCurve(self, *args):
        """
        :param aUniformCurve:
        :type aUniformCurve: Handle_StepGeom_UniformCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetUniformCurve(self, *args)


    def UniformCurve(self, *args):
        """
        :rtype: Handle_StepGeom_UniformCurve

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_UniformCurve(self, *args)


    def SetRationalBSplineCurve(self, *args):
        """
        :param aRationalBSplineCurve:
        :type aRationalBSplineCurve: Handle_StepGeom_RationalBSplineCurve &
        :rtype: None

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve(self, *args)


    def RationalBSplineCurve(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineCurve

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_RationalBSplineCurve(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num:
        :type num: int
        :rtype: float

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_WeightsDataValue(self, *args)


    def NbWeightsData(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_NbWeightsData(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_UniformCurveAndRationalBSplineCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformCurveAndRationalBSplineCurve
StepGeom_UniformCurveAndRationalBSplineCurve.Init = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_Init, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.SetUniformCurve = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetUniformCurve, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.UniformCurve = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_UniformCurve, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.SetRationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetRationalBSplineCurve, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.RationalBSplineCurve = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_RationalBSplineCurve, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_SetWeightsData, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.WeightsData = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_WeightsData, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_WeightsDataValue, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve.NbWeightsData = new_instancemethod(_StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_NbWeightsData, None, StepGeom_UniformCurveAndRationalBSplineCurve)
StepGeom_UniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.StepGeom_UniformCurveAndRationalBSplineCurve_swigregister
StepGeom_UniformCurveAndRationalBSplineCurve_swigregister(StepGeom_UniformCurveAndRationalBSplineCurve)

class Handle_StepGeom_UniformCurveAndRationalBSplineCurve(Handle_StepGeom_BSplineCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_UniformCurveAndRationalBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformCurveAndRationalBSplineCurve
Handle_StepGeom_UniformCurveAndRationalBSplineCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_Nullify, None, Handle_StepGeom_UniformCurveAndRationalBSplineCurve)
Handle_StepGeom_UniformCurveAndRationalBSplineCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_IsNull, None, Handle_StepGeom_UniformCurveAndRationalBSplineCurve)
Handle_StepGeom_UniformCurveAndRationalBSplineCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_GetObject, None, Handle_StepGeom_UniformCurveAndRationalBSplineCurve)
Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swigregister = _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swigregister
Handle_StepGeom_UniformCurveAndRationalBSplineCurve_swigregister(Handle_StepGeom_UniformCurveAndRationalBSplineCurve)

def Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast(AnObject)
Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast = _StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve_DownCast

class StepGeom_UniformSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a UniformSurface

        :rtype: None

        """
        _StepGeom.StepGeom_UniformSurface_swiginit(self, _StepGeom.new_StepGeom_UniformSurface(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_UniformSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformSurface
StepGeom_UniformSurface_swigregister = _StepGeom.StepGeom_UniformSurface_swigregister
StepGeom_UniformSurface_swigregister(StepGeom_UniformSurface)

class Handle_StepGeom_UniformSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_UniformSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_UniformSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformSurface
Handle_StepGeom_UniformSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_UniformSurface_Nullify, None, Handle_StepGeom_UniformSurface)
Handle_StepGeom_UniformSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_UniformSurface_IsNull, None, Handle_StepGeom_UniformSurface)
Handle_StepGeom_UniformSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_UniformSurface_GetObject, None, Handle_StepGeom_UniformSurface)
Handle_StepGeom_UniformSurface_swigregister = _StepGeom.Handle_StepGeom_UniformSurface_swigregister
Handle_StepGeom_UniformSurface_swigregister(Handle_StepGeom_UniformSurface)

def Handle_StepGeom_UniformSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_UniformSurface_DownCast(AnObject)
Handle_StepGeom_UniformSurface_DownCast = _StepGeom.Handle_StepGeom_UniformSurface_DownCast

class StepGeom_UniformSurfaceAndRationalBSplineSurface(StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a UniformSurfaceAndRationalBSplineSurface

        :rtype: None

        """
        _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_swiginit(self, _StepGeom.new_StepGeom_UniformSurfaceAndRationalBSplineSurface(*args))

    def Init(self, *args):
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aUniformSurface:
        :type aUniformSurface: Handle_StepGeom_UniformSurface &
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aUDegree:
        :type aUDegree: int
        :param aVDegree:
        :type aVDegree: int
        :param aControlPointsList:
        :type aControlPointsList: Handle_StepGeom_HArray2OfCartesianPoint &
        :param aSurfaceForm:
        :type aSurfaceForm: StepGeom_BSplineSurfaceForm
        :param aUClosed:
        :type aUClosed: StepData_Logical
        :param aVClosed:
        :type aVClosed: StepData_Logical
        :param aSelfIntersect:
        :type aSelfIntersect: StepData_Logical
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: void

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_Init(self, *args)


    def SetUniformSurface(self, *args):
        """
        :param aUniformSurface:
        :type aUniformSurface: Handle_StepGeom_UniformSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetUniformSurface(self, *args)


    def UniformSurface(self, *args):
        """
        :rtype: Handle_StepGeom_UniformSurface

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_UniformSurface(self, *args)


    def SetRationalBSplineSurface(self, *args):
        """
        :param aRationalBSplineSurface:
        :type aRationalBSplineSurface: Handle_StepGeom_RationalBSplineSurface &
        :rtype: None

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface(self, *args)


    def RationalBSplineSurface(self, *args):
        """
        :rtype: Handle_StepGeom_RationalBSplineSurface

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface(self, *args)


    def SetWeightsData(self, *args):
        """
        :param aWeightsData:
        :type aWeightsData: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetWeightsData(self, *args)


    def WeightsData(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsData(self, *args)


    def WeightsDataValue(self, *args):
        """
        :param num1:
        :type num1: int
        :param num2:
        :type num2: int
        :rtype: float

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsDataValue(self, *args)


    def NbWeightsDataI(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataI(self, *args)


    def NbWeightsDataJ(self, *args):
        """
        :rtype: int

        """
        return _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_UniformSurfaceAndRationalBSplineSurface
StepGeom_UniformSurfaceAndRationalBSplineSurface.Init = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_Init, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.SetUniformSurface = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetUniformSurface, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.UniformSurface = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_UniformSurface, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.SetRationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetRationalBSplineSurface, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.RationalBSplineSurface = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_RationalBSplineSurface, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.SetWeightsData = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_SetWeightsData, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.WeightsData = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsData, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.WeightsDataValue = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_WeightsDataValue, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.NbWeightsDataI = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataI, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface.NbWeightsDataJ = new_instancemethod(_StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_NbWeightsDataJ, None, StepGeom_UniformSurfaceAndRationalBSplineSurface)
StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister
StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister(StepGeom_UniformSurfaceAndRationalBSplineSurface)

class Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface(Handle_StepGeom_BSplineSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swiginit(self, _StepGeom.new_Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_Nullify, None, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface)
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_IsNull, None, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface)
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_GetObject, None, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface)
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister = _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_swigregister(Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface)

def Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast(AnObject)
Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast = _StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface_DownCast

class StepGeom_BoundaryCurve(StepGeom_CompositeCurveOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BoundaryCurve

        :rtype: None

        """
        _StepGeom.StepGeom_BoundaryCurve_swiginit(self, _StepGeom.new_StepGeom_BoundaryCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_BoundaryCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_BoundaryCurve
StepGeom_BoundaryCurve_swigregister = _StepGeom.StepGeom_BoundaryCurve_swigregister
StepGeom_BoundaryCurve_swigregister(StepGeom_BoundaryCurve)

class Handle_StepGeom_BoundaryCurve(Handle_StepGeom_CompositeCurveOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_BoundaryCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_BoundaryCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_BoundaryCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_BoundaryCurve
Handle_StepGeom_BoundaryCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_BoundaryCurve_Nullify, None, Handle_StepGeom_BoundaryCurve)
Handle_StepGeom_BoundaryCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_BoundaryCurve_IsNull, None, Handle_StepGeom_BoundaryCurve)
Handle_StepGeom_BoundaryCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_BoundaryCurve_GetObject, None, Handle_StepGeom_BoundaryCurve)
Handle_StepGeom_BoundaryCurve_swigregister = _StepGeom.Handle_StepGeom_BoundaryCurve_swigregister
Handle_StepGeom_BoundaryCurve_swigregister(Handle_StepGeom_BoundaryCurve)

def Handle_StepGeom_BoundaryCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_BoundaryCurve_DownCast(AnObject)
Handle_StepGeom_BoundaryCurve_DownCast = _StepGeom.Handle_StepGeom_BoundaryCurve_DownCast

class StepGeom_OuterBoundaryCurve(StepGeom_BoundaryCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OuterBoundaryCurve

        :rtype: None

        """
        _StepGeom.StepGeom_OuterBoundaryCurve_swiginit(self, _StepGeom.new_StepGeom_OuterBoundaryCurve(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepGeom_OuterBoundaryCurve(self)
            self.thisown = False
            return self.thisHandle

    __swig_destroy__ = _StepGeom.delete_StepGeom_OuterBoundaryCurve
StepGeom_OuterBoundaryCurve_swigregister = _StepGeom.StepGeom_OuterBoundaryCurve_swigregister
StepGeom_OuterBoundaryCurve_swigregister(StepGeom_OuterBoundaryCurve)

class Handle_StepGeom_OuterBoundaryCurve(Handle_StepGeom_BoundaryCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepGeom.Handle_StepGeom_OuterBoundaryCurve_swiginit(self, _StepGeom.new_Handle_StepGeom_OuterBoundaryCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepGeom.Handle_StepGeom_OuterBoundaryCurve_DownCast)
    __swig_destroy__ = _StepGeom.delete_Handle_StepGeom_OuterBoundaryCurve
Handle_StepGeom_OuterBoundaryCurve.Nullify = new_instancemethod(_StepGeom.Handle_StepGeom_OuterBoundaryCurve_Nullify, None, Handle_StepGeom_OuterBoundaryCurve)
Handle_StepGeom_OuterBoundaryCurve.IsNull = new_instancemethod(_StepGeom.Handle_StepGeom_OuterBoundaryCurve_IsNull, None, Handle_StepGeom_OuterBoundaryCurve)
Handle_StepGeom_OuterBoundaryCurve.GetObject = new_instancemethod(_StepGeom.Handle_StepGeom_OuterBoundaryCurve_GetObject, None, Handle_StepGeom_OuterBoundaryCurve)
Handle_StepGeom_OuterBoundaryCurve_swigregister = _StepGeom.Handle_StepGeom_OuterBoundaryCurve_swigregister
Handle_StepGeom_OuterBoundaryCurve_swigregister(Handle_StepGeom_OuterBoundaryCurve)

def Handle_StepGeom_OuterBoundaryCurve_DownCast(AnObject):
    return _StepGeom.Handle_StepGeom_OuterBoundaryCurve_DownCast(AnObject)
Handle_StepGeom_OuterBoundaryCurve_DownCast = _StepGeom.Handle_StepGeom_OuterBoundaryCurve_DownCast



